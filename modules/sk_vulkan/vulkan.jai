// MIT License

// Copyright (c) 2022 Hamad Almamari (hamad-r)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Vulkan 1.2.189.2 Generated by jaicc. with -DVK_USE_PLATFORM_WIN32_KHR
// - macros ported manually. (only which we care about)
// - set default value for sType @uncompleat

// - types renamed manually:
// - uint8_t, uint16_t, uint32_t, uint64_t -> u8, u16, u32, u64
// - sint8_t, sint16_t, sint32_t, sint64_t -> s8, s16, s32, s64
// - size_t -> u64
// - *s8 -> *u8
// - enum s32 -> enum u32 (but not VkResult)
// - [xx] s8 -> [xx] u8
// - fixed size arrays in proc calls -> pointer of fixed array.

// - FlagBits :: enum u32 -> FlagBits :: enum_flags u32
// - FlagBitsKHR :: enum u32 -> FlagBitsKHR :: enum_flags u32
// - FlagBitsEXT :: enum u32 -> FlagBitsEXT :: enum_flags u32
//
// - ([A-Za-z]+)Flags :: VkFlags; -> $1Flags :: $1FlagBits; // only which has flags
// - ([A-Za-z]+)FlagsKHR :: VkFlags; -> $1FlagsKHR :: $1FlagBitsKHR; // only which has flags
// - ([A-Za-z]+)FlagsEXT :: VkFlags; -> $1FlagsEXT :: $1FlagBitsEXT; // only which has flags

// - struct members with type name renamed
// - float64/32: -> _float64/32:
// - u64: -> _u64:


//### vulkan_core.h

// macros
VK_MAKE_VERSION :: (major: u32, minor: u32, patch: u32) -> u32 {
    return (major << 22) | (minor << 12) | patch;
}

VK_API_VERSION_1_0 :: #run VK_MAKE_VERSION(1, 0, 0);
VK_API_VERSION_1_1 :: #run VK_MAKE_VERSION(1, 1, 0);
VK_API_VERSION_1_2 :: #run VK_MAKE_VERSION(1, 2, 0);
VK_VERSION_MAJOR   :: (version: u32) -> u32 { return version >> 22; }
VK_VERSION_MINOR   :: (version: u32) -> u32 { return (version >> 12) & 0x3ff; }
VK_VERSION_PATCH   :: (version: u32) -> u32 { return version & 0xfff; }

VK_NULL_HANDLE    :: null;
VK_HEADER_VERSION :: 189;
VK_TRUE           :VkBool32: 1;
VK_FALSE          :VkBool32: 0;
VK_SUBPASS_EXTERNAL :u32: 0xffff_ffff; // ~0;


// by jaicc
VkBool32 :: u32;

VkDeviceAddress :: u64;

VkDeviceSize :: u64;

VkFlags :: u32;

VkSampleMask :: u32;

VkBuffer_T :: struct {
}

VkBuffer :: *VkBuffer_T;

VkImage_T :: struct {
}

VkImage :: *VkImage_T;

VkInstance_T :: struct {
}

VkInstance :: *VkInstance_T;

VkPhysicalDevice_T :: struct {
}

VkPhysicalDevice :: *VkPhysicalDevice_T;

VkDevice_T :: struct {
}

VkDevice :: *VkDevice_T;

VkQueue_T :: struct {
}

VkQueue :: *VkQueue_T;

VkSemaphore_T :: struct {
}

VkSemaphore :: *VkSemaphore_T;

VkCommandBuffer_T :: struct {
}

VkCommandBuffer :: *VkCommandBuffer_T;

VkFence_T :: struct {
}

VkFence :: *VkFence_T;

VkDeviceMemory_T :: struct {
}

VkDeviceMemory :: *VkDeviceMemory_T;

VkEvent_T :: struct {
}

VkEvent :: *VkEvent_T;

VkQueryPool_T :: struct {
}

VkQueryPool :: *VkQueryPool_T;

VkBufferView_T :: struct {
}

VkBufferView :: *VkBufferView_T;

VkImageView_T :: struct {
}

VkImageView :: *VkImageView_T;

VkShaderModule_T :: struct {
}

VkShaderModule :: *VkShaderModule_T;

VkPipelineCache_T :: struct {
}

VkPipelineCache :: *VkPipelineCache_T;

VkPipelineLayout_T :: struct {
}

VkPipelineLayout :: *VkPipelineLayout_T;

VkPipeline_T :: struct {
}

VkPipeline :: *VkPipeline_T;

VkRenderPass_T :: struct {
}

VkRenderPass :: *VkRenderPass_T;

VkDescriptorSetLayout_T :: struct {
}

VkDescriptorSetLayout :: *VkDescriptorSetLayout_T;

VkSampler_T :: struct {
}

VkSampler :: *VkSampler_T;

VkDescriptorSet_T :: struct {
}

VkDescriptorSet :: *VkDescriptorSet_T;

VkDescriptorPool_T :: struct {
}

VkDescriptorPool :: *VkDescriptorPool_T;

VkFramebuffer_T :: struct {
}

VkFramebuffer :: *VkFramebuffer_T;

VkCommandPool_T :: struct {
}

VkCommandPool :: *VkCommandPool_T;

using VkResult :: enum s32 {
    VK_SUCCESS :: 0;
    VK_NOT_READY :: 1;
    VK_TIMEOUT :: 2;
    VK_EVENT_SET :: 3;
    VK_EVENT_RESET :: 4;
    VK_INCOMPLETE :: 5;
    VK_ERROR_OUT_OF_HOST_MEMORY :: -1;
    VK_ERROR_OUT_OF_DEVICE_MEMORY :: -2;
    VK_ERROR_INITIALIZATION_FAILED :: -3;
    VK_ERROR_DEVICE_LOST :: -4;
    VK_ERROR_MEMORY_MAP_FAILED :: -5;
    VK_ERROR_LAYER_NOT_PRESENT :: -6;
    VK_ERROR_EXTENSION_NOT_PRESENT :: -7;
    VK_ERROR_FEATURE_NOT_PRESENT :: -8;
    VK_ERROR_INCOMPATIBLE_DRIVER :: -9;
    VK_ERROR_TOO_MANY_OBJECTS :: -10;
    VK_ERROR_FORMAT_NOT_SUPPORTED :: -11;
    VK_ERROR_FRAGMENTED_POOL :: -12;
    VK_ERROR_UNKNOWN :: -13;
    VK_ERROR_OUT_OF_POOL_MEMORY :: -1000069000;
    VK_ERROR_INVALID_EXTERNAL_HANDLE :: -1000072003;
    VK_ERROR_FRAGMENTATION :: -1000161000;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS :: -1000257000;
    VK_ERROR_SURFACE_LOST_KHR :: -1000000000;
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR :: -1000000001;
    VK_SUBOPTIMAL_KHR :: 1000001003;
    VK_ERROR_OUT_OF_DATE_KHR :: -1000001004;
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR :: -1000003001;
    VK_ERROR_VALIDATION_FAILED_EXT :: -1000011001;
    VK_ERROR_INVALID_SHADER_NV :: -1000012000;
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT :: -1000158000;
    VK_ERROR_NOT_PERMITTED_EXT :: -1000174001;
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT :: -1000255000;
    VK_THREAD_IDLE_KHR :: 1000268000;
    VK_THREAD_DONE_KHR :: 1000268001;
    VK_OPERATION_DEFERRED_KHR :: 1000268002;
    VK_OPERATION_NOT_DEFERRED_KHR :: 1000268003;
    VK_PIPELINE_COMPILE_REQUIRED_EXT :: 1000297000;
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR :: -1000069000;
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR :: -1000072003;
    VK_ERROR_FRAGMENTATION_EXT :: -1000161000;
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT :: -1000257000;
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR :: -1000257000;
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT :: 1000297000;
    VK_RESULT_MAX_ENUM :: 2147483647;
}

using VkStructureType :: enum u32 {
    VK_STRUCTURE_TYPE_APPLICATION_INFO :: 0;
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO :: 1;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO :: 2;
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO :: 3;
    VK_STRUCTURE_TYPE_SUBMIT_INFO :: 4;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO :: 5;
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE :: 6;
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO :: 7;
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO :: 8;
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO :: 9;
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO :: 10;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO :: 11;
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO :: 12;
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO :: 13;
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO :: 14;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO :: 15;
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO :: 16;
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO :: 17;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO :: 18;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO :: 19;
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO :: 20;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO :: 21;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO :: 22;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO :: 23;
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO :: 24;
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO :: 25;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO :: 26;
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO :: 27;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO :: 28;
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO :: 29;
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO :: 30;
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO :: 31;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO :: 32;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO :: 33;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO :: 34;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET :: 35;
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET :: 36;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO :: 37;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO :: 38;
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO :: 39;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO :: 40;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO :: 41;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO :: 42;
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO :: 43;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER :: 44;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER :: 45;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER :: 46;
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO :: 47;
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO :: 48;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES :: 1000094000;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO :: 1000157000;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO :: 1000157001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES :: 1000083000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS :: 1000127000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO :: 1000127001;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO :: 1000060000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO :: 1000060003;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO :: 1000060004;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO :: 1000060005;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO :: 1000060006;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO :: 1000060013;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO :: 1000060014;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES :: 1000070000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO :: 1000070001;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 :: 1000146000;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 :: 1000146001;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 :: 1000146002;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 :: 1000146003;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 :: 1000146004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 :: 1000059000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 :: 1000059001;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 :: 1000059002;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 :: 1000059003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 :: 1000059004;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 :: 1000059005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 :: 1000059006;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 :: 1000059007;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 :: 1000059008;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES :: 1000117000;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO :: 1000117001;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO :: 1000117002;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO :: 1000117003;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO :: 1000053000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES :: 1000053001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES :: 1000053002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES :: 1000120000;
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO :: 1000145000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES :: 1000145001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES :: 1000145002;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 :: 1000145003;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO :: 1000156000;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO :: 1000156001;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO :: 1000156002;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO :: 1000156003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES :: 1000156004;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES :: 1000156005;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO :: 1000085000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO :: 1000071000;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES :: 1000071001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO :: 1000071002;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES :: 1000071003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES :: 1000071004;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO :: 1000072000;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO :: 1000072001;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO :: 1000072002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO :: 1000112000;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES :: 1000112001;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO :: 1000113000;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO :: 1000077000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO :: 1000076000;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES :: 1000076001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES :: 1000168000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT :: 1000168001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES :: 1000063000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES :: 49;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES :: 50;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES :: 51;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES :: 52;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO :: 1000147000;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 :: 1000109000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 :: 1000109001;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 :: 1000109002;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 :: 1000109003;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 :: 1000109004;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO :: 1000109005;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO :: 1000109006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES :: 1000177000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES :: 1000196000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES :: 1000180000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES :: 1000082000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES :: 1000197000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO :: 1000161000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES :: 1000161001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES :: 1000161002;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO :: 1000161003;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT :: 1000161004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES :: 1000199000;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE :: 1000199001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES :: 1000221000;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO :: 1000246000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES :: 1000130000;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO :: 1000130001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES :: 1000211000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES :: 1000108000;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO :: 1000108001;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO :: 1000108002;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO :: 1000108003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES :: 1000253000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES :: 1000175000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES :: 1000241000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT :: 1000241001;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT :: 1000241002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES :: 1000261000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES :: 1000207000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES :: 1000207001;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO :: 1000207002;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO :: 1000207003;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO :: 1000207004;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO :: 1000207005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES :: 1000257000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO :: 1000244001;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO :: 1000257002;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO :: 1000257003;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO :: 1000257004;
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR :: 1000001000;
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR :: 1000001001;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR :: 1000060007;
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR :: 1000060008;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR :: 1000060009;
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR :: 1000060010;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR :: 1000060011;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR :: 1000060012;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR :: 1000002000;
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR :: 1000002001;
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR :: 1000003000;
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR :: 1000004000;
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR :: 1000005000;
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR :: 1000006000;
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR :: 1000008000;
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR :: 1000009000;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT :: 1000011000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD :: 1000018000;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT :: 1000022000;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT :: 1000022001;
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT :: 1000022002;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV :: 1000026000;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV :: 1000026001;
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV :: 1000026002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT :: 1000028000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT :: 1000028001;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT :: 1000028002;
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX :: 1000029000;
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX :: 1000029001;
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX :: 1000029002;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX :: 1000030000;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX :: 1000030001;
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD :: 1000041000;
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP :: 1000049000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV :: 1000050000;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV :: 1000056000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV :: 1000056001;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV :: 1000057000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV :: 1000057001;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV :: 1000058000;
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT :: 1000061000;
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN :: 1000062000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT :: 1000066000;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT :: 1000067000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT :: 1000067001;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR :: 1000073000;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR :: 1000073001;
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR :: 1000073002;
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR :: 1000073003;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR :: 1000074000;
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR :: 1000074001;
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR :: 1000074002;
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR :: 1000075000;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR :: 1000078000;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR :: 1000078001;
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR :: 1000078002;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR :: 1000078003;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR :: 1000079000;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR :: 1000079001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR :: 1000080000;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT :: 1000081000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT :: 1000081001;
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT :: 1000081002;
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR :: 1000084000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV :: 1000087000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT :: 1000090000;
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT :: 1000091000;
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT :: 1000091001;
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT :: 1000091002;
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT :: 1000091003;
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE :: 1000092000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX :: 1000097000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV :: 1000098000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT :: 1000099000;
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT :: 1000099001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT :: 1000101000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT :: 1000101001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT :: 1000102000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT :: 1000102001;
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT :: 1000105000;
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR :: 1000111000;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR :: 1000114000;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR :: 1000114001;
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR :: 1000114002;
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR :: 1000115000;
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR :: 1000115001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR :: 1000116000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR :: 1000116001;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR :: 1000116002;
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR :: 1000116003;
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR :: 1000116004;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR :: 1000116005;
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR :: 1000116006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR :: 1000119000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR :: 1000119001;
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR :: 1000119002;
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR :: 1000121000;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR :: 1000121001;
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR :: 1000121002;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR :: 1000121003;
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR :: 1000121004;
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK :: 1000122000;
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK :: 1000123000;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT :: 1000128000;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT :: 1000128001;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT :: 1000128002;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT :: 1000128003;
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT :: 1000128004;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID :: 1000129000;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID :: 1000129001;
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID :: 1000129002;
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID :: 1000129003;
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID :: 1000129004;
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID :: 1000129005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT :: 1000138000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT :: 1000138001;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT :: 1000138002;
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT :: 1000138003;
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT :: 1000143000;
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT :: 1000143001;
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT :: 1000143002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT :: 1000143003;
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT :: 1000143004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT :: 1000148000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT :: 1000148001;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT :: 1000148002;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV :: 1000149000;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR :: 1000150007;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR :: 1000150000;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR :: 1000150002;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR :: 1000150003;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR :: 1000150004;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR :: 1000150005;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR :: 1000150006;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR :: 1000150009;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR :: 1000150010;
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR :: 1000150011;
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR :: 1000150012;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR :: 1000150013;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR :: 1000150014;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR :: 1000150017;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR :: 1000150020;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR :: 1000347000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR :: 1000347001;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR :: 1000150015;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR :: 1000150016;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR :: 1000150018;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR :: 1000348013;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV :: 1000152000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV :: 1000154000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV :: 1000154001;
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT :: 1000158000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT :: 1000158002;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT :: 1000158003;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT :: 1000158004;
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT :: 1000158005;
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT :: 1000160000;
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT :: 1000160001;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV :: 1000164000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV :: 1000164001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV :: 1000164002;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV :: 1000164005;
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV :: 1000165000;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV :: 1000165001;
    VK_STRUCTURE_TYPE_GEOMETRY_NV :: 1000165003;
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV :: 1000165004;
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV :: 1000165005;
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV :: 1000165006;
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV :: 1000165007;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV :: 1000165008;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV :: 1000165009;
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV :: 1000165011;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV :: 1000165012;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV :: 1000166000;
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV :: 1000166001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT :: 1000170000;
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT :: 1000170001;
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT :: 1000174000;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT :: 1000178000;
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT :: 1000178001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT :: 1000178002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR :: 1000181000;
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD :: 1000183000;
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT :: 1000184000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD :: 1000185000;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD :: 1000189000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT :: 1000190000;
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT :: 1000190001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT :: 1000190002;
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP :: 1000191000;
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT :: 1000192000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV :: 1000201000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV :: 1000202000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV :: 1000202001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV :: 1000203000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV :: 1000204000;
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV :: 1000205000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV :: 1000205002;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV :: 1000206000;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV :: 1000206001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL :: 1000209000;
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL :: 1000210000;
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL :: 1000210001;
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL :: 1000210002;
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL :: 1000210003;
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL :: 1000210004;
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL :: 1000210005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT :: 1000212000;
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD :: 1000213000;
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD :: 1000213001;
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA :: 1000214000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR :: 1000215000;
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT :: 1000217000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT :: 1000218000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT :: 1000218001;
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT :: 1000218002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT :: 1000225000;
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT :: 1000225001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT :: 1000225002;
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR :: 1000226000;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR :: 1000226001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR :: 1000226002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR :: 1000226003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR :: 1000226004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD :: 1000227000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD :: 1000229000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT :: 1000234000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT :: 1000237000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT :: 1000238000;
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT :: 1000238001;
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR :: 1000239000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV :: 1000240000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT :: 1000244000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT :: 1000244002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT :: 1000245000;
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT :: 1000247000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR :: 1000248000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV :: 1000249000;
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV :: 1000249001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV :: 1000249002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV :: 1000250000;
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV :: 1000250001;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV :: 1000250002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT :: 1000251000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT :: 1000252000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT :: 1000254000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT :: 1000254001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT :: 1000254002;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT :: 1000255000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT :: 1000255002;
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT :: 1000255001;
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT :: 1000256000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT :: 1000259000;
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT :: 1000259001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT :: 1000259002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT :: 1000260000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT :: 1000265000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT :: 1000267000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR :: 1000269000;
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR :: 1000269001;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR :: 1000269002;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR :: 1000269003;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR :: 1000269004;
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR :: 1000269005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT :: 1000273000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT :: 1000276000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV :: 1000277000;
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV :: 1000277001;
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV :: 1000277002;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV :: 1000277003;
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV :: 1000277004;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV :: 1000277005;
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV :: 1000277006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV :: 1000277007;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV :: 1000278000;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV :: 1000278001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT :: 1000281000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT :: 1000281001;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM :: 1000282000;
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM :: 1000282001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT :: 1000284000;
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT :: 1000284001;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT :: 1000284002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT :: 1000286000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT :: 1000286001;
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT :: 1000287000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT :: 1000287001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT :: 1000287002;
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR :: 1000290000;
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR :: 1000294000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR :: 1000294001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT :: 1000295000;
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT :: 1000295001;
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT :: 1000295002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT :: 1000297000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV :: 1000300000;
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV :: 1000300001;
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR :: 1000314000;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR :: 1000314001;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR :: 1000314002;
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR :: 1000314003;
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR :: 1000314004;
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR :: 1000314005;
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR :: 1000314006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR :: 1000314007;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV :: 1000314008;
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV :: 1000314009;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR :: 1000323000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR :: 1000325000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV :: 1000326000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV :: 1000326001;
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV :: 1000326002;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV :: 1000327000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV :: 1000327001;
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV :: 1000327002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT :: 1000330000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT :: 1000332000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT :: 1000332001;
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM :: 1000333000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT :: 1000335000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR :: 1000336000;
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR :: 1000337000;
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR :: 1000337001;
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR :: 1000337002;
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR :: 1000337003;
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR :: 1000337004;
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR :: 1000337005;
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR :: 1000337006;
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR :: 1000337007;
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR :: 1000337008;
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR :: 1000337009;
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR :: 1000337010;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT :: 1000340000;
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT :: 1000346000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE :: 1000351000;
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE :: 1000351002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT :: 1000352000;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT :: 1000352001;
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT :: 1000352002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT :: 1000353000;
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA :: 1000364000;
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA :: 1000364001;
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA :: 1000364002;
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA :: 1000365000;
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA :: 1000365001;
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI :: 1000369000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI :: 1000369001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI :: 1000369002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI :: 1000370000;
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV :: 1000371000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV :: 1000371001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT :: 1000377000;
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX :: 1000378000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT :: 1000381000;
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT :: 1000381001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT :: 1000388000;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT :: 1000388001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT :: 1000392000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT :: 1000392001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES :: 1000120000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES :: 1000063000;
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT :: 1000011000;
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR :: 1000053000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR :: 1000053001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR :: 1000053002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR :: 1000059000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR :: 1000059001;
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR :: 1000059002;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR :: 1000059003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR :: 1000059004;
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR :: 1000059005;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR :: 1000059006;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR :: 1000059007;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR :: 1000059008;
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR :: 1000060000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR :: 1000060003;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR :: 1000060004;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR :: 1000060005;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR :: 1000060006;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR :: 1000060013;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR :: 1000060014;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR :: 1000070000;
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR :: 1000070001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR :: 1000071000;
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR :: 1000071001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR :: 1000071002;
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR :: 1000071003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR :: 1000071004;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR :: 1000072000;
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR :: 1000072001;
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR :: 1000072002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR :: 1000076000;
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR :: 1000076001;
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR :: 1000077000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR :: 1000082000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR :: 1000082000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR :: 1000083000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR :: 1000085000;
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT :: 1000090000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR :: 1000108000;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR :: 1000108001;
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR :: 1000108002;
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR :: 1000108003;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR :: 1000109000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR :: 1000109001;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR :: 1000109002;
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR :: 1000109003;
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR :: 1000109004;
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR :: 1000109005;
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR :: 1000109006;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR :: 1000112000;
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR :: 1000112001;
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR :: 1000113000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR :: 1000117000;
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR :: 1000117001;
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR :: 1000117002;
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR :: 1000117003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR :: 1000120000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR :: 1000120000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR :: 1000127000;
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR :: 1000127001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT :: 1000130000;
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT :: 1000130001;
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR :: 1000146000;
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR :: 1000146001;
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR :: 1000146002;
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR :: 1000146003;
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR :: 1000146004;
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR :: 1000147000;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR :: 1000156000;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR :: 1000156001;
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR :: 1000156002;
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR :: 1000156003;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR :: 1000156004;
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR :: 1000156005;
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR :: 1000157000;
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR :: 1000157001;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT :: 1000161000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT :: 1000161001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT :: 1000161002;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT :: 1000161003;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT :: 1000161004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR :: 1000168000;
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR :: 1000168001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR :: 1000175000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR :: 1000177000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR :: 1000180000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR :: 1000196000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR :: 1000197000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR :: 1000199000;
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR :: 1000199001;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR :: 1000207000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR :: 1000207001;
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR :: 1000207002;
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR :: 1000207003;
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR :: 1000207004;
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR :: 1000207005;
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL :: 1000210000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR :: 1000211000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT :: 1000221000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR :: 1000241000;
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR :: 1000241001;
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR :: 1000241002;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT :: 1000244000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT :: 1000244001;
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT :: 1000246000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR :: 1000253000;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR :: 1000257000;
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR :: 1000244001;
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR :: 1000257002;
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR :: 1000257003;
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR :: 1000257004;
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT :: 1000261000;
    VK_STRUCTURE_TYPE_MAX_ENUM :: 2147483647;
}

using VkImageLayout :: enum u32 {
    VK_IMAGE_LAYOUT_UNDEFINED :: 0;
    VK_IMAGE_LAYOUT_GENERAL :: 1;
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL :: 2;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL :: 3;
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL :: 4;
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL :: 5;
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL :: 6;
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL :: 7;
    VK_IMAGE_LAYOUT_PREINITIALIZED :: 8;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL :: 1000117000;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL :: 1000117001;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL :: 1000241000;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL :: 1000241001;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL :: 1000241002;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL :: 1000241003;
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR :: 1000001002;
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR :: 1000111000;
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT :: 1000218000;
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR :: 1000164003;
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR :: 1000314000;
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR :: 1000314001;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR :: 1000117000;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR :: 1000117001;
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV :: 1000164003;
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR :: 1000241000;
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR :: 1000241001;
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR :: 1000241002;
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR :: 1000241003;
    VK_IMAGE_LAYOUT_MAX_ENUM :: 2147483647;
}

using VkObjectType :: enum u32 {
    VK_OBJECT_TYPE_UNKNOWN :: 0;
    VK_OBJECT_TYPE_INSTANCE :: 1;
    VK_OBJECT_TYPE_PHYSICAL_DEVICE :: 2;
    VK_OBJECT_TYPE_DEVICE :: 3;
    VK_OBJECT_TYPE_QUEUE :: 4;
    VK_OBJECT_TYPE_SEMAPHORE :: 5;
    VK_OBJECT_TYPE_COMMAND_BUFFER :: 6;
    VK_OBJECT_TYPE_FENCE :: 7;
    VK_OBJECT_TYPE_DEVICE_MEMORY :: 8;
    VK_OBJECT_TYPE_BUFFER :: 9;
    VK_OBJECT_TYPE_IMAGE :: 10;
    VK_OBJECT_TYPE_EVENT :: 11;
    VK_OBJECT_TYPE_QUERY_POOL :: 12;
    VK_OBJECT_TYPE_BUFFER_VIEW :: 13;
    VK_OBJECT_TYPE_IMAGE_VIEW :: 14;
    VK_OBJECT_TYPE_SHADER_MODULE :: 15;
    VK_OBJECT_TYPE_PIPELINE_CACHE :: 16;
    VK_OBJECT_TYPE_PIPELINE_LAYOUT :: 17;
    VK_OBJECT_TYPE_RENDER_PASS :: 18;
    VK_OBJECT_TYPE_PIPELINE :: 19;
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT :: 20;
    VK_OBJECT_TYPE_SAMPLER :: 21;
    VK_OBJECT_TYPE_DESCRIPTOR_POOL :: 22;
    VK_OBJECT_TYPE_DESCRIPTOR_SET :: 23;
    VK_OBJECT_TYPE_FRAMEBUFFER :: 24;
    VK_OBJECT_TYPE_COMMAND_POOL :: 25;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION :: 1000156000;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE :: 1000085000;
    VK_OBJECT_TYPE_SURFACE_KHR :: 1000000000;
    VK_OBJECT_TYPE_SWAPCHAIN_KHR :: 1000001000;
    VK_OBJECT_TYPE_DISPLAY_KHR :: 1000002000;
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR :: 1000002001;
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT :: 1000011000;
    VK_OBJECT_TYPE_CU_MODULE_NVX :: 1000029000;
    VK_OBJECT_TYPE_CU_FUNCTION_NVX :: 1000029001;
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT :: 1000128000;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR :: 1000150000;
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT :: 1000160000;
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV :: 1000165000;
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL :: 1000210000;
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR :: 1000268000;
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV :: 1000277000;
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT :: 1000295000;
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR :: 1000085000;
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR :: 1000156000;
    VK_OBJECT_TYPE_MAX_ENUM :: 2147483647;
}

using VkPipelineCacheHeaderVersion :: enum u32 {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE :: 1;
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM :: 2147483647;
}

using VkVendorId :: enum u32 {
    VK_VENDOR_ID_VIV :: 65537;
    VK_VENDOR_ID_VSI :: 65538;
    VK_VENDOR_ID_KAZAN :: 65539;
    VK_VENDOR_ID_CODEPLAY :: 65540;
    VK_VENDOR_ID_MESA :: 65541;
    VK_VENDOR_ID_POCL :: 65542;
    VK_VENDOR_ID_MAX_ENUM :: 2147483647;
}

using VkSystemAllocationScope :: enum u32 {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND :: 0;
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT :: 1;
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE :: 2;
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE :: 3;
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE :: 4;
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM :: 2147483647;
}

using VkInternalAllocationType :: enum u32 {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE :: 0;
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM :: 2147483647;
}

using VkFormat :: enum u32 {
    VK_FORMAT_UNDEFINED :: 0;
    VK_FORMAT_R4G4_UNORM_PACK8 :: 1;
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 :: 2;
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 :: 3;
    VK_FORMAT_R5G6B5_UNORM_PACK16 :: 4;
    VK_FORMAT_B5G6R5_UNORM_PACK16 :: 5;
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 :: 6;
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 :: 7;
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 :: 8;
    VK_FORMAT_R8_UNORM :: 9;
    VK_FORMAT_R8_SNORM :: 10;
    VK_FORMAT_R8_USCALED :: 11;
    VK_FORMAT_R8_SSCALED :: 12;
    VK_FORMAT_R8_UINT :: 13;
    VK_FORMAT_R8_SINT :: 14;
    VK_FORMAT_R8_SRGB :: 15;
    VK_FORMAT_R8G8_UNORM :: 16;
    VK_FORMAT_R8G8_SNORM :: 17;
    VK_FORMAT_R8G8_USCALED :: 18;
    VK_FORMAT_R8G8_SSCALED :: 19;
    VK_FORMAT_R8G8_UINT :: 20;
    VK_FORMAT_R8G8_SINT :: 21;
    VK_FORMAT_R8G8_SRGB :: 22;
    VK_FORMAT_R8G8B8_UNORM :: 23;
    VK_FORMAT_R8G8B8_SNORM :: 24;
    VK_FORMAT_R8G8B8_USCALED :: 25;
    VK_FORMAT_R8G8B8_SSCALED :: 26;
    VK_FORMAT_R8G8B8_UINT :: 27;
    VK_FORMAT_R8G8B8_SINT :: 28;
    VK_FORMAT_R8G8B8_SRGB :: 29;
    VK_FORMAT_B8G8R8_UNORM :: 30;
    VK_FORMAT_B8G8R8_SNORM :: 31;
    VK_FORMAT_B8G8R8_USCALED :: 32;
    VK_FORMAT_B8G8R8_SSCALED :: 33;
    VK_FORMAT_B8G8R8_UINT :: 34;
    VK_FORMAT_B8G8R8_SINT :: 35;
    VK_FORMAT_B8G8R8_SRGB :: 36;
    VK_FORMAT_R8G8B8A8_UNORM :: 37;
    VK_FORMAT_R8G8B8A8_SNORM :: 38;
    VK_FORMAT_R8G8B8A8_USCALED :: 39;
    VK_FORMAT_R8G8B8A8_SSCALED :: 40;
    VK_FORMAT_R8G8B8A8_UINT :: 41;
    VK_FORMAT_R8G8B8A8_SINT :: 42;
    VK_FORMAT_R8G8B8A8_SRGB :: 43;
    VK_FORMAT_B8G8R8A8_UNORM :: 44;
    VK_FORMAT_B8G8R8A8_SNORM :: 45;
    VK_FORMAT_B8G8R8A8_USCALED :: 46;
    VK_FORMAT_B8G8R8A8_SSCALED :: 47;
    VK_FORMAT_B8G8R8A8_UINT :: 48;
    VK_FORMAT_B8G8R8A8_SINT :: 49;
    VK_FORMAT_B8G8R8A8_SRGB :: 50;
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 :: 51;
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 :: 52;
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 :: 53;
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 :: 54;
    VK_FORMAT_A8B8G8R8_UINT_PACK32 :: 55;
    VK_FORMAT_A8B8G8R8_SINT_PACK32 :: 56;
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 :: 57;
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 :: 58;
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 :: 59;
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 :: 60;
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 :: 61;
    VK_FORMAT_A2R10G10B10_UINT_PACK32 :: 62;
    VK_FORMAT_A2R10G10B10_SINT_PACK32 :: 63;
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 :: 64;
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 :: 65;
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 :: 66;
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 :: 67;
    VK_FORMAT_A2B10G10R10_UINT_PACK32 :: 68;
    VK_FORMAT_A2B10G10R10_SINT_PACK32 :: 69;
    VK_FORMAT_R16_UNORM :: 70;
    VK_FORMAT_R16_SNORM :: 71;
    VK_FORMAT_R16_USCALED :: 72;
    VK_FORMAT_R16_SSCALED :: 73;
    VK_FORMAT_R16_UINT :: 74;
    VK_FORMAT_R16_SINT :: 75;
    VK_FORMAT_R16_SFLOAT :: 76;
    VK_FORMAT_R16G16_UNORM :: 77;
    VK_FORMAT_R16G16_SNORM :: 78;
    VK_FORMAT_R16G16_USCALED :: 79;
    VK_FORMAT_R16G16_SSCALED :: 80;
    VK_FORMAT_R16G16_UINT :: 81;
    VK_FORMAT_R16G16_SINT :: 82;
    VK_FORMAT_R16G16_SFLOAT :: 83;
    VK_FORMAT_R16G16B16_UNORM :: 84;
    VK_FORMAT_R16G16B16_SNORM :: 85;
    VK_FORMAT_R16G16B16_USCALED :: 86;
    VK_FORMAT_R16G16B16_SSCALED :: 87;
    VK_FORMAT_R16G16B16_UINT :: 88;
    VK_FORMAT_R16G16B16_SINT :: 89;
    VK_FORMAT_R16G16B16_SFLOAT :: 90;
    VK_FORMAT_R16G16B16A16_UNORM :: 91;
    VK_FORMAT_R16G16B16A16_SNORM :: 92;
    VK_FORMAT_R16G16B16A16_USCALED :: 93;
    VK_FORMAT_R16G16B16A16_SSCALED :: 94;
    VK_FORMAT_R16G16B16A16_UINT :: 95;
    VK_FORMAT_R16G16B16A16_SINT :: 96;
    VK_FORMAT_R16G16B16A16_SFLOAT :: 97;
    VK_FORMAT_R32_UINT :: 98;
    VK_FORMAT_R32_SINT :: 99;
    VK_FORMAT_R32_SFLOAT :: 100;
    VK_FORMAT_R32G32_UINT :: 101;
    VK_FORMAT_R32G32_SINT :: 102;
    VK_FORMAT_R32G32_SFLOAT :: 103;
    VK_FORMAT_R32G32B32_UINT :: 104;
    VK_FORMAT_R32G32B32_SINT :: 105;
    VK_FORMAT_R32G32B32_SFLOAT :: 106;
    VK_FORMAT_R32G32B32A32_UINT :: 107;
    VK_FORMAT_R32G32B32A32_SINT :: 108;
    VK_FORMAT_R32G32B32A32_SFLOAT :: 109;
    VK_FORMAT_R64_UINT :: 110;
    VK_FORMAT_R64_SINT :: 111;
    VK_FORMAT_R64_SFLOAT :: 112;
    VK_FORMAT_R64G64_UINT :: 113;
    VK_FORMAT_R64G64_SINT :: 114;
    VK_FORMAT_R64G64_SFLOAT :: 115;
    VK_FORMAT_R64G64B64_UINT :: 116;
    VK_FORMAT_R64G64B64_SINT :: 117;
    VK_FORMAT_R64G64B64_SFLOAT :: 118;
    VK_FORMAT_R64G64B64A64_UINT :: 119;
    VK_FORMAT_R64G64B64A64_SINT :: 120;
    VK_FORMAT_R64G64B64A64_SFLOAT :: 121;
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 :: 122;
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 :: 123;
    VK_FORMAT_D16_UNORM :: 124;
    VK_FORMAT_X8_D24_UNORM_PACK32 :: 125;
    VK_FORMAT_D32_SFLOAT :: 126;
    VK_FORMAT_S8_UINT :: 127;
    VK_FORMAT_D16_UNORM_S8_UINT :: 128;
    VK_FORMAT_D24_UNORM_S8_UINT :: 129;
    VK_FORMAT_D32_SFLOAT_S8_UINT :: 130;
    VK_FORMAT_BC1_RGB_UNORM_BLOCK :: 131;
    VK_FORMAT_BC1_RGB_SRGB_BLOCK :: 132;
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK :: 133;
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK :: 134;
    VK_FORMAT_BC2_UNORM_BLOCK :: 135;
    VK_FORMAT_BC2_SRGB_BLOCK :: 136;
    VK_FORMAT_BC3_UNORM_BLOCK :: 137;
    VK_FORMAT_BC3_SRGB_BLOCK :: 138;
    VK_FORMAT_BC4_UNORM_BLOCK :: 139;
    VK_FORMAT_BC4_SNORM_BLOCK :: 140;
    VK_FORMAT_BC5_UNORM_BLOCK :: 141;
    VK_FORMAT_BC5_SNORM_BLOCK :: 142;
    VK_FORMAT_BC6H_UFLOAT_BLOCK :: 143;
    VK_FORMAT_BC6H_SFLOAT_BLOCK :: 144;
    VK_FORMAT_BC7_UNORM_BLOCK :: 145;
    VK_FORMAT_BC7_SRGB_BLOCK :: 146;
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK :: 147;
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK :: 148;
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK :: 149;
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK :: 150;
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK :: 151;
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK :: 152;
    VK_FORMAT_EAC_R11_UNORM_BLOCK :: 153;
    VK_FORMAT_EAC_R11_SNORM_BLOCK :: 154;
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK :: 155;
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK :: 156;
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK :: 157;
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK :: 158;
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK :: 159;
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK :: 160;
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK :: 161;
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK :: 162;
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK :: 163;
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK :: 164;
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK :: 165;
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK :: 166;
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK :: 167;
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK :: 168;
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK :: 169;
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK :: 170;
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK :: 171;
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK :: 172;
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK :: 173;
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK :: 174;
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK :: 175;
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK :: 176;
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK :: 177;
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK :: 178;
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK :: 179;
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK :: 180;
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK :: 181;
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK :: 182;
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK :: 183;
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK :: 184;
    VK_FORMAT_G8B8G8R8_422_UNORM :: 1000156000;
    VK_FORMAT_B8G8R8G8_422_UNORM :: 1000156001;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM :: 1000156002;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM :: 1000156003;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM :: 1000156004;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM :: 1000156005;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM :: 1000156006;
    VK_FORMAT_R10X6_UNORM_PACK16 :: 1000156007;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 :: 1000156008;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 :: 1000156009;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 :: 1000156010;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 :: 1000156011;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 :: 1000156012;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 :: 1000156013;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 :: 1000156014;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 :: 1000156015;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 :: 1000156016;
    VK_FORMAT_R12X4_UNORM_PACK16 :: 1000156017;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 :: 1000156018;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 :: 1000156019;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 :: 1000156020;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 :: 1000156021;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 :: 1000156022;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 :: 1000156023;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 :: 1000156024;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 :: 1000156025;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 :: 1000156026;
    VK_FORMAT_G16B16G16R16_422_UNORM :: 1000156027;
    VK_FORMAT_B16G16R16G16_422_UNORM :: 1000156028;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM :: 1000156029;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM :: 1000156030;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM :: 1000156031;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM :: 1000156032;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM :: 1000156033;
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG :: 1000054000;
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG :: 1000054001;
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG :: 1000054002;
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG :: 1000054003;
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG :: 1000054004;
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG :: 1000054005;
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG :: 1000054006;
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG :: 1000054007;
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT :: 1000066000;
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT :: 1000066001;
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT :: 1000066002;
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT :: 1000066003;
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT :: 1000066004;
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT :: 1000066005;
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT :: 1000066006;
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT :: 1000066007;
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT :: 1000066008;
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT :: 1000066009;
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT :: 1000066010;
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT :: 1000066011;
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT :: 1000066012;
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT :: 1000066013;
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT :: 1000330000;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT :: 1000330001;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT :: 1000330002;
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT :: 1000330003;
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT :: 1000340000;
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT :: 1000340001;
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR :: 1000156000;
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR :: 1000156001;
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR :: 1000156002;
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR :: 1000156003;
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR :: 1000156004;
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR :: 1000156005;
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR :: 1000156006;
    VK_FORMAT_R10X6_UNORM_PACK16_KHR :: 1000156007;
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR :: 1000156008;
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR :: 1000156009;
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR :: 1000156010;
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR :: 1000156011;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR :: 1000156012;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR :: 1000156013;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR :: 1000156014;
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR :: 1000156015;
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR :: 1000156016;
    VK_FORMAT_R12X4_UNORM_PACK16_KHR :: 1000156017;
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR :: 1000156018;
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR :: 1000156019;
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR :: 1000156020;
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR :: 1000156021;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR :: 1000156022;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR :: 1000156023;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR :: 1000156024;
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR :: 1000156025;
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR :: 1000156026;
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR :: 1000156027;
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR :: 1000156028;
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR :: 1000156029;
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR :: 1000156030;
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR :: 1000156031;
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR :: 1000156032;
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR :: 1000156033;
    VK_FORMAT_MAX_ENUM :: 2147483647;
}

using VkImageTiling :: enum u32 {
    VK_IMAGE_TILING_OPTIMAL :: 0;
    VK_IMAGE_TILING_LINEAR :: 1;
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT :: 1000158000;
    VK_IMAGE_TILING_MAX_ENUM :: 2147483647;
}

using VkImageType :: enum u32 {
    VK_IMAGE_TYPE_1D :: 0;
    VK_IMAGE_TYPE_2D :: 1;
    VK_IMAGE_TYPE_3D :: 2;
    VK_IMAGE_TYPE_MAX_ENUM :: 2147483647;
}

using VkPhysicalDeviceType :: enum u32 {
    VK_PHYSICAL_DEVICE_TYPE_OTHER :: 0;
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU :: 1;
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU :: 2;
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU :: 3;
    VK_PHYSICAL_DEVICE_TYPE_CPU :: 4;
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM :: 2147483647;
}

using VkQueryType :: enum u32 {
    VK_QUERY_TYPE_OCCLUSION :: 0;
    VK_QUERY_TYPE_PIPELINE_STATISTICS :: 1;
    VK_QUERY_TYPE_TIMESTAMP :: 2;
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT :: 1000028004;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR :: 1000116000;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR :: 1000150000;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR :: 1000150001;
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV :: 1000165000;
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL :: 1000210000;
    VK_QUERY_TYPE_MAX_ENUM :: 2147483647;
}

using VkSharingMode :: enum u32 {
    VK_SHARING_MODE_EXCLUSIVE :: 0;
    VK_SHARING_MODE_CONCURRENT :: 1;
    VK_SHARING_MODE_MAX_ENUM :: 2147483647;
}

using VkComponentSwizzle :: enum u32 {
    VK_COMPONENT_SWIZZLE_IDENTITY :: 0;
    VK_COMPONENT_SWIZZLE_ZERO :: 1;
    VK_COMPONENT_SWIZZLE_ONE :: 2;
    VK_COMPONENT_SWIZZLE_R :: 3;
    VK_COMPONENT_SWIZZLE_G :: 4;
    VK_COMPONENT_SWIZZLE_B :: 5;
    VK_COMPONENT_SWIZZLE_A :: 6;
    VK_COMPONENT_SWIZZLE_MAX_ENUM :: 2147483647;
}

using VkImageViewType :: enum u32 {
    VK_IMAGE_VIEW_TYPE_1D :: 0;
    VK_IMAGE_VIEW_TYPE_2D :: 1;
    VK_IMAGE_VIEW_TYPE_3D :: 2;
    VK_IMAGE_VIEW_TYPE_CUBE :: 3;
    VK_IMAGE_VIEW_TYPE_1D_ARRAY :: 4;
    VK_IMAGE_VIEW_TYPE_2D_ARRAY :: 5;
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY :: 6;
    VK_IMAGE_VIEW_TYPE_MAX_ENUM :: 2147483647;
}

using VkBlendFactor :: enum u32 {
    VK_BLEND_FACTOR_ZERO :: 0;
    VK_BLEND_FACTOR_ONE :: 1;
    VK_BLEND_FACTOR_SRC_COLOR :: 2;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR :: 3;
    VK_BLEND_FACTOR_DST_COLOR :: 4;
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR :: 5;
    VK_BLEND_FACTOR_SRC_ALPHA :: 6;
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA :: 7;
    VK_BLEND_FACTOR_DST_ALPHA :: 8;
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA :: 9;
    VK_BLEND_FACTOR_CONSTANT_COLOR :: 10;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR :: 11;
    VK_BLEND_FACTOR_CONSTANT_ALPHA :: 12;
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA :: 13;
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE :: 14;
    VK_BLEND_FACTOR_SRC1_COLOR :: 15;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR :: 16;
    VK_BLEND_FACTOR_SRC1_ALPHA :: 17;
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA :: 18;
    VK_BLEND_FACTOR_MAX_ENUM :: 2147483647;
}

using VkBlendOp :: enum u32 {
    VK_BLEND_OP_ADD :: 0;
    VK_BLEND_OP_SUBTRACT :: 1;
    VK_BLEND_OP_REVERSE_SUBTRACT :: 2;
    VK_BLEND_OP_MIN :: 3;
    VK_BLEND_OP_MAX :: 4;
    VK_BLEND_OP_ZERO_EXT :: 1000148000;
    VK_BLEND_OP_SRC_EXT :: 1000148001;
    VK_BLEND_OP_DST_EXT :: 1000148002;
    VK_BLEND_OP_SRC_OVER_EXT :: 1000148003;
    VK_BLEND_OP_DST_OVER_EXT :: 1000148004;
    VK_BLEND_OP_SRC_IN_EXT :: 1000148005;
    VK_BLEND_OP_DST_IN_EXT :: 1000148006;
    VK_BLEND_OP_SRC_OUT_EXT :: 1000148007;
    VK_BLEND_OP_DST_OUT_EXT :: 1000148008;
    VK_BLEND_OP_SRC_ATOP_EXT :: 1000148009;
    VK_BLEND_OP_DST_ATOP_EXT :: 1000148010;
    VK_BLEND_OP_XOR_EXT :: 1000148011;
    VK_BLEND_OP_MULTIPLY_EXT :: 1000148012;
    VK_BLEND_OP_SCREEN_EXT :: 1000148013;
    VK_BLEND_OP_OVERLAY_EXT :: 1000148014;
    VK_BLEND_OP_DARKEN_EXT :: 1000148015;
    VK_BLEND_OP_LIGHTEN_EXT :: 1000148016;
    VK_BLEND_OP_COLORDODGE_EXT :: 1000148017;
    VK_BLEND_OP_COLORBURN_EXT :: 1000148018;
    VK_BLEND_OP_HARDLIGHT_EXT :: 1000148019;
    VK_BLEND_OP_SOFTLIGHT_EXT :: 1000148020;
    VK_BLEND_OP_DIFFERENCE_EXT :: 1000148021;
    VK_BLEND_OP_EXCLUSION_EXT :: 1000148022;
    VK_BLEND_OP_INVERT_EXT :: 1000148023;
    VK_BLEND_OP_INVERT_RGB_EXT :: 1000148024;
    VK_BLEND_OP_LINEARDODGE_EXT :: 1000148025;
    VK_BLEND_OP_LINEARBURN_EXT :: 1000148026;
    VK_BLEND_OP_VIVIDLIGHT_EXT :: 1000148027;
    VK_BLEND_OP_LINEARLIGHT_EXT :: 1000148028;
    VK_BLEND_OP_PINLIGHT_EXT :: 1000148029;
    VK_BLEND_OP_HARDMIX_EXT :: 1000148030;
    VK_BLEND_OP_HSL_HUE_EXT :: 1000148031;
    VK_BLEND_OP_HSL_SATURATION_EXT :: 1000148032;
    VK_BLEND_OP_HSL_COLOR_EXT :: 1000148033;
    VK_BLEND_OP_HSL_LUMINOSITY_EXT :: 1000148034;
    VK_BLEND_OP_PLUS_EXT :: 1000148035;
    VK_BLEND_OP_PLUS_CLAMPED_EXT :: 1000148036;
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT :: 1000148037;
    VK_BLEND_OP_PLUS_DARKER_EXT :: 1000148038;
    VK_BLEND_OP_MINUS_EXT :: 1000148039;
    VK_BLEND_OP_MINUS_CLAMPED_EXT :: 1000148040;
    VK_BLEND_OP_CONTRAST_EXT :: 1000148041;
    VK_BLEND_OP_INVERT_OVG_EXT :: 1000148042;
    VK_BLEND_OP_RED_EXT :: 1000148043;
    VK_BLEND_OP_GREEN_EXT :: 1000148044;
    VK_BLEND_OP_BLUE_EXT :: 1000148045;
    VK_BLEND_OP_MAX_ENUM :: 2147483647;
}

using VkCompareOp :: enum u32 {
    VK_COMPARE_OP_NEVER :: 0;
    VK_COMPARE_OP_LESS :: 1;
    VK_COMPARE_OP_EQUAL :: 2;
    VK_COMPARE_OP_LESS_OR_EQUAL :: 3;
    VK_COMPARE_OP_GREATER :: 4;
    VK_COMPARE_OP_NOT_EQUAL :: 5;
    VK_COMPARE_OP_GREATER_OR_EQUAL :: 6;
    VK_COMPARE_OP_ALWAYS :: 7;
    VK_COMPARE_OP_MAX_ENUM :: 2147483647;
}

using VkDynamicState :: enum u32 {
    VK_DYNAMIC_STATE_VIEWPORT :: 0;
    VK_DYNAMIC_STATE_SCISSOR :: 1;
    VK_DYNAMIC_STATE_LINE_WIDTH :: 2;
    VK_DYNAMIC_STATE_DEPTH_BIAS :: 3;
    VK_DYNAMIC_STATE_BLEND_CONSTANTS :: 4;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS :: 5;
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK :: 6;
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK :: 7;
    VK_DYNAMIC_STATE_STENCIL_REFERENCE :: 8;
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV :: 1000087000;
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT :: 1000099000;
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT :: 1000143000;
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR :: 1000347000;
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV :: 1000164004;
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV :: 1000164006;
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV :: 1000205001;
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR :: 1000226000;
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT :: 1000259000;
    VK_DYNAMIC_STATE_CULL_MODE_EXT :: 1000267000;
    VK_DYNAMIC_STATE_FRONT_FACE_EXT :: 1000267001;
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT :: 1000267002;
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT :: 1000267003;
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT :: 1000267004;
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT :: 1000267005;
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT :: 1000267006;
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT :: 1000267007;
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT :: 1000267008;
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT :: 1000267009;
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT :: 1000267010;
    VK_DYNAMIC_STATE_STENCIL_OP_EXT :: 1000267011;
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT :: 1000352000;
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT :: 1000377000;
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT :: 1000377001;
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT :: 1000377002;
    VK_DYNAMIC_STATE_LOGIC_OP_EXT :: 1000377003;
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT :: 1000377004;
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT :: 1000381000;
    VK_DYNAMIC_STATE_MAX_ENUM :: 2147483647;
}

using VkFrontFace :: enum u32 {
    VK_FRONT_FACE_COUNTER_CLOCKWISE :: 0;
    VK_FRONT_FACE_CLOCKWISE :: 1;
    VK_FRONT_FACE_MAX_ENUM :: 2147483647;
}

using VkVertexInputRate :: enum u32 {
    VK_VERTEX_INPUT_RATE_VERTEX :: 0;
    VK_VERTEX_INPUT_RATE_INSTANCE :: 1;
    VK_VERTEX_INPUT_RATE_MAX_ENUM :: 2147483647;
}

using VkPrimitiveTopology :: enum u32 {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST :: 0;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST  :: 1;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP :: 2;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST :: 3;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP :: 4;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN :: 5;
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY :: 6;
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY :: 7;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY :: 8;
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY :: 9;
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST :: 10;
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM :: 2147483647;
}

using VkPolygonMode :: enum u32 {
    VK_POLYGON_MODE_FILL :: 0;
    VK_POLYGON_MODE_LINE :: 1;
    VK_POLYGON_MODE_POINT :: 2;
    VK_POLYGON_MODE_FILL_RECTANGLE_NV :: 1000153000;
    VK_POLYGON_MODE_MAX_ENUM :: 2147483647;
}

using VkStencilOp :: enum u32 {
    VK_STENCIL_OP_KEEP :: 0;
    VK_STENCIL_OP_ZERO :: 1;
    VK_STENCIL_OP_REPLACE :: 2;
    VK_STENCIL_OP_INCREMENT_AND_CLAMP :: 3;
    VK_STENCIL_OP_DECREMENT_AND_CLAMP :: 4;
    VK_STENCIL_OP_INVERT :: 5;
    VK_STENCIL_OP_INCREMENT_AND_WRAP :: 6;
    VK_STENCIL_OP_DECREMENT_AND_WRAP :: 7;
    VK_STENCIL_OP_MAX_ENUM :: 2147483647;
}

using VkLogicOp :: enum u32 {
    VK_LOGIC_OP_CLEAR :: 0;
    VK_LOGIC_OP_AND :: 1;
    VK_LOGIC_OP_AND_REVERSE :: 2;
    VK_LOGIC_OP_COPY :: 3;
    VK_LOGIC_OP_AND_INVERTED :: 4;
    VK_LOGIC_OP_NO_OP :: 5;
    VK_LOGIC_OP_XOR :: 6;
    VK_LOGIC_OP_OR :: 7;
    VK_LOGIC_OP_NOR :: 8;
    VK_LOGIC_OP_EQUIVALENT :: 9;
    VK_LOGIC_OP_INVERT :: 10;
    VK_LOGIC_OP_OR_REVERSE :: 11;
    VK_LOGIC_OP_COPY_INVERTED :: 12;
    VK_LOGIC_OP_OR_INVERTED :: 13;
    VK_LOGIC_OP_NAND :: 14;
    VK_LOGIC_OP_SET :: 15;
    VK_LOGIC_OP_MAX_ENUM :: 2147483647;
}

using VkBorderColor :: enum u32 {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK :: 0;
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK :: 1;
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK :: 2;
    VK_BORDER_COLOR_INT_OPAQUE_BLACK :: 3;
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE :: 4;
    VK_BORDER_COLOR_INT_OPAQUE_WHITE :: 5;
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT :: 1000287003;
    VK_BORDER_COLOR_INT_CUSTOM_EXT :: 1000287004;
    VK_BORDER_COLOR_MAX_ENUM :: 2147483647;
}

using VkFilter :: enum u32 {
    VK_FILTER_NEAREST :: 0;
    VK_FILTER_LINEAR :: 1;
    VK_FILTER_CUBIC_IMG :: 1000015000;
    VK_FILTER_CUBIC_EXT :: 1000015000;
    VK_FILTER_MAX_ENUM :: 2147483647;
}

using VkSamplerAddressMode :: enum u32 {
    VK_SAMPLER_ADDRESS_MODE_REPEAT :: 0;
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT :: 1;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE :: 2;
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER :: 3;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE :: 4;
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR :: 4;
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM :: 2147483647;
}

using VkSamplerMipmapMode :: enum u32 {
    VK_SAMPLER_MIPMAP_MODE_NEAREST :: 0;
    VK_SAMPLER_MIPMAP_MODE_LINEAR :: 1;
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM :: 2147483647;
}

using VkDescriptorType :: enum u32 {
    VK_DESCRIPTOR_TYPE_SAMPLER :: 0;
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER :: 1;
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE :: 2;
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE :: 3;
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER :: 4;
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER :: 5;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER :: 6;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER :: 7;
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC :: 8;
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC :: 9;
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT :: 10;
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT :: 1000138000;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR :: 1000150000;
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV :: 1000165000;
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE :: 1000351000;
    VK_DESCRIPTOR_TYPE_MAX_ENUM :: 2147483647;
}

using VkAttachmentLoadOp :: enum u32 {
    VK_ATTACHMENT_LOAD_OP_LOAD :: 0;
    VK_ATTACHMENT_LOAD_OP_CLEAR :: 1;
    VK_ATTACHMENT_LOAD_OP_DONT_CARE :: 2;
    VK_ATTACHMENT_LOAD_OP_NONE_EXT :: 1000400000;
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM :: 2147483647;
}

using VkAttachmentStoreOp :: enum u32 {
    VK_ATTACHMENT_STORE_OP_STORE :: 0;
    VK_ATTACHMENT_STORE_OP_DONT_CARE :: 1;
    VK_ATTACHMENT_STORE_OP_NONE_EXT :: 1000301000;
    VK_ATTACHMENT_STORE_OP_NONE_QCOM :: 1000301000;
    VK_ATTACHMENT_STORE_OP_MAX_ENUM :: 2147483647;
}

using VkPipelineBindPoint :: enum u32 {
    VK_PIPELINE_BIND_POINT_GRAPHICS :: 0;
    VK_PIPELINE_BIND_POINT_COMPUTE :: 1;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR :: 1000165000;
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI :: 1000369003;
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV :: 1000165000;
    VK_PIPELINE_BIND_POINT_MAX_ENUM :: 2147483647;
}

using VkCommandBufferLevel :: enum u32 {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY :: 0;
    VK_COMMAND_BUFFER_LEVEL_SECONDARY :: 1;
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM :: 2147483647;
}

using VkIndexType :: enum u32 {
    VK_INDEX_TYPE_UINT16 :: 0;
    VK_INDEX_TYPE_UINT32 :: 1;
    VK_INDEX_TYPE_NONE_KHR :: 1000165000;
    VK_INDEX_TYPE_UINT8_EXT :: 1000265000;
    VK_INDEX_TYPE_NONE_NV :: 1000165000;
    VK_INDEX_TYPE_MAX_ENUM :: 2147483647;
}

using VkSubpassContents :: enum u32 {
    VK_SUBPASS_CONTENTS_INLINE :: 0;
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS :: 1;
    VK_SUBPASS_CONTENTS_MAX_ENUM :: 2147483647;
}

using VkAccessFlagBits :: enum_flags u32 {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT :: 1;
    VK_ACCESS_INDEX_READ_BIT :: 2;
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT :: 4;
    VK_ACCESS_UNIFORM_READ_BIT :: 8;
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT :: 16;
    VK_ACCESS_SHADER_READ_BIT :: 32;
    VK_ACCESS_SHADER_WRITE_BIT :: 64;
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT :: 128;
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT :: 256;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT :: 512;
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT :: 1024;
    VK_ACCESS_TRANSFER_READ_BIT :: 2048;
    VK_ACCESS_TRANSFER_WRITE_BIT :: 4096;
    VK_ACCESS_HOST_READ_BIT :: 8192;
    VK_ACCESS_HOST_WRITE_BIT :: 16384;
    VK_ACCESS_MEMORY_READ_BIT :: 32768;
    VK_ACCESS_MEMORY_WRITE_BIT :: 65536;
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT :: 33554432;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT :: 67108864;
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT :: 134217728;
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT :: 1048576;
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT :: 524288;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR :: 2097152;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR :: 4194304;
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT :: 16777216;
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR :: 8388608;
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV :: 131072;
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV :: 262144;
    VK_ACCESS_NONE_KHR :: 0;
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV :: 8388608;
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV :: 2097152;
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV :: 4194304;
    VK_ACCESS_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkAccessFlags :: VkAccessFlagBits;

using VkImageAspectFlagBits :: enum_flags u32 {
    VK_IMAGE_ASPECT_COLOR_BIT :: 1;
    VK_IMAGE_ASPECT_DEPTH_BIT :: 2;
    VK_IMAGE_ASPECT_STENCIL_BIT :: 4;
    VK_IMAGE_ASPECT_METADATA_BIT :: 8;
    VK_IMAGE_ASPECT_PLANE_0_BIT :: 16;
    VK_IMAGE_ASPECT_PLANE_1_BIT :: 32;
    VK_IMAGE_ASPECT_PLANE_2_BIT :: 64;
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT :: 128;
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT :: 256;
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT :: 512;
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT :: 1024;
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR :: 16;
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR :: 32;
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR :: 64;
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkImageAspectFlags :: VkImageAspectFlagBits;

using VkFormatFeatureFlagBits :: enum_flags u32 {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT :: 1;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT :: 2;
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT :: 4;
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT :: 8;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT :: 16;
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT :: 32;
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT :: 64;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT :: 128;
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT :: 256;
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT :: 512;
    VK_FORMAT_FEATURE_BLIT_SRC_BIT :: 1024;
    VK_FORMAT_FEATURE_BLIT_DST_BIT :: 2048;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT :: 4096;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT :: 16384;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT :: 32768;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT :: 131072;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT :: 262144;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT :: 524288;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT :: 1048576;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT :: 2097152;
    VK_FORMAT_FEATURE_DISJOINT_BIT :: 4194304;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT :: 8388608;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT :: 65536;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG :: 8192;
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR :: 536870912;
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT :: 16777216;
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: 1073741824;
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR :: 16384;
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR :: 32768;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT :: 65536;
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR :: 131072;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR :: 262144;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR :: 524288;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR :: 1048576;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR :: 2097152;
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR :: 4194304;
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR :: 8388608;
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT :: 8192;
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkFormatFeatureFlags :: VkFormatFeatureFlagBits;

using VkImageCreateFlagBits :: enum_flags u32 {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT :: 1;
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT :: 2;
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT :: 4;
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT :: 8;
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT :: 16;
    VK_IMAGE_CREATE_ALIAS_BIT :: 1024;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT :: 64;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT :: 32;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT :: 128;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT :: 256;
    VK_IMAGE_CREATE_PROTECTED_BIT :: 2048;
    VK_IMAGE_CREATE_DISJOINT_BIT :: 512;
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV :: 8192;
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT :: 4096;
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT :: 16384;
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR :: 64;
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR :: 32;
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR :: 128;
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR :: 256;
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR :: 512;
    VK_IMAGE_CREATE_ALIAS_BIT_KHR :: 1024;
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkImageCreateFlags :: VkImageCreateFlagBits;

using VkSampleCountFlagBits :: enum_flags u32 {
    VK_SAMPLE_COUNT_1_BIT :: 1;
    VK_SAMPLE_COUNT_2_BIT :: 2;
    VK_SAMPLE_COUNT_4_BIT :: 4;
    VK_SAMPLE_COUNT_8_BIT :: 8;
    VK_SAMPLE_COUNT_16_BIT :: 16;
    VK_SAMPLE_COUNT_32_BIT :: 32;
    VK_SAMPLE_COUNT_64_BIT :: 64;
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSampleCountFlags :: VkSampleCountFlagBits;

using VkImageUsageFlagBits :: enum_flags u32 {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT :: 1;
    VK_IMAGE_USAGE_TRANSFER_DST_BIT :: 2;
    VK_IMAGE_USAGE_SAMPLED_BIT :: 4;
    VK_IMAGE_USAGE_STORAGE_BIT :: 8;
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT :: 16;
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT :: 32;
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT :: 64;
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT :: 128;
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT :: 512;
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: 256;
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI :: 262144;
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV :: 256;
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkImageUsageFlags :: VkImageUsageFlagBits;

VkInstanceCreateFlags :: VkFlags;

using VkMemoryHeapFlagBits :: enum_flags u32 {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT :: 1;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT :: 2;
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR :: 2;
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkMemoryHeapFlags :: VkMemoryHeapFlagBits;

using VkMemoryPropertyFlagBits :: enum_flags u32 {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT :: 1;
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT :: 2;
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT :: 4;
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT :: 8;
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT :: 16;
    VK_MEMORY_PROPERTY_PROTECTED_BIT :: 32;
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD :: 64;
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD :: 128;
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV :: 256;
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkMemoryPropertyFlags :: VkMemoryPropertyFlagBits;

using VkQueueFlagBits :: enum_flags u32 {
    VK_QUEUE_GRAPHICS_BIT :: 1;
    VK_QUEUE_COMPUTE_BIT :: 2;
    VK_QUEUE_TRANSFER_BIT :: 4;
    VK_QUEUE_SPARSE_BINDING_BIT :: 8;
    VK_QUEUE_PROTECTED_BIT :: 16;
    VK_QUEUE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkQueueFlags :: VkQueueFlagBits;

VkDeviceCreateFlags :: VkFlags;

using VkDeviceQueueCreateFlagBits :: enum_flags u32 {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT :: 1;
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkDeviceQueueCreateFlags :: VkDeviceQueueCreateFlagBits;

using VkPipelineStageFlagBits :: enum_flags u32 {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT :: 1;
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT :: 2;
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT :: 4;
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT :: 8;
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT :: 16;
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT :: 32;
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT :: 64;
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT :: 128;
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT :: 256;
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT :: 512;
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT :: 1024;
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT :: 2048;
    VK_PIPELINE_STAGE_TRANSFER_BIT :: 4096;
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT :: 8192;
    VK_PIPELINE_STAGE_HOST_BIT :: 16384;
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT :: 32768;
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT :: 65536;
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT :: 16777216;
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT :: 262144;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR :: 33554432;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR :: 2097152;
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV :: 524288;
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV :: 1048576;
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT :: 8388608;
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR :: 4194304;
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV :: 131072;
    VK_PIPELINE_STAGE_NONE_KHR :: 0;
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV :: 4194304;
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV :: 2097152;
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV :: 33554432;
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkPipelineStageFlags :: VkPipelineStageFlagBits;

VkMemoryMapFlags :: VkFlags;

using VkSparseMemoryBindFlagBits :: enum_flags u32 {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT :: 1;
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSparseMemoryBindFlags :: VkSparseMemoryBindFlagBits;

using VkSparseImageFormatFlagBits :: enum_flags u32 {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT :: 1;
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT :: 2;
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT :: 4;
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSparseImageFormatFlags :: VkSparseImageFormatFlagBits;

using VkFenceCreateFlagBits :: enum_flags u32 {
    VK_FENCE_CREATE_SIGNALED_BIT :: 1;
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkFenceCreateFlags :: VkFenceCreateFlagBits;

VkSemaphoreCreateFlags :: VkFlags;

using VkEventCreateFlagBits :: enum_flags u32 {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR :: 1;
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkEventCreateFlags :: VkEventCreateFlagBits;

using VkQueryPipelineStatisticFlagBits :: enum_flags u32 {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT :: 1;
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT :: 2;
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT :: 4;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT :: 8;
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT :: 16;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT :: 32;
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT :: 64;
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT :: 128;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT :: 256;
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT :: 512;
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT :: 1024;
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkQueryPipelineStatisticFlags :: VkQueryPipelineStatisticFlagBits;

VkQueryPoolCreateFlags :: VkFlags;

using VkQueryResultFlagBits :: enum_flags u32 {
    VK_QUERY_RESULT_64_BIT :: 1;
    VK_QUERY_RESULT_WAIT_BIT :: 2;
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT :: 4;
    VK_QUERY_RESULT_PARTIAL_BIT :: 8;
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkQueryResultFlags :: VkQueryResultFlagBits;

using VkBufferCreateFlagBits :: enum_flags u32 {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT :: 1;
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT :: 2;
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT :: 4;
    VK_BUFFER_CREATE_PROTECTED_BIT :: 8;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT :: 16;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT :: 16;
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR :: 16;
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkBufferCreateFlags :: VkBufferCreateFlagBits;

using VkBufferUsageFlagBits :: enum_flags u32 {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT :: 1;
    VK_BUFFER_USAGE_TRANSFER_DST_BIT :: 2;
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT :: 4;
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT :: 8;
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT :: 16;
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT :: 32;
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT :: 64;
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT :: 128;
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT :: 256;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT :: 131072;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT :: 2048;
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT :: 4096;
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT :: 512;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR :: 524288;
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR :: 1048576;
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR :: 1024;
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV :: 1024;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT :: 131072;
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR :: 131072;
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkBufferUsageFlags :: VkBufferUsageFlagBits;

VkBufferViewCreateFlags :: VkFlags;

using VkImageViewCreateFlagBits :: enum_flags u32 {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT :: 1;
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT :: 2;
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkImageViewCreateFlags :: VkImageViewCreateFlagBits;

using VkShaderModuleCreateFlagBits :: enum_flags u32 {
    VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkShaderModuleCreateFlags :: VkShaderModuleCreateFlagBits;

using VkPipelineCacheCreateFlagBits :: enum_flags u32 {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT :: 1;
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkPipelineCacheCreateFlags :: VkPipelineCacheCreateFlagBits;

using VkColorComponentFlagBits :: enum_flags u32 {
    VK_COLOR_COMPONENT_R_BIT :: 1;
    VK_COLOR_COMPONENT_G_BIT :: 2;
    VK_COLOR_COMPONENT_B_BIT :: 4;
    VK_COLOR_COMPONENT_A_BIT :: 8;
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkColorComponentFlags :: VkColorComponentFlagBits;

using VkPipelineCreateFlagBits :: enum_flags u32 {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT :: 1;
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT :: 2;
    VK_PIPELINE_CREATE_DERIVATIVE_BIT :: 4;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT :: 8;
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT :: 16;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR :: 16384;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR :: 32768;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR :: 65536;
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR :: 131072;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR :: 4096;
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR :: 8192;
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR :: 524288;
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV :: 32;
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR :: 64;
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR :: 128;
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV :: 262144;
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR :: 2048;
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT :: 256;
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT :: 512;
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV :: 1048576;
    VK_PIPELINE_CREATE_DISPATCH_BASE :: 16;
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR :: 8;
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR :: 16;
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkPipelineCreateFlags :: VkPipelineCreateFlagBits;

using VkPipelineShaderStageCreateFlagBits :: enum_flags u32 {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT :: 1;
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT :: 2;
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkPipelineShaderStageCreateFlags :: VkPipelineShaderStageCreateFlagBits;

using VkShaderStageFlagBits :: enum_flags u32 {
    VK_SHADER_STAGE_VERTEX_BIT :: 1;
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT :: 2;
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT :: 4;
    VK_SHADER_STAGE_GEOMETRY_BIT :: 8;
    VK_SHADER_STAGE_FRAGMENT_BIT :: 16;
    VK_SHADER_STAGE_COMPUTE_BIT :: 32;
    VK_SHADER_STAGE_ALL_GRAPHICS :: 31;
    VK_SHADER_STAGE_ALL :: 2147483647;
    VK_SHADER_STAGE_RAYGEN_BIT_KHR :: 256;
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR :: 512;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR :: 1024;
    VK_SHADER_STAGE_MISS_BIT_KHR :: 2048;
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR :: 4096;
    VK_SHADER_STAGE_CALLABLE_BIT_KHR :: 8192;
    VK_SHADER_STAGE_TASK_BIT_NV :: 64;
    VK_SHADER_STAGE_MESH_BIT_NV :: 128;
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI :: 16384;
    VK_SHADER_STAGE_RAYGEN_BIT_NV :: 256;
    VK_SHADER_STAGE_ANY_HIT_BIT_NV :: 512;
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV :: 1024;
    VK_SHADER_STAGE_MISS_BIT_NV :: 2048;
    VK_SHADER_STAGE_INTERSECTION_BIT_NV :: 4096;
    VK_SHADER_STAGE_CALLABLE_BIT_NV :: 8192;
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

using VkCullModeFlagBits :: enum_flags u32 {
    VK_CULL_MODE_NONE :: 0;
    VK_CULL_MODE_FRONT_BIT :: 1;
    VK_CULL_MODE_BACK_BIT :: 2;
    VK_CULL_MODE_FRONT_AND_BACK :: 3;
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkCullModeFlags :: VkCullModeFlagBits;

VkPipelineVertexInputStateCreateFlags :: VkFlags;

VkPipelineInputAssemblyStateCreateFlags :: VkFlags;

VkPipelineTessellationStateCreateFlags :: VkFlags;

VkPipelineViewportStateCreateFlags :: VkFlags;

VkPipelineRasterizationStateCreateFlags :: VkFlags;

VkPipelineMultisampleStateCreateFlags :: VkFlags;

VkPipelineDepthStencilStateCreateFlags :: VkFlags;

VkPipelineColorBlendStateCreateFlags :: VkFlags;

VkPipelineDynamicStateCreateFlags :: VkFlags;

VkPipelineLayoutCreateFlags :: VkFlags;

VkShaderStageFlags :: VkFlags;

using VkSamplerCreateFlagBits :: enum_flags u32 {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT :: 1;
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT :: 2;
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSamplerCreateFlags :: VkSamplerCreateFlagBits;

using VkDescriptorPoolCreateFlagBits :: enum_flags u32 {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT :: 1;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT :: 2;
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE :: 4;
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT :: 2;
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkDescriptorPoolCreateFlags :: VkDescriptorPoolCreateFlagBits;

VkDescriptorPoolResetFlags :: VkFlags;

using VkDescriptorSetLayoutCreateFlagBits :: enum_flags u32 {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT :: 2;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR :: 1;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE :: 4;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT :: 2;
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkDescriptorSetLayoutCreateFlags :: VkDescriptorSetLayoutCreateFlagBits;

using VkAttachmentDescriptionFlagBits :: enum_flags u32 {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT :: 1;
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkAttachmentDescriptionFlags :: VkAttachmentDescriptionFlagBits;

using VkDependencyFlagBits :: enum_flags u32 {
    VK_DEPENDENCY_BY_REGION_BIT :: 1;
    VK_DEPENDENCY_DEVICE_GROUP_BIT :: 4;
    VK_DEPENDENCY_VIEW_LOCAL_BIT :: 2;
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR :: 2;
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR :: 4;
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkDependencyFlags :: VkDependencyFlagBits;

using VkFramebufferCreateFlagBits :: enum_flags u32 {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT :: 1;
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR :: 1;
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkFramebufferCreateFlags :: VkFramebufferCreateFlagBits;

using VkRenderPassCreateFlagBits :: enum_flags u32 {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM :: 2;
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkRenderPassCreateFlags :: VkRenderPassCreateFlagBits;

using VkSubpassDescriptionFlagBits :: enum_flags u32 {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX :: 1;
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX :: 2;
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM :: 4;
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM :: 8;
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSubpassDescriptionFlags :: VkSubpassDescriptionFlagBits;

using VkCommandPoolCreateFlagBits :: enum_flags u32 {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT :: 1;
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT :: 2;
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT :: 4;
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkCommandPoolCreateFlags :: VkCommandPoolCreateFlagBits;

using VkCommandPoolResetFlagBits :: enum_flags u32 {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT :: 1;
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkCommandPoolResetFlags :: VkCommandPoolResetFlagBits;

using VkCommandBufferUsageFlagBits :: enum_flags u32 {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT :: 1;
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT :: 2;
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT :: 4;
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkCommandBufferUsageFlags :: VkCommandBufferUsageFlagBits;

using VkQueryControlFlagBits :: enum_flags u32 {
    VK_QUERY_CONTROL_PRECISE_BIT :: 1;
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkQueryControlFlags :: VkQueryControlFlagBits;

using VkCommandBufferResetFlagBits :: enum_flags u32 {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT :: 1;
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkCommandBufferResetFlags :: VkCommandBufferResetFlagBits;

using VkStencilFaceFlagBits :: enum_flags u32 {
    VK_STENCIL_FACE_FRONT_BIT :: 1;
    VK_STENCIL_FACE_BACK_BIT :: 2;
    VK_STENCIL_FACE_FRONT_AND_BACK :: 3;
    VK_STENCIL_FRONT_AND_BACK :: 3;
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkStencilFaceFlags :: VkStencilFaceFlagBits;

VkExtent2D :: struct {
    width: u32;
    height: u32;
}

VkExtent3D :: struct {
    width: u32;
    height: u32;
    depth: u32;
}

VkOffset2D :: struct {
    x: s32;
    y: s32;
}

VkOffset3D :: struct {
    x: s32;
    y: s32;
    z: s32;
}

VkRect2D :: struct {
    offset: VkOffset2D;
    extent: VkExtent2D;
}

VkBaseInStructure :: struct {
    sType: VkStructureType;
    pNext: *VkBaseInStructure;
}

VkBaseOutStructure :: struct {
    sType: VkStructureType;
    pNext: *VkBaseOutStructure;
}

VkBufferMemoryBarrier :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
    pNext: *void;
    srcAccessMask: VkAccessFlags;
    dstAccessMask: VkAccessFlags;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer: VkBuffer;
    offset: VkDeviceSize;
    size: VkDeviceSize;
}

VkDispatchIndirectCommand :: struct {
    x: u32;
    y: u32;
    z: u32;
}

VkDrawIndexedIndirectCommand :: struct {
    indexCount: u32;
    instanceCount: u32;
    firstIndex: u32;
    vertexOffset: s32;
    firstInstance: u32;
}

VkDrawIndirectCommand :: struct {
    vertexCount: u32;
    instanceCount: u32;
    firstVertex: u32;
    firstInstance: u32;
}

VkImageSubresourceRange :: struct {
    aspectMask: VkImageAspectFlags;
    baseMipLevel: u32;
    levelCount: u32;
    baseArrayLayer: u32;
    layerCount: u32;
}

VkImageMemoryBarrier :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    pNext: *void;
    srcAccessMask: VkAccessFlags;
    dstAccessMask: VkAccessFlags;
    oldLayout: VkImageLayout;
    newLayout: VkImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image: VkImage;
    subresourceRange: VkImageSubresourceRange;
}

VkMemoryBarrier :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER;
    pNext: *void;
    srcAccessMask: VkAccessFlags;
    dstAccessMask: VkAccessFlags;
}

VkPipelineCacheHeaderVersionOne :: struct {
    headerSize: u32;
    headerVersion: VkPipelineCacheHeaderVersion;
    vendorID: u32;
    deviceID: u32;
    pipelineCacheUUID: [16] u8;
}

PFN_vkAllocationFunction :: #type (a0: *void, a1: u64, a2: u64, a3: VkSystemAllocationScope) -> *void #c_call;

PFN_vkFreeFunction :: #type (a0: *void, a1: *void) -> void #c_call;

PFN_vkInternalAllocationNotification :: #type (a0: *void, a1: u64, a2: VkInternalAllocationType, a3: VkSystemAllocationScope) -> void #c_call;

PFN_vkInternalFreeNotification :: #type (a0: *void, a1: u64, a2: VkInternalAllocationType, a3: VkSystemAllocationScope) -> void #c_call;

PFN_vkReallocationFunction :: #type (a0: *void, a1: *void, a2: u64, a3: u64, a4: VkSystemAllocationScope) -> *void #c_call;

PFN_vkVoidFunction :: #type () -> void #c_call;

VkAllocationCallbacks :: struct {
    pUserData: *void;
    pfnAllocation: PFN_vkAllocationFunction;
    pfnReallocation: PFN_vkReallocationFunction;
    pfnFree: PFN_vkFreeFunction;
    pfnInternalAllocation: PFN_vkInternalAllocationNotification;
    pfnInternalFree: PFN_vkInternalFreeNotification;
}

VkApplicationInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    pNext: *void;
    pApplicationName: *u8;
    applicationVersion: u32;
    pEngineName: *u8;
    engineVersion: u32;
    apiVersion: u32;
}

VkFormatProperties :: struct {
    linearTilingFeatures: VkFormatFeatureFlags;
    optimalTilingFeatures: VkFormatFeatureFlags;
    bufferFeatures: VkFormatFeatureFlags;
}

VkImageFormatProperties :: struct {
    maxExtent: VkExtent3D;
    maxMipLevels: u32;
    maxArrayLayers: u32;
    sampleCounts: VkSampleCountFlags;
    maxResourceSize: VkDeviceSize;
}

VkInstanceCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    pNext: *void;
    flags: VkInstanceCreateFlags;
    pApplicationInfo: *VkApplicationInfo;
    enabledLayerCount: u32;
    ppEnabledLayerNames: **u8;
    enabledExtensionCount: u32;
    ppEnabledExtensionNames: **u8;
}

VkMemoryHeap :: struct {
    size: VkDeviceSize;
    flags: VkMemoryHeapFlags;
}

VkMemoryType :: struct {
    propertyFlags: VkMemoryPropertyFlags;
    heapIndex: u32;
}

VkPhysicalDeviceFeatures :: struct {
    robustBufferAccess: VkBool32;
    fullDrawIndexUint32: VkBool32;
    imageCubeArray: VkBool32;
    independentBlend: VkBool32;
    geometryShader: VkBool32;
    tessellationShader: VkBool32;
    sampleRateShading: VkBool32;
    dualSrcBlend: VkBool32;
    logicOp: VkBool32;
    multiDrawIndirect: VkBool32;
    drawIndirectFirstInstance: VkBool32;
    depthClamp: VkBool32;
    depthBiasClamp: VkBool32;
    fillModeNonSolid: VkBool32;
    depthBounds: VkBool32;
    wideLines: VkBool32;
    largePoints: VkBool32;
    alphaToOne: VkBool32;
    multiViewport: VkBool32;
    samplerAnisotropy: VkBool32;
    textureCompressionETC2: VkBool32;
    textureCompressionASTC_LDR: VkBool32;
    textureCompressionBC: VkBool32;
    occlusionQueryPrecise: VkBool32;
    pipelineStatisticsQuery: VkBool32;
    vertexPipelineStoresAndAtomics: VkBool32;
    fragmentStoresAndAtomics: VkBool32;
    shaderTessellationAndGeometryPointSize: VkBool32;
    shaderImageGatherExtended: VkBool32;
    shaderStorageImageExtendedFormats: VkBool32;
    shaderStorageImageMultisample: VkBool32;
    shaderStorageImageReadWithoutFormat: VkBool32;
    shaderStorageImageWriteWithoutFormat: VkBool32;
    shaderUniformBufferArrayDynamicIndexing: VkBool32;
    shaderSampledImageArrayDynamicIndexing: VkBool32;
    shaderStorageBufferArrayDynamicIndexing: VkBool32;
    shaderStorageImageArrayDynamicIndexing: VkBool32;
    shaderClipDistance: VkBool32;
    shaderCullDistance: VkBool32;
    shaderFloat64: VkBool32;
    shaderInt64: VkBool32;
    shaderInt16: VkBool32;
    shaderResourceResidency: VkBool32;
    shaderResourceMinLod: VkBool32;
    sparseBinding: VkBool32;
    sparseResidencyBuffer: VkBool32;
    sparseResidencyImage2D: VkBool32;
    sparseResidencyImage3D: VkBool32;
    sparseResidency2Samples: VkBool32;
    sparseResidency4Samples: VkBool32;
    sparseResidency8Samples: VkBool32;
    sparseResidency16Samples: VkBool32;
    sparseResidencyAliased: VkBool32;
    variableMultisampleRate: VkBool32;
    inheritedQueries: VkBool32;
}

VkPhysicalDeviceLimits :: struct {
    maxImageDimension1D: u32;
    maxImageDimension2D: u32;
    maxImageDimension3D: u32;
    maxImageDimensionCube: u32;
    maxImageArrayLayers: u32;
    maxTexelBufferElements: u32;
    maxUniformBufferRange: u32;
    maxStorageBufferRange: u32;
    maxPushConstantsSize: u32;
    maxMemoryAllocationCount: u32;
    maxSamplerAllocationCount: u32;
    bufferImageGranularity: VkDeviceSize;
    sparseAddressSpaceSize: VkDeviceSize;
    maxBoundDescriptorSets: u32;
    maxPerStageDescriptorSamplers: u32;
    maxPerStageDescriptorUniformBuffers: u32;
    maxPerStageDescriptorStorageBuffers: u32;
    maxPerStageDescriptorSampledImages: u32;
    maxPerStageDescriptorStorageImages: u32;
    maxPerStageDescriptorInputAttachments: u32;
    maxPerStageResources: u32;
    maxDescriptorSetSamplers: u32;
    maxDescriptorSetUniformBuffers: u32;
    maxDescriptorSetUniformBuffersDynamic: u32;
    maxDescriptorSetStorageBuffers: u32;
    maxDescriptorSetStorageBuffersDynamic: u32;
    maxDescriptorSetSampledImages: u32;
    maxDescriptorSetStorageImages: u32;
    maxDescriptorSetInputAttachments: u32;
    maxVertexInputAttributes: u32;
    maxVertexInputBindings: u32;
    maxVertexInputAttributeOffset: u32;
    maxVertexInputBindingStride: u32;
    maxVertexOutputComponents: u32;
    maxTessellationGenerationLevel: u32;
    maxTessellationPatchSize: u32;
    maxTessellationControlPerVertexInputComponents: u32;
    maxTessellationControlPerVertexOutputComponents: u32;
    maxTessellationControlPerPatchOutputComponents: u32;
    maxTessellationControlTotalOutputComponents: u32;
    maxTessellationEvaluationInputComponents: u32;
    maxTessellationEvaluationOutputComponents: u32;
    maxGeometryShaderInvocations: u32;
    maxGeometryInputComponents: u32;
    maxGeometryOutputComponents: u32;
    maxGeometryOutputVertices: u32;
    maxGeometryTotalOutputComponents: u32;
    maxFragmentInputComponents: u32;
    maxFragmentOutputAttachments: u32;
    maxFragmentDualSrcAttachments: u32;
    maxFragmentCombinedOutputResources: u32;
    maxComputeSharedMemorySize: u32;
    maxComputeWorkGroupCount: [3] u32;
    maxComputeWorkGroupInvocations: u32;
    maxComputeWorkGroupSize: [3] u32;
    subPixelPrecisionBits: u32;
    subTexelPrecisionBits: u32;
    mipmapPrecisionBits: u32;
    maxDrawIndexedIndexValue: u32;
    maxDrawIndirectCount: u32;
    maxSamplerLodBias: float32;
    maxSamplerAnisotropy: float32;
    maxViewports: u32;
    maxViewportDimensions: [2] u32;
    viewportBoundsRange: [2] float32;
    viewportSubPixelBits: u32;
    minMemoryMapAlignment: u64;
    minTexelBufferOffsetAlignment: VkDeviceSize;
    minUniformBufferOffsetAlignment: VkDeviceSize;
    minStorageBufferOffsetAlignment: VkDeviceSize;
    minTexelOffset: s32;
    maxTexelOffset: u32;
    minTexelGatherOffset: s32;
    maxTexelGatherOffset: u32;
    minInterpolationOffset: float32;
    maxInterpolationOffset: float32;
    subPixelInterpolationOffsetBits: u32;
    maxFramebufferWidth: u32;
    maxFramebufferHeight: u32;
    maxFramebufferLayers: u32;
    framebufferColorSampleCounts: VkSampleCountFlags;
    framebufferDepthSampleCounts: VkSampleCountFlags;
    framebufferStencilSampleCounts: VkSampleCountFlags;
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags;
    maxColorAttachments: u32;
    sampledImageColorSampleCounts: VkSampleCountFlags;
    sampledImageIntegerSampleCounts: VkSampleCountFlags;
    sampledImageDepthSampleCounts: VkSampleCountFlags;
    sampledImageStencilSampleCounts: VkSampleCountFlags;
    storageImageSampleCounts: VkSampleCountFlags;
    maxSampleMaskWords: u32;
    timestampComputeAndGraphics: VkBool32;
    timestampPeriod: float32;
    maxClipDistances: u32;
    maxCullDistances: u32;
    maxCombinedClipAndCullDistances: u32;
    discreteQueuePriorities: u32;
    pointSizeRange: [2] float32;
    lineWidthRange: [2] float32;
    pointSizeGranularity: float32;
    lineWidthGranularity: float32;
    strictLines: VkBool32;
    standardSampleLocations: VkBool32;
    optimalBufferCopyOffsetAlignment: VkDeviceSize;
    optimalBufferCopyRowPitchAlignment: VkDeviceSize;
    nonCoherentAtomSize: VkDeviceSize;
}

VkPhysicalDeviceMemoryProperties :: struct {
    memoryTypeCount: u32;
    memoryTypes: [32] VkMemoryType;
    memoryHeapCount: u32;
    memoryHeaps: [16] VkMemoryHeap;
}

VkPhysicalDeviceSparseProperties :: struct {
    residencyStandard2DBlockShape: VkBool32;
    residencyStandard2DMultisampleBlockShape: VkBool32;
    residencyStandard3DBlockShape: VkBool32;
    residencyAlignedMipSize: VkBool32;
    residencyNonResidentStrict: VkBool32;
}

VkPhysicalDeviceProperties :: struct {
    apiVersion: u32;
    driverVersion: u32;
    vendorID: u32;
    deviceID: u32;
    deviceType: VkPhysicalDeviceType;
    deviceName: [256] u8;
    pipelineCacheUUID: [16] u8;
    limits: VkPhysicalDeviceLimits;
    sparseProperties: VkPhysicalDeviceSparseProperties;
}

VkQueueFamilyProperties :: struct {
    queueFlags: VkQueueFlags;
    queueCount: u32;
    timestampValidBits: u32;
    minImageTransferGranularity: VkExtent3D;
}

VkDeviceQueueCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    pNext: *void;
    flags: VkDeviceQueueCreateFlags;
    queueFamilyIndex: u32;
    queueCount: u32;
    pQueuePriorities: *float32;
}

VkDeviceCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    pNext: *void;
    flags: VkDeviceCreateFlags;
    queueCreateInfoCount: u32;
    pQueueCreateInfos: *VkDeviceQueueCreateInfo;
    enabledLayerCount: u32;
    ppEnabledLayerNames: **u8;
    enabledExtensionCount: u32;
    ppEnabledExtensionNames: **u8;
    pEnabledFeatures: *VkPhysicalDeviceFeatures;
}

VkExtensionProperties :: struct {
    extensionName: [256] u8;
    specVersion: u32;
}

VkLayerProperties :: struct {
    layerName: [256] u8;
    specVersion: u32;
    implementationVersion: u32;
    description: [256] u8;
}

VkSubmitInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
    pNext: *void;
    waitSemaphoreCount: u32;
    pWaitSemaphores: *VkSemaphore;
    pWaitDstStageMask: *VkPipelineStageFlags;
    commandBufferCount: u32;
    pCommandBuffers: *VkCommandBuffer;
    signalSemaphoreCount: u32;
    pSignalSemaphores: *VkSemaphore;
}

VkMappedMemoryRange :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
    pNext: *void;
    memory: VkDeviceMemory;
    offset: VkDeviceSize;
    size: VkDeviceSize;
}

VkMemoryAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    pNext: *void;
    allocationSize: VkDeviceSize;
    memoryTypeIndex: u32;
}

VkMemoryRequirements :: struct {
    size: VkDeviceSize;
    alignment: VkDeviceSize;
    memoryTypeBits: u32;
}

VkSparseMemoryBind :: struct {
    resourceOffset: VkDeviceSize;
    size: VkDeviceSize;
    memory: VkDeviceMemory;
    memoryOffset: VkDeviceSize;
    flags: VkSparseMemoryBindFlags;
}

VkSparseBufferMemoryBindInfo :: struct {
    buffer: VkBuffer;
    bindCount: u32;
    pBinds: *VkSparseMemoryBind;
}

VkSparseImageOpaqueMemoryBindInfo :: struct {
    image: VkImage;
    bindCount: u32;
    pBinds: *VkSparseMemoryBind;
}

VkImageSubresource :: struct {
    aspectMask: VkImageAspectFlags;
    mipLevel: u32;
    arrayLayer: u32;
}

VkSparseImageMemoryBind :: struct {
    subresource: VkImageSubresource;
    offset: VkOffset3D;
    extent: VkExtent3D;
    memory: VkDeviceMemory;
    memoryOffset: VkDeviceSize;
    flags: VkSparseMemoryBindFlags;
}

VkSparseImageMemoryBindInfo :: struct {
    image: VkImage;
    bindCount: u32;
    pBinds: *VkSparseImageMemoryBind;
}

VkBindSparseInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
    pNext: *void;
    waitSemaphoreCount: u32;
    pWaitSemaphores: *VkSemaphore;
    bufferBindCount: u32;
    pBufferBinds: *VkSparseBufferMemoryBindInfo;
    imageOpaqueBindCount: u32;
    pImageOpaqueBinds: *VkSparseImageOpaqueMemoryBindInfo;
    imageBindCount: u32;
    pImageBinds: *VkSparseImageMemoryBindInfo;
    signalSemaphoreCount: u32;
    pSignalSemaphores: *VkSemaphore;
}

VkSparseImageFormatProperties :: struct {
    aspectMask: VkImageAspectFlags;
    imageGranularity: VkExtent3D;
    flags: VkSparseImageFormatFlags;
}

VkSparseImageMemoryRequirements :: struct {
    formatProperties: VkSparseImageFormatProperties;
    imageMipTailFirstLod: u32;
    imageMipTailSize: VkDeviceSize;
    imageMipTailOffset: VkDeviceSize;
    imageMipTailStride: VkDeviceSize;
}

VkFenceCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
    pNext: *void;
    flags: VkFenceCreateFlags;
}

VkSemaphoreCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
    pNext: *void;
    flags: VkSemaphoreCreateFlags;
}

VkEventCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
    pNext: *void;
    flags: VkEventCreateFlags;
}

VkQueryPoolCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
    pNext: *void;
    flags: VkQueryPoolCreateFlags;
    queryType: VkQueryType;
    queryCount: u32;
    pipelineStatistics: VkQueryPipelineStatisticFlags;
}

VkBufferCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    pNext: *void;
    flags: VkBufferCreateFlags;
    size: VkDeviceSize;
    usage: VkBufferUsageFlags;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: *u32;
}

VkBufferViewCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
    pNext: *void;
    flags: VkBufferViewCreateFlags;
    buffer: VkBuffer;
    format: VkFormat;
    offset: VkDeviceSize;
    range: VkDeviceSize;
}

VkImageCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    pNext: *void;
    flags: VkImageCreateFlags;
    imageType: VkImageType;
    format: VkFormat;
    extent: VkExtent3D;
    mipLevels: u32;
    arrayLayers: u32;
    samples: VkSampleCountFlagBits;
    tiling: VkImageTiling;
    usage: VkImageUsageFlags;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: *u32;
    initialLayout: VkImageLayout;
}

VkSubresourceLayout :: struct {
    offset: VkDeviceSize;
    size: VkDeviceSize;
    rowPitch: VkDeviceSize;
    arrayPitch: VkDeviceSize;
    depthPitch: VkDeviceSize;
}

VkComponentMapping :: struct {
    r: VkComponentSwizzle;
    g: VkComponentSwizzle;
    b: VkComponentSwizzle;
    a: VkComponentSwizzle;
}

VkImageViewCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    pNext: *void;
    flags: VkImageViewCreateFlags;
    image: VkImage;
    viewType: VkImageViewType;
    format: VkFormat;
    components: VkComponentMapping;
    subresourceRange: VkImageSubresourceRange;
}

VkShaderModuleCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    pNext: *void;
    flags: VkShaderModuleCreateFlags;
    codeSize: u64;
    pCode: *u32;
}

VkPipelineCacheCreateInfo :: struct {
    sType: VkStructureType= VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineCacheCreateFlags;
    initialDataSize: u64;
    pInitialData: *void;
}

VkSpecializationMapEntry :: struct {
    constantID: u32;
    offset: u32;
    size: u64;
}

VkSpecializationInfo :: struct {
    mapEntryCount: u32;
    pMapEntries: *VkSpecializationMapEntry;
    dataSize: u64;
    pData: *void;
}

VkPipelineShaderStageCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineShaderStageCreateFlags;
    stage: VkShaderStageFlagBits;
    module: VkShaderModule;
    pName: *u8;
    pSpecializationInfo: *VkSpecializationInfo;
}

VkComputePipelineCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineCreateFlags;
    stage: VkPipelineShaderStageCreateInfo;
    layout: VkPipelineLayout;
    basePipelineHandle: VkPipeline;
    basePipelineIndex: s32;
}

VkVertexInputBindingDescription :: struct {
    binding: u32;
    stride: u32;
    inputRate: VkVertexInputRate;
}

VkVertexInputAttributeDescription :: struct {
    location: u32;
    binding: u32;
    format: VkFormat;
    offset: u32;
}

VkPipelineVertexInputStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineVertexInputStateCreateFlags;
    vertexBindingDescriptionCount: u32;
    pVertexBindingDescriptions: *VkVertexInputBindingDescription;
    vertexAttributeDescriptionCount: u32;
    pVertexAttributeDescriptions: *VkVertexInputAttributeDescription;
}

VkPipelineInputAssemblyStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineInputAssemblyStateCreateFlags;
    topology: VkPrimitiveTopology;
    primitiveRestartEnable: VkBool32;
}

VkPipelineTessellationStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineTessellationStateCreateFlags;
    patchControlPoints: u32;
}

VkViewport :: struct {
    x: float32;
    y: float32;
    width: float32;
    height: float32;
    minDepth: float32;
    maxDepth: float32;
}

VkPipelineViewportStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineViewportStateCreateFlags;
    viewportCount: u32;
    pViewports: *VkViewport;
    scissorCount: u32;
    pScissors: *VkRect2D;
}

VkPipelineRasterizationStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineRasterizationStateCreateFlags;
    depthClampEnable: VkBool32;
    rasterizerDiscardEnable: VkBool32;
    polygonMode: VkPolygonMode;
    cullMode: VkCullModeFlags;
    frontFace: VkFrontFace;
    depthBiasEnable: VkBool32;
    depthBiasConstantFactor: float32;
    depthBiasClamp: float32;
    depthBiasSlopeFactor: float32;
    lineWidth: float32;
}

VkPipelineMultisampleStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineMultisampleStateCreateFlags;
    rasterizationSamples: VkSampleCountFlagBits;
    sampleShadingEnable: VkBool32;
    minSampleShading: float32;
    pSampleMask: *VkSampleMask;
    alphaToCoverageEnable: VkBool32;
    alphaToOneEnable: VkBool32;
}

VkStencilOpState :: struct {
    failOp: VkStencilOp;
    passOp: VkStencilOp;
    depthFailOp: VkStencilOp;
    compareOp: VkCompareOp;
    compareMask: u32;
    writeMask: u32;
    reference: u32;
}

VkPipelineDepthStencilStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineDepthStencilStateCreateFlags;
    depthTestEnable: VkBool32;
    depthWriteEnable: VkBool32;
    depthCompareOp: VkCompareOp;
    depthBoundsTestEnable: VkBool32;
    stencilTestEnable: VkBool32;
    front: VkStencilOpState;
    back: VkStencilOpState;
    minDepthBounds: float32;
    maxDepthBounds: float32;
}

VkPipelineColorBlendAttachmentState :: struct {
    blendEnable: VkBool32;
    srcColorBlendFactor: VkBlendFactor;
    dstColorBlendFactor: VkBlendFactor;
    colorBlendOp: VkBlendOp;
    srcAlphaBlendFactor: VkBlendFactor;
    dstAlphaBlendFactor: VkBlendFactor;
    alphaBlendOp: VkBlendOp;
    colorWriteMask: VkColorComponentFlags;
}

VkPipelineColorBlendStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineColorBlendStateCreateFlags;
    logicOpEnable: VkBool32;
    logicOp: VkLogicOp;
    attachmentCount: u32;
    pAttachments: *VkPipelineColorBlendAttachmentState;
    blendConstants: [4] float32;
}

VkPipelineDynamicStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineDynamicStateCreateFlags;
    dynamicStateCount: u32;
    pDynamicStates: *VkDynamicState;
}

VkGraphicsPipelineCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineCreateFlags;
    stageCount: u32;
    pStages: *VkPipelineShaderStageCreateInfo;
    pVertexInputState: *VkPipelineVertexInputStateCreateInfo;
    pInputAssemblyState: *VkPipelineInputAssemblyStateCreateInfo;
    pTessellationState: *VkPipelineTessellationStateCreateInfo;
    pViewportState: *VkPipelineViewportStateCreateInfo;
    pRasterizationState: *VkPipelineRasterizationStateCreateInfo;
    pMultisampleState: *VkPipelineMultisampleStateCreateInfo;
    pDepthStencilState: *VkPipelineDepthStencilStateCreateInfo;
    pColorBlendState: *VkPipelineColorBlendStateCreateInfo;
    pDynamicState: *VkPipelineDynamicStateCreateInfo;
    layout: VkPipelineLayout;
    renderPass: VkRenderPass;
    subpass: u32;
    basePipelineHandle: VkPipeline;
    basePipelineIndex: s32;
}

VkPushConstantRange :: struct {
    stageFlags: VkShaderStageFlags;
    offset: u32;
    size: u32;
}

VkPipelineLayoutCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    pNext: *void;
    flags: VkPipelineLayoutCreateFlags;
    setLayoutCount: u32;
    pSetLayouts: *VkDescriptorSetLayout;
    pushConstantRangeCount: u32;
    pPushConstantRanges: *VkPushConstantRange;
}

VkSamplerCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    pNext: *void;
    flags: VkSamplerCreateFlags;
    magFilter: VkFilter;
    minFilter: VkFilter;
    mipmapMode: VkSamplerMipmapMode;
    addressModeU: VkSamplerAddressMode;
    addressModeV: VkSamplerAddressMode;
    addressModeW: VkSamplerAddressMode;
    mipLodBias: float32;
    anisotropyEnable: VkBool32;
    maxAnisotropy: float32;
    compareEnable: VkBool32;
    compareOp: VkCompareOp;
    minLod: float32;
    maxLod: float32;
    borderColor: VkBorderColor;
    unnormalizedCoordinates: VkBool32;
}

VkCopyDescriptorSet :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
    pNext: *void;
    srcSet: VkDescriptorSet;
    srcBinding: u32;
    srcArrayElement: u32;
    dstSet: VkDescriptorSet;
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
}

VkDescriptorBufferInfo :: struct {
    buffer: VkBuffer;
    offset: VkDeviceSize;
    range: VkDeviceSize;
}

VkDescriptorImageInfo :: struct {
    sampler: VkSampler;
    imageView: VkImageView;
    imageLayout: VkImageLayout;
}

VkDescriptorPoolSize :: struct {
    type: VkDescriptorType;
    descriptorCount: u32;
}

VkDescriptorPoolCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
    pNext: *void;
    flags: VkDescriptorPoolCreateFlags;
    maxSets: u32;
    poolSizeCount: u32;
    pPoolSizes: *VkDescriptorPoolSize;
}

VkDescriptorSetAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
    pNext: *void;
    descriptorPool: VkDescriptorPool;
    descriptorSetCount: u32;
    pSetLayouts: *VkDescriptorSetLayout;
}

VkDescriptorSetLayoutBinding :: struct {
    binding: u32;
    descriptorType: VkDescriptorType;
    descriptorCount: u32;
    stageFlags: VkShaderStageFlags;
    pImmutableSamplers: *VkSampler;
}

VkDescriptorSetLayoutCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    pNext: *void;
    flags: VkDescriptorSetLayoutCreateFlags;
    bindingCount: u32;
    pBindings: *VkDescriptorSetLayoutBinding;
}

VkWriteDescriptorSet :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    pNext: *void;
    dstSet: VkDescriptorSet;
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
    descriptorType: VkDescriptorType;
    pImageInfo: *VkDescriptorImageInfo;
    pBufferInfo: *VkDescriptorBufferInfo;
    pTexelBufferView: *VkBufferView;
}

VkAttachmentDescription :: struct {
    flags: VkAttachmentDescriptionFlags;
    format: VkFormat;
    samples: VkSampleCountFlagBits;
    loadOp: VkAttachmentLoadOp;
    storeOp: VkAttachmentStoreOp;
    stencilLoadOp: VkAttachmentLoadOp;
    stencilStoreOp: VkAttachmentStoreOp;
    initialLayout: VkImageLayout;
    finalLayout: VkImageLayout;
}

VkAttachmentReference :: struct {
    attachment: u32;
    layout: VkImageLayout;
}

VkFramebufferCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    pNext: *void;
    flags: VkFramebufferCreateFlags;
    renderPass: VkRenderPass;
    attachmentCount: u32;
    pAttachments: *VkImageView;
    width: u32;
    height: u32;
    layers: u32;
}

VkSubpassDescription :: struct {
    flags: VkSubpassDescriptionFlags;
    pipelineBindPoint: VkPipelineBindPoint;
    inputAttachmentCount: u32;
    pInputAttachments: *VkAttachmentReference;
    colorAttachmentCount: u32;
    pColorAttachments: *VkAttachmentReference;
    pResolveAttachments: *VkAttachmentReference;
    pDepthStencilAttachment: *VkAttachmentReference;
    preserveAttachmentCount: u32;
    pPreserveAttachments: *u32;
}

VkSubpassDependency :: struct {
    srcSubpass: u32;
    dstSubpass: u32;
    srcStageMask: VkPipelineStageFlags;
    dstStageMask: VkPipelineStageFlags;
    srcAccessMask: VkAccessFlags;
    dstAccessMask: VkAccessFlags;
    dependencyFlags: VkDependencyFlags;
}

VkRenderPassCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
    pNext: *void;
    flags: VkRenderPassCreateFlags;
    attachmentCount: u32;
    pAttachments: *VkAttachmentDescription;
    subpassCount: u32;
    pSubpasses: *VkSubpassDescription;
    dependencyCount: u32;
    pDependencies: *VkSubpassDependency;
}

VkCommandPoolCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    pNext: *void;
    flags: VkCommandPoolCreateFlags;
    queueFamilyIndex: u32;
}

VkCommandBufferAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    pNext: *void;
    commandPool: VkCommandPool;
    level: VkCommandBufferLevel;
    commandBufferCount: u32;
}

VkCommandBufferInheritanceInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
    pNext: *void;
    renderPass: VkRenderPass;
    subpass: u32;
    framebuffer: VkFramebuffer;
    occlusionQueryEnable: VkBool32;
    queryFlags: VkQueryControlFlags;
    pipelineStatistics: VkQueryPipelineStatisticFlags;
}

VkCommandBufferBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    pNext: *void;
    flags: VkCommandBufferUsageFlags;
    pInheritanceInfo: *VkCommandBufferInheritanceInfo;
}

VkBufferCopy :: struct {
    srcOffset: VkDeviceSize;
    dstOffset: VkDeviceSize;
    size: VkDeviceSize;
}

VkImageSubresourceLayers :: struct {
    aspectMask: VkImageAspectFlags;
    mipLevel: u32;
    baseArrayLayer: u32;
    layerCount: u32;
}

VkBufferImageCopy :: struct {
    bufferOffset: VkDeviceSize;
    bufferRowLength: u32;
    bufferImageHeight: u32;
    imageSubresource: VkImageSubresourceLayers;
    imageOffset: VkOffset3D;
    imageExtent: VkExtent3D;
}

VkClearColorValue :: union {
    _float32: [4] float;
    int32: [4] s32;
    uint32: [4] u32;
}

VkClearDepthStencilValue :: struct {
    depth: float32;
    stencil: u32;
}

VkClearValue :: union {
    color: VkClearColorValue;
    depthStencil: VkClearDepthStencilValue;
}

VkClearAttachment :: struct {
    aspectMask: VkImageAspectFlags;
    colorAttachment: u32;
    clearValue: VkClearValue;
}

VkClearRect :: struct {
    rect: VkRect2D;
    baseArrayLayer: u32;
    layerCount: u32;
}

VkImageBlit :: struct {
    srcSubresource: VkImageSubresourceLayers;
    srcOffsets: [2] VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffsets: [2] VkOffset3D;
}

VkImageCopy :: struct {
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

VkImageResolve :: struct {
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

VkRenderPassBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    pNext: *void;
    renderPass: VkRenderPass;
    framebuffer: VkFramebuffer;
    renderArea: VkRect2D;
    clearValueCount: u32;
    pClearValues: *VkClearValue;
}

PFN_vkCreateInstance :: #type (a0: *VkInstanceCreateInfo, a1: *VkAllocationCallbacks, a2: *VkInstance) -> VkResult #c_call;

PFN_vkDestroyInstance :: #type (a0: VkInstance, a1: *VkAllocationCallbacks) -> void #c_call;

PFN_vkEnumeratePhysicalDevices :: #type (a0: VkInstance, a1: *u32, a2: *VkPhysicalDevice) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceFeatures :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceFeatures) -> void #c_call;

PFN_vkGetPhysicalDeviceFormatProperties :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: *VkFormatProperties) -> void #c_call;

PFN_vkGetPhysicalDeviceImageFormatProperties :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: VkImageType, a3: VkImageTiling, a4: VkImageUsageFlags, a5: VkImageCreateFlags, a6: *VkImageFormatProperties) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceProperties :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceProperties) -> void #c_call;

PFN_vkGetPhysicalDeviceQueueFamilyProperties :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkQueueFamilyProperties) -> void #c_call;

PFN_vkGetPhysicalDeviceMemoryProperties :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceMemoryProperties) -> void #c_call;

PFN_vkGetInstanceProcAddr :: #type (a0: VkInstance, a1: *u8) -> PFN_vkVoidFunction #c_call;

PFN_vkGetDeviceProcAddr :: #type (a0: VkDevice, a1: *u8) -> PFN_vkVoidFunction #c_call;

PFN_vkCreateDevice :: #type (a0: VkPhysicalDevice, a1: *VkDeviceCreateInfo, a2: *VkAllocationCallbacks, a3: *VkDevice) -> VkResult #c_call;

PFN_vkDestroyDevice :: #type (a0: VkDevice, a1: *VkAllocationCallbacks) -> void #c_call;

PFN_vkEnumerateInstanceExtensionProperties :: #type (a0: *u8, a1: *u32, a2: *VkExtensionProperties) -> VkResult #c_call;

PFN_vkEnumerateDeviceExtensionProperties :: #type (a0: VkPhysicalDevice, a1: *u8, a2: *u32, a3: *VkExtensionProperties) -> VkResult #c_call;

PFN_vkEnumerateInstanceLayerProperties :: #type (a0: *u32, a1: *VkLayerProperties) -> VkResult #c_call;

PFN_vkEnumerateDeviceLayerProperties :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkLayerProperties) -> VkResult #c_call;

PFN_vkGetDeviceQueue :: #type (a0: VkDevice, a1: u32, a2: u32, a3: *VkQueue) -> void #c_call;

PFN_vkQueueSubmit :: #type (a0: VkQueue, a1: u32, a2: *VkSubmitInfo, a3: VkFence) -> VkResult #c_call;

PFN_vkQueueWaitIdle :: #type (a0: VkQueue) -> VkResult #c_call;

PFN_vkDeviceWaitIdle :: #type (a0: VkDevice) -> VkResult #c_call;

PFN_vkAllocateMemory :: #type (a0: VkDevice, a1: *VkMemoryAllocateInfo, a2: *VkAllocationCallbacks, a3: *VkDeviceMemory) -> VkResult #c_call;

PFN_vkFreeMemory :: #type (a0: VkDevice, a1: VkDeviceMemory, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkMapMemory :: #type (a0: VkDevice, a1: VkDeviceMemory, a2: VkDeviceSize, a3: VkDeviceSize, a4: VkMemoryMapFlags, a5: **void) -> VkResult #c_call;

PFN_vkUnmapMemory :: #type (a0: VkDevice, a1: VkDeviceMemory) -> void #c_call;

PFN_vkFlushMappedMemoryRanges :: #type (a0: VkDevice, a1: u32, a2: *VkMappedMemoryRange) -> VkResult #c_call;

PFN_vkInvalidateMappedMemoryRanges :: #type (a0: VkDevice, a1: u32, a2: *VkMappedMemoryRange) -> VkResult #c_call;

PFN_vkGetDeviceMemoryCommitment :: #type (a0: VkDevice, a1: VkDeviceMemory, a2: *VkDeviceSize) -> void #c_call;

PFN_vkBindBufferMemory :: #type (a0: VkDevice, a1: VkBuffer, a2: VkDeviceMemory, a3: VkDeviceSize) -> VkResult #c_call;

PFN_vkBindImageMemory :: #type (a0: VkDevice, a1: VkImage, a2: VkDeviceMemory, a3: VkDeviceSize) -> VkResult #c_call;

PFN_vkGetBufferMemoryRequirements :: #type (a0: VkDevice, a1: VkBuffer, a2: *VkMemoryRequirements) -> void #c_call;

PFN_vkGetImageMemoryRequirements :: #type (a0: VkDevice, a1: VkImage, a2: *VkMemoryRequirements) -> void #c_call;

PFN_vkGetImageSparseMemoryRequirements :: #type (a0: VkDevice, a1: VkImage, a2: *u32, a3: *VkSparseImageMemoryRequirements) -> void #c_call;

PFN_vkGetPhysicalDeviceSparseImageFormatProperties :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: VkImageType, a3: VkSampleCountFlagBits, a4: VkImageUsageFlags, a5: VkImageTiling, a6: *u32, a7: *VkSparseImageFormatProperties) -> void #c_call;

PFN_vkQueueBindSparse :: #type (a0: VkQueue, a1: u32, a2: *VkBindSparseInfo, a3: VkFence) -> VkResult #c_call;

PFN_vkCreateFence :: #type (a0: VkDevice, a1: *VkFenceCreateInfo, a2: *VkAllocationCallbacks, a3: *VkFence) -> VkResult #c_call;

PFN_vkDestroyFence :: #type (a0: VkDevice, a1: VkFence, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkResetFences :: #type (a0: VkDevice, a1: u32, a2: *VkFence) -> VkResult #c_call;

PFN_vkGetFenceStatus :: #type (a0: VkDevice, a1: VkFence) -> VkResult #c_call;

PFN_vkWaitForFences :: #type (a0: VkDevice, a1: u32, a2: *VkFence, a3: VkBool32, a4: u64) -> VkResult #c_call;

PFN_vkCreateSemaphore :: #type (a0: VkDevice, a1: *VkSemaphoreCreateInfo, a2: *VkAllocationCallbacks, a3: *VkSemaphore) -> VkResult #c_call;

PFN_vkDestroySemaphore :: #type (a0: VkDevice, a1: VkSemaphore, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateEvent :: #type (a0: VkDevice, a1: *VkEventCreateInfo, a2: *VkAllocationCallbacks, a3: *VkEvent) -> VkResult #c_call;

PFN_vkDestroyEvent :: #type (a0: VkDevice, a1: VkEvent, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetEventStatus :: #type (a0: VkDevice, a1: VkEvent) -> VkResult #c_call;

PFN_vkSetEvent :: #type (a0: VkDevice, a1: VkEvent) -> VkResult #c_call;

PFN_vkResetEvent :: #type (a0: VkDevice, a1: VkEvent) -> VkResult #c_call;

PFN_vkCreateQueryPool :: #type (a0: VkDevice, a1: *VkQueryPoolCreateInfo, a2: *VkAllocationCallbacks, a3: *VkQueryPool) -> VkResult #c_call;

PFN_vkDestroyQueryPool :: #type (a0: VkDevice, a1: VkQueryPool, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetQueryPoolResults :: #type (a0: VkDevice, a1: VkQueryPool, a2: u32, a3: u32, a4: u64, a5: *void, a6: VkDeviceSize, a7: VkQueryResultFlags) -> VkResult #c_call;

PFN_vkCreateBuffer :: #type (a0: VkDevice, a1: *VkBufferCreateInfo, a2: *VkAllocationCallbacks, a3: *VkBuffer) -> VkResult #c_call;

PFN_vkDestroyBuffer :: #type (a0: VkDevice, a1: VkBuffer, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateBufferView :: #type (a0: VkDevice, a1: *VkBufferViewCreateInfo, a2: *VkAllocationCallbacks, a3: *VkBufferView) -> VkResult #c_call;

PFN_vkDestroyBufferView :: #type (a0: VkDevice, a1: VkBufferView, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateImage :: #type (a0: VkDevice, a1: *VkImageCreateInfo, a2: *VkAllocationCallbacks, a3: *VkImage) -> VkResult #c_call;

PFN_vkDestroyImage :: #type (a0: VkDevice, a1: VkImage, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetImageSubresourceLayout :: #type (a0: VkDevice, a1: VkImage, a2: *VkImageSubresource, a3: *VkSubresourceLayout) -> void #c_call;

PFN_vkCreateImageView :: #type (a0: VkDevice, a1: *VkImageViewCreateInfo, a2: *VkAllocationCallbacks, a3: *VkImageView) -> VkResult #c_call;

PFN_vkDestroyImageView :: #type (a0: VkDevice, a1: VkImageView, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateShaderModule :: #type (a0: VkDevice, a1: *VkShaderModuleCreateInfo, a2: *VkAllocationCallbacks, a3: *VkShaderModule) -> VkResult #c_call;

PFN_vkDestroyShaderModule :: #type (a0: VkDevice, a1: VkShaderModule, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreatePipelineCache :: #type (a0: VkDevice, a1: *VkPipelineCacheCreateInfo, a2: *VkAllocationCallbacks, a3: *VkPipelineCache) -> VkResult #c_call;

PFN_vkDestroyPipelineCache :: #type (a0: VkDevice, a1: VkPipelineCache, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetPipelineCacheData :: #type (a0: VkDevice, a1: VkPipelineCache, a2: *u64, a3: *void) -> VkResult #c_call;

PFN_vkMergePipelineCaches :: #type (a0: VkDevice, a1: VkPipelineCache, a2: u32, a3: *VkPipelineCache) -> VkResult #c_call;

PFN_vkCreateGraphicsPipelines :: #type (a0: VkDevice, a1: VkPipelineCache, a2: u32, a3: *VkGraphicsPipelineCreateInfo, a4: *VkAllocationCallbacks, a5: *VkPipeline) -> VkResult #c_call;

PFN_vkCreateComputePipelines :: #type (a0: VkDevice, a1: VkPipelineCache, a2: u32, a3: *VkComputePipelineCreateInfo, a4: *VkAllocationCallbacks, a5: *VkPipeline) -> VkResult #c_call;

PFN_vkDestroyPipeline :: #type (a0: VkDevice, a1: VkPipeline, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreatePipelineLayout :: #type (a0: VkDevice, a1: *VkPipelineLayoutCreateInfo, a2: *VkAllocationCallbacks, a3: *VkPipelineLayout) -> VkResult #c_call;

PFN_vkDestroyPipelineLayout :: #type (a0: VkDevice, a1: VkPipelineLayout, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateSampler :: #type (a0: VkDevice, a1: *VkSamplerCreateInfo, a2: *VkAllocationCallbacks, a3: *VkSampler) -> VkResult #c_call;

PFN_vkDestroySampler :: #type (a0: VkDevice, a1: VkSampler, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateDescriptorSetLayout :: #type (a0: VkDevice, a1: *VkDescriptorSetLayoutCreateInfo, a2: *VkAllocationCallbacks, a3: *VkDescriptorSetLayout) -> VkResult #c_call;

PFN_vkDestroyDescriptorSetLayout :: #type (a0: VkDevice, a1: VkDescriptorSetLayout, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateDescriptorPool :: #type (a0: VkDevice, a1: *VkDescriptorPoolCreateInfo, a2: *VkAllocationCallbacks, a3: *VkDescriptorPool) -> VkResult #c_call;

PFN_vkDestroyDescriptorPool :: #type (a0: VkDevice, a1: VkDescriptorPool, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkResetDescriptorPool :: #type (a0: VkDevice, a1: VkDescriptorPool, a2: VkDescriptorPoolResetFlags) -> VkResult #c_call;

PFN_vkAllocateDescriptorSets :: #type (a0: VkDevice, a1: *VkDescriptorSetAllocateInfo, a2: *VkDescriptorSet) -> VkResult #c_call;

PFN_vkFreeDescriptorSets :: #type (a0: VkDevice, a1: VkDescriptorPool, a2: u32, a3: *VkDescriptorSet) -> VkResult #c_call;

PFN_vkUpdateDescriptorSets :: #type (a0: VkDevice, a1: u32, a2: *VkWriteDescriptorSet, a3: u32, a4: *VkCopyDescriptorSet) -> void #c_call;

PFN_vkCreateFramebuffer :: #type (a0: VkDevice, a1: *VkFramebufferCreateInfo, a2: *VkAllocationCallbacks, a3: *VkFramebuffer) -> VkResult #c_call;

PFN_vkDestroyFramebuffer :: #type (a0: VkDevice, a1: VkFramebuffer, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateRenderPass :: #type (a0: VkDevice, a1: *VkRenderPassCreateInfo, a2: *VkAllocationCallbacks, a3: *VkRenderPass) -> VkResult #c_call;

PFN_vkDestroyRenderPass :: #type (a0: VkDevice, a1: VkRenderPass, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetRenderAreaGranularity :: #type (a0: VkDevice, a1: VkRenderPass, a2: *VkExtent2D) -> void #c_call;

PFN_vkCreateCommandPool :: #type (a0: VkDevice, a1: *VkCommandPoolCreateInfo, a2: *VkAllocationCallbacks, a3: *VkCommandPool) -> VkResult #c_call;

PFN_vkDestroyCommandPool :: #type (a0: VkDevice, a1: VkCommandPool, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkResetCommandPool :: #type (a0: VkDevice, a1: VkCommandPool, a2: VkCommandPoolResetFlags) -> VkResult #c_call;

PFN_vkAllocateCommandBuffers :: #type (a0: VkDevice, a1: *VkCommandBufferAllocateInfo, a2: *VkCommandBuffer) -> VkResult #c_call;

PFN_vkFreeCommandBuffers :: #type (a0: VkDevice, a1: VkCommandPool, a2: u32, a3: *VkCommandBuffer) -> void #c_call;

PFN_vkBeginCommandBuffer :: #type (a0: VkCommandBuffer, a1: *VkCommandBufferBeginInfo) -> VkResult #c_call;

PFN_vkEndCommandBuffer :: #type (a0: VkCommandBuffer) -> VkResult #c_call;

PFN_vkResetCommandBuffer :: #type (a0: VkCommandBuffer, a1: VkCommandBufferResetFlags) -> VkResult #c_call;

PFN_vkCmdBindPipeline :: #type (a0: VkCommandBuffer, a1: VkPipelineBindPoint, a2: VkPipeline) -> void #c_call;

PFN_vkCmdSetViewport :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkViewport) -> void #c_call;

PFN_vkCmdSetScissor :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkRect2D) -> void #c_call;

PFN_vkCmdSetLineWidth :: #type (a0: VkCommandBuffer, a1: float32) -> void #c_call;

PFN_vkCmdSetDepthBias :: #type (a0: VkCommandBuffer, a1: float32, a2: float32, a3: float32) -> void #c_call;

PFN_vkCmdSetBlendConstants :: #type (a0: VkCommandBuffer, a1: *[4] float32) -> void #c_call;

PFN_vkCmdSetDepthBounds :: #type (a0: VkCommandBuffer, a1: float32, a2: float32) -> void #c_call;

PFN_vkCmdSetStencilCompareMask :: #type (a0: VkCommandBuffer, a1: VkStencilFaceFlags, a2: u32) -> void #c_call;

PFN_vkCmdSetStencilWriteMask :: #type (a0: VkCommandBuffer, a1: VkStencilFaceFlags, a2: u32) -> void #c_call;

PFN_vkCmdSetStencilReference :: #type (a0: VkCommandBuffer, a1: VkStencilFaceFlags, a2: u32) -> void #c_call;

PFN_vkCmdBindDescriptorSets :: #type (a0: VkCommandBuffer, a1: VkPipelineBindPoint, a2: VkPipelineLayout, a3: u32, a4: u32, a5: *VkDescriptorSet, a6: u32, a7: *u32) -> void #c_call;

PFN_vkCmdBindIndexBuffer :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkIndexType) -> void #c_call;

PFN_vkCmdBindVertexBuffers :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkBuffer, a4: *VkDeviceSize) -> void #c_call;

PFN_vkCmdDraw :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: u32, a4: u32) -> void #c_call;

PFN_vkCmdDrawIndexed :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: u32, a4: s32, a5: u32) -> void #c_call;

PFN_vkCmdDrawIndirect :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: u32, a4: u32) -> void #c_call;

PFN_vkCmdDrawIndexedIndirect :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: u32, a4: u32) -> void #c_call;

PFN_vkCmdDispatch :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: u32) -> void #c_call;

PFN_vkCmdDispatchIndirect :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize) -> void #c_call;

PFN_vkCmdCopyBuffer :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkBuffer, a3: u32, a4: *VkBufferCopy) -> void #c_call;

PFN_vkCmdCopyImage :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: VkImage, a4: VkImageLayout, a5: u32, a6: *VkImageCopy) -> void #c_call;

PFN_vkCmdBlitImage :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: VkImage, a4: VkImageLayout, a5: u32, a6: *VkImageBlit, a7: VkFilter) -> void #c_call;

PFN_vkCmdCopyBufferToImage :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkImage, a3: VkImageLayout, a4: u32, a5: *VkBufferImageCopy) -> void #c_call;

PFN_vkCmdCopyImageToBuffer :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: VkBuffer, a4: u32, a5: *VkBufferImageCopy) -> void #c_call;

PFN_vkCmdUpdateBuffer :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkDeviceSize, a4: *void) -> void #c_call;

PFN_vkCmdFillBuffer :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkDeviceSize, a4: u32) -> void #c_call;

PFN_vkCmdClearColorImage :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: *VkClearColorValue, a4: u32, a5: *VkImageSubresourceRange) -> void #c_call;

PFN_vkCmdClearDepthStencilImage :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: *VkClearDepthStencilValue, a4: u32, a5: *VkImageSubresourceRange) -> void #c_call;

PFN_vkCmdClearAttachments :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkClearAttachment, a3: u32, a4: *VkClearRect) -> void #c_call;

PFN_vkCmdResolveImage :: #type (a0: VkCommandBuffer, a1: VkImage, a2: VkImageLayout, a3: VkImage, a4: VkImageLayout, a5: u32, a6: *VkImageResolve) -> void #c_call;

PFN_vkCmdSetEvent :: #type (a0: VkCommandBuffer, a1: VkEvent, a2: VkPipelineStageFlags) -> void #c_call;

PFN_vkCmdResetEvent :: #type (a0: VkCommandBuffer, a1: VkEvent, a2: VkPipelineStageFlags) -> void #c_call;

PFN_vkCmdWaitEvents :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkEvent, a3: VkPipelineStageFlags, a4: VkPipelineStageFlags, a5: u32, a6: *VkMemoryBarrier, a7: u32, a8: *VkBufferMemoryBarrier, a9: u32, a10: *VkImageMemoryBarrier) -> void #c_call;

PFN_vkCmdPipelineBarrier :: #type (a0: VkCommandBuffer, a1: VkPipelineStageFlags, a2: VkPipelineStageFlags, a3: VkDependencyFlags, a4: u32, a5: *VkMemoryBarrier, a6: u32, a7: *VkBufferMemoryBarrier, a8: u32, a9: *VkImageMemoryBarrier) -> void #c_call;

PFN_vkCmdBeginQuery :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32, a3: VkQueryControlFlags) -> void #c_call;

PFN_vkCmdEndQuery :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32) -> void #c_call;

PFN_vkCmdResetQueryPool :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32, a3: u32) -> void #c_call;

PFN_vkCmdWriteTimestamp :: #type (a0: VkCommandBuffer, a1: VkPipelineStageFlagBits, a2: VkQueryPool, a3: u32) -> void #c_call;

PFN_vkCmdCopyQueryPoolResults :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32, a3: u32, a4: VkBuffer, a5: VkDeviceSize, a6: VkDeviceSize, a7: VkQueryResultFlags) -> void #c_call;

PFN_vkCmdPushConstants :: #type (a0: VkCommandBuffer, a1: VkPipelineLayout, a2: VkShaderStageFlags, a3: u32, a4: u32, a5: *void) -> void #c_call;

PFN_vkCmdBeginRenderPass :: #type (a0: VkCommandBuffer, a1: *VkRenderPassBeginInfo, a2: VkSubpassContents) -> void #c_call;

PFN_vkCmdNextSubpass :: #type (a0: VkCommandBuffer, a1: VkSubpassContents) -> void #c_call;

PFN_vkCmdEndRenderPass :: #type (a0: VkCommandBuffer) -> void #c_call;

PFN_vkCmdExecuteCommands :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkCommandBuffer) -> void #c_call;

vkCreateInstance :: (pCreateInfo: *VkInstanceCreateInfo, pAllocator: *VkAllocationCallbacks, pInstance: *VkInstance) -> VkResult #foreign vulkan;

vkDestroyInstance :: (instance: VkInstance, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkEnumeratePhysicalDevices :: (instance: VkInstance, pPhysicalDeviceCount: *u32, pPhysicalDevices: *VkPhysicalDevice) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceFeatures :: (physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures) -> void #foreign vulkan;

vkGetPhysicalDeviceFormatProperties :: (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties) -> void #foreign vulkan;

vkGetPhysicalDeviceImageFormatProperties :: (physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: *VkImageFormatProperties) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceProperties :: (physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties) -> void #foreign vulkan;

vkGetPhysicalDeviceQueueFamilyProperties :: (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *VkQueueFamilyProperties) -> void #foreign vulkan;

vkGetPhysicalDeviceMemoryProperties :: (physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties) -> void #foreign vulkan;

vkGetInstanceProcAddr :: (instance: VkInstance, pName: *u8) -> PFN_vkVoidFunction #foreign vulkan;

vkGetDeviceProcAddr :: (device: VkDevice, pName: *u8) -> PFN_vkVoidFunction #foreign vulkan;

vkCreateDevice :: (physicalDevice: VkPhysicalDevice, pCreateInfo: *VkDeviceCreateInfo, pAllocator: *VkAllocationCallbacks, pDevice: *VkDevice) -> VkResult #foreign vulkan;

vkDestroyDevice :: (device: VkDevice, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkEnumerateInstanceExtensionProperties :: (pLayerName: *u8, pPropertyCount: *u32, pProperties: *VkExtensionProperties) -> VkResult #foreign vulkan;

vkEnumerateDeviceExtensionProperties :: (physicalDevice: VkPhysicalDevice, pLayerName: *u8, pPropertyCount: *u32, pProperties: *VkExtensionProperties) -> VkResult #foreign vulkan;

vkEnumerateInstanceLayerProperties :: (pPropertyCount: *u32, pProperties: *VkLayerProperties) -> VkResult #foreign vulkan;

vkEnumerateDeviceLayerProperties :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkLayerProperties) -> VkResult #foreign vulkan;

vkGetDeviceQueue :: (device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: *VkQueue) -> void #foreign vulkan;

vkQueueSubmit :: (queue: VkQueue, submitCount: u32, pSubmits: *VkSubmitInfo, fence: VkFence) -> VkResult #foreign vulkan;

vkQueueWaitIdle :: (queue: VkQueue) -> VkResult #foreign vulkan;

vkDeviceWaitIdle :: (device: VkDevice) -> VkResult #foreign vulkan;

vkAllocateMemory :: (device: VkDevice, pAllocateInfo: *VkMemoryAllocateInfo, pAllocator: *VkAllocationCallbacks, pMemory: *VkDeviceMemory) -> VkResult #foreign vulkan;

vkFreeMemory :: (device: VkDevice, memory: VkDeviceMemory, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkMapMemory :: (device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: **void) -> VkResult #foreign vulkan;

vkUnmapMemory :: (device: VkDevice, memory: VkDeviceMemory) -> void #foreign vulkan;

vkFlushMappedMemoryRanges :: (device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *VkMappedMemoryRange) -> VkResult #foreign vulkan;

vkInvalidateMappedMemoryRanges :: (device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *VkMappedMemoryRange) -> VkResult #foreign vulkan;

vkGetDeviceMemoryCommitment :: (device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: *VkDeviceSize) -> void #foreign vulkan;

vkBindBufferMemory :: (device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult #foreign vulkan;

vkBindImageMemory :: (device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult #foreign vulkan;

vkGetBufferMemoryRequirements :: (device: VkDevice, buffer: VkBuffer, pMemoryRequirements: *VkMemoryRequirements) -> void #foreign vulkan;

vkGetImageMemoryRequirements :: (device: VkDevice, image: VkImage, pMemoryRequirements: *VkMemoryRequirements) -> void #foreign vulkan;

vkGetImageSparseMemoryRequirements :: (device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements) -> void #foreign vulkan;

vkGetPhysicalDeviceSparseImageFormatProperties :: (physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: *u32, pProperties: *VkSparseImageFormatProperties) -> void #foreign vulkan;

vkQueueBindSparse :: (queue: VkQueue, bindInfoCount: u32, pBindInfo: *VkBindSparseInfo, fence: VkFence) -> VkResult #foreign vulkan;

vkCreateFence :: (device: VkDevice, pCreateInfo: *VkFenceCreateInfo, pAllocator: *VkAllocationCallbacks, pFence: *VkFence) -> VkResult #foreign vulkan;

vkDestroyFence :: (device: VkDevice, fence: VkFence, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkResetFences :: (device: VkDevice, fenceCount: u32, pFences: *VkFence) -> VkResult #foreign vulkan;

vkGetFenceStatus :: (device: VkDevice, fence: VkFence) -> VkResult #foreign vulkan;

vkWaitForFences :: (device: VkDevice, fenceCount: u32, pFences: *VkFence, waitAll: VkBool32, timeout: u64) -> VkResult #foreign vulkan;

vkCreateSemaphore :: (device: VkDevice, pCreateInfo: *VkSemaphoreCreateInfo, pAllocator: *VkAllocationCallbacks, pSemaphore: *VkSemaphore) -> VkResult #foreign vulkan;

vkDestroySemaphore :: (device: VkDevice, semaphore: VkSemaphore, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateEvent :: (device: VkDevice, pCreateInfo: *VkEventCreateInfo, pAllocator: *VkAllocationCallbacks, pEvent: *VkEvent) -> VkResult #foreign vulkan;

vkDestroyEvent :: (device: VkDevice, event: VkEvent, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetEventStatus :: (device: VkDevice, event: VkEvent) -> VkResult #foreign vulkan;

vkSetEvent :: (device: VkDevice, event: VkEvent) -> VkResult #foreign vulkan;

vkResetEvent :: (device: VkDevice, event: VkEvent) -> VkResult #foreign vulkan;

vkCreateQueryPool :: (device: VkDevice, pCreateInfo: *VkQueryPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pQueryPool: *VkQueryPool) -> VkResult #foreign vulkan;

vkDestroyQueryPool :: (device: VkDevice, queryPool: VkQueryPool, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetQueryPoolResults :: (device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: u64, pData: *void, stride: VkDeviceSize, flags: VkQueryResultFlags) -> VkResult #foreign vulkan;

vkCreateBuffer :: (device: VkDevice, pCreateInfo: *VkBufferCreateInfo, pAllocator: *VkAllocationCallbacks, pBuffer: *VkBuffer) -> VkResult #foreign vulkan;

vkDestroyBuffer :: (device: VkDevice, buffer: VkBuffer, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateBufferView :: (device: VkDevice, pCreateInfo: *VkBufferViewCreateInfo, pAllocator: *VkAllocationCallbacks, pView: *VkBufferView) -> VkResult #foreign vulkan;

vkDestroyBufferView :: (device: VkDevice, bufferView: VkBufferView, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateImage :: (device: VkDevice, pCreateInfo: *VkImageCreateInfo, pAllocator: *VkAllocationCallbacks, pImage: *VkImage) -> VkResult #foreign vulkan;

vkDestroyImage :: (device: VkDevice, image: VkImage, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetImageSubresourceLayout :: (device: VkDevice, image: VkImage, pSubresource: *VkImageSubresource, pLayout: *VkSubresourceLayout) -> void #foreign vulkan;

vkCreateImageView :: (device: VkDevice, pCreateInfo: *VkImageViewCreateInfo, pAllocator: *VkAllocationCallbacks, pView: *VkImageView) -> VkResult #foreign vulkan;

vkDestroyImageView :: (device: VkDevice, imageView: VkImageView, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateShaderModule :: (device: VkDevice, pCreateInfo: *VkShaderModuleCreateInfo, pAllocator: *VkAllocationCallbacks, pShaderModule: *VkShaderModule) -> VkResult #foreign vulkan;

vkDestroyShaderModule :: (device: VkDevice, shaderModule: VkShaderModule, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreatePipelineCache :: (device: VkDevice, pCreateInfo: *VkPipelineCacheCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelineCache: *VkPipelineCache) -> VkResult #foreign vulkan;

vkDestroyPipelineCache :: (device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetPipelineCacheData :: (device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: *u64, pData: *void) -> VkResult #foreign vulkan;

vkMergePipelineCaches :: (device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: *VkPipelineCache) -> VkResult #foreign vulkan;

vkCreateGraphicsPipelines :: (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *VkGraphicsPipelineCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline) -> VkResult #foreign vulkan;

vkCreateComputePipelines :: (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *VkComputePipelineCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline) -> VkResult #foreign vulkan;

vkDestroyPipeline :: (device: VkDevice, pipeline: VkPipeline, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreatePipelineLayout :: (device: VkDevice, pCreateInfo: *VkPipelineLayoutCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelineLayout: *VkPipelineLayout) -> VkResult #foreign vulkan;

vkDestroyPipelineLayout :: (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateSampler :: (device: VkDevice, pCreateInfo: *VkSamplerCreateInfo, pAllocator: *VkAllocationCallbacks, pSampler: *VkSampler) -> VkResult #foreign vulkan;

vkDestroySampler :: (device: VkDevice, sampler: VkSampler, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateDescriptorSetLayout :: (device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pAllocator: *VkAllocationCallbacks, pSetLayout: *VkDescriptorSetLayout) -> VkResult #foreign vulkan;

vkDestroyDescriptorSetLayout :: (device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateDescriptorPool :: (device: VkDevice, pCreateInfo: *VkDescriptorPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorPool: *VkDescriptorPool) -> VkResult #foreign vulkan;

vkDestroyDescriptorPool :: (device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkResetDescriptorPool :: (device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) -> VkResult #foreign vulkan;

vkAllocateDescriptorSets :: (device: VkDevice, pAllocateInfo: *VkDescriptorSetAllocateInfo, pDescriptorSets: *VkDescriptorSet) -> VkResult #foreign vulkan;

vkFreeDescriptorSets :: (device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: *VkDescriptorSet) -> VkResult #foreign vulkan;

vkUpdateDescriptorSets :: (device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: *VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *VkCopyDescriptorSet) -> void #foreign vulkan;

vkCreateFramebuffer :: (device: VkDevice, pCreateInfo: *VkFramebufferCreateInfo, pAllocator: *VkAllocationCallbacks, pFramebuffer: *VkFramebuffer) -> VkResult #foreign vulkan;

vkDestroyFramebuffer :: (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateRenderPass :: (device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass) -> VkResult #foreign vulkan;

vkDestroyRenderPass :: (device: VkDevice, renderPass: VkRenderPass, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetRenderAreaGranularity :: (device: VkDevice, renderPass: VkRenderPass, pGranularity: *VkExtent2D) -> void #foreign vulkan;

vkCreateCommandPool :: (device: VkDevice, pCreateInfo: *VkCommandPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pCommandPool: *VkCommandPool) -> VkResult #foreign vulkan;

vkDestroyCommandPool :: (device: VkDevice, commandPool: VkCommandPool, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkResetCommandPool :: (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) -> VkResult #foreign vulkan;

vkAllocateCommandBuffers :: (device: VkDevice, pAllocateInfo: *VkCommandBufferAllocateInfo, pCommandBuffers: *VkCommandBuffer) -> VkResult #foreign vulkan;

vkFreeCommandBuffers :: (device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: *VkCommandBuffer) -> void #foreign vulkan;

vkBeginCommandBuffer :: (commandBuffer: VkCommandBuffer, pBeginInfo: *VkCommandBufferBeginInfo) -> VkResult #foreign vulkan;

vkEndCommandBuffer :: (commandBuffer: VkCommandBuffer) -> VkResult #foreign vulkan;

vkResetCommandBuffer :: (commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) -> VkResult #foreign vulkan;

vkCmdBindPipeline :: (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) -> void #foreign vulkan;

vkCmdSetViewport :: (commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *VkViewport) -> void #foreign vulkan;

vkCmdSetScissor :: (commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *VkRect2D) -> void #foreign vulkan;

vkCmdSetLineWidth :: (commandBuffer: VkCommandBuffer, lineWidth: float32) -> void #foreign vulkan;

vkCmdSetDepthBias :: (commandBuffer: VkCommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32) -> void #foreign vulkan;

vkCmdSetBlendConstants :: (commandBuffer: VkCommandBuffer, blendConstants: *[4] float32) -> void #foreign vulkan;

vkCmdSetDepthBounds :: (commandBuffer: VkCommandBuffer, minDepthBounds: float32, maxDepthBounds: float32) -> void #foreign vulkan;

vkCmdSetStencilCompareMask :: (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) -> void #foreign vulkan;

vkCmdSetStencilWriteMask :: (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) -> void #foreign vulkan;

vkCmdSetStencilReference :: (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) -> void #foreign vulkan;

vkCmdBindDescriptorSets :: (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *u32) -> void #foreign vulkan;

vkCmdBindIndexBuffer :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) -> void #foreign vulkan;

vkCmdBindVertexBuffers :: (commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize) -> void #foreign vulkan;

vkCmdDraw :: (commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> void #foreign vulkan;

vkCmdDrawIndexed :: (commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: s32, firstInstance: u32) -> void #foreign vulkan;

vkCmdDrawIndirect :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> void #foreign vulkan;

vkCmdDrawIndexedIndirect :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> void #foreign vulkan;

vkCmdDispatch :: (commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #foreign vulkan;

vkCmdDispatchIndirect :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) -> void #foreign vulkan;

vkCmdCopyBuffer :: (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: *VkBufferCopy) -> void #foreign vulkan;

vkCmdCopyImage :: (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *VkImageCopy) -> void #foreign vulkan;

vkCmdBlitImage :: (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *VkImageBlit, filter: VkFilter) -> void #foreign vulkan;

vkCmdCopyBufferToImage :: (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *VkBufferImageCopy) -> void #foreign vulkan;

vkCmdCopyImageToBuffer :: (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: *VkBufferImageCopy) -> void #foreign vulkan;

vkCmdUpdateBuffer :: (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: *void) -> void #foreign vulkan;

vkCmdFillBuffer :: (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) -> void #foreign vulkan;

vkCmdClearColorImage :: (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: *VkClearColorValue, rangeCount: u32, pRanges: *VkImageSubresourceRange) -> void #foreign vulkan;

vkCmdClearDepthStencilImage :: (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: *VkClearDepthStencilValue, rangeCount: u32, pRanges: *VkImageSubresourceRange) -> void #foreign vulkan;

vkCmdClearAttachments :: (commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: *VkClearAttachment, rectCount: u32, pRects: *VkClearRect) -> void #foreign vulkan;

vkCmdResolveImage :: (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *VkImageResolve) -> void #foreign vulkan;

vkCmdSetEvent :: (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> void #foreign vulkan;

vkCmdResetEvent :: (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> void #foreign vulkan;

vkCmdWaitEvents :: (commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: *VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *VkImageMemoryBarrier) -> void #foreign vulkan;

vkCmdPipelineBarrier :: (commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *VkImageMemoryBarrier) -> void #foreign vulkan;

vkCmdBeginQuery :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) -> void #foreign vulkan;

vkCmdEndQuery :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) -> void #foreign vulkan;

vkCmdResetQueryPool :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> void #foreign vulkan;

vkCmdWriteTimestamp :: (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) -> void #foreign vulkan;

vkCmdCopyQueryPoolResults :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) -> void #foreign vulkan;

vkCmdPushConstants :: (commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: *void) -> void #foreign vulkan;

vkCmdBeginRenderPass :: (commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, contents: VkSubpassContents) -> void #foreign vulkan;

vkCmdNextSubpass :: (commandBuffer: VkCommandBuffer, contents: VkSubpassContents) -> void #foreign vulkan;

vkCmdEndRenderPass :: (commandBuffer: VkCommandBuffer) -> void #foreign vulkan;

vkCmdExecuteCommands :: (commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: *VkCommandBuffer) -> void #foreign vulkan;

VkSamplerYcbcrConversion_T :: struct {
}

VkSamplerYcbcrConversion :: *VkSamplerYcbcrConversion_T;

VkDescriptorUpdateTemplate_T :: struct {
}

VkDescriptorUpdateTemplate :: *VkDescriptorUpdateTemplate_T;

using VkPointClippingBehavior :: enum u32 {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES :: 0;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY :: 1;
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR :: 0;
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR :: 1;
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM :: 2147483647;
}

using VkTessellationDomainOrigin :: enum u32 {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT :: 0;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT :: 1;
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR :: 0;
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR :: 1;
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM :: 2147483647;
}

using VkSamplerYcbcrModelConversion :: enum u32 {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY :: 0;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY :: 1;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 :: 2;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 :: 3;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 :: 4;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR :: 0;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR :: 1;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR :: 2;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR :: 3;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR :: 4;
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM :: 2147483647;
}

using VkSamplerYcbcrRange :: enum u32 {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL :: 0;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW :: 1;
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR :: 0;
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR :: 1;
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM :: 2147483647;
}

using VkChromaLocation :: enum u32 {
    VK_CHROMA_LOCATION_COSITED_EVEN :: 0;
    VK_CHROMA_LOCATION_MIDPOINT :: 1;
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR :: 0;
    VK_CHROMA_LOCATION_MIDPOINT_KHR :: 1;
    VK_CHROMA_LOCATION_MAX_ENUM :: 2147483647;
}

using VkDescriptorUpdateTemplateType :: enum u32 {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET :: 0;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR :: 1;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR :: 0;
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM :: 2147483647;
}

using VkSubgroupFeatureFlagBits :: enum_flags u32 {
    VK_SUBGROUP_FEATURE_BASIC_BIT :: 1;
    VK_SUBGROUP_FEATURE_VOTE_BIT :: 2;
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT :: 4;
    VK_SUBGROUP_FEATURE_BALLOT_BIT :: 8;
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT :: 16;
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT :: 32;
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT :: 64;
    VK_SUBGROUP_FEATURE_QUAD_BIT :: 128;
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV :: 256;
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSubgroupFeatureFlags :: VkSubgroupFeatureFlagBits;

using VkPeerMemoryFeatureFlagBits :: enum_flags u32 {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT :: 1;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT :: 2;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT :: 4;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT :: 8;
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR :: 1;
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR :: 2;
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR :: 4;
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR :: 8;
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkPeerMemoryFeatureFlags :: VkPeerMemoryFeatureFlagBits;

using VkMemoryAllocateFlagBits :: enum_flags u32 {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT :: 1;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT :: 2;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT :: 4;
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR :: 1;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR :: 2;
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR :: 4;
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkMemoryAllocateFlags :: VkMemoryAllocateFlagBits;

VkCommandPoolTrimFlags :: VkFlags;

VkDescriptorUpdateTemplateCreateFlags :: VkFlags;

using VkExternalMemoryHandleTypeFlagBits :: enum_flags u32 {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT :: 1;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT :: 2;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT :: 4;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT :: 8;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT :: 16;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT :: 32;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT :: 64;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT :: 512;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID :: 1024;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT :: 128;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT :: 256;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA :: 2048;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV :: 4096;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR :: 1;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR :: 2;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR :: 4;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR :: 8;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR :: 16;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR :: 32;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR :: 64;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalMemoryHandleTypeFlags :: VkExternalMemoryHandleTypeFlagBits;

using VkExternalMemoryFeatureFlagBits :: enum_flags u32 {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT :: 1;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT :: 2;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT :: 4;
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR :: 1;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR :: 2;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR :: 4;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalMemoryFeatureFlags :: VkExternalMemoryFeatureFlagBits;

using VkExternalFenceHandleTypeFlagBits :: enum_flags u32 {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT :: 1;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT :: 2;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT :: 4;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT :: 8;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR :: 1;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR :: 2;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR :: 4;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR :: 8;
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalFenceHandleTypeFlags :: VkExternalFenceHandleTypeFlagBits;

using VkExternalFenceFeatureFlagBits :: enum_flags u32 {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT :: 1;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT :: 2;
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR :: 1;
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR :: 2;
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalFenceFeatureFlags :: VkExternalFenceFeatureFlagBits;

using VkFenceImportFlagBits :: enum_flags u32 {
    VK_FENCE_IMPORT_TEMPORARY_BIT :: 1;
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR :: 1;
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkFenceImportFlags :: VkFenceImportFlagBits;

using VkSemaphoreImportFlagBits :: enum_flags u32 {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT :: 1;
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR :: 1;
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSemaphoreImportFlags :: VkSemaphoreImportFlagBits;

using VkExternalSemaphoreHandleTypeFlagBits :: enum_flags u32 {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT :: 1;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT :: 2;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT :: 4;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT :: 8;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT :: 16;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA :: 128;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT :: 8;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR :: 1;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR :: 2;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR :: 4;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR :: 8;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR :: 16;
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalSemaphoreHandleTypeFlags :: VkExternalSemaphoreHandleTypeFlagBits;

using VkExternalSemaphoreFeatureFlagBits :: enum_flags u32 {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT :: 1;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT :: 2;
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR :: 1;
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR :: 2;
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkExternalSemaphoreFeatureFlags :: VkExternalSemaphoreFeatureFlagBits;

VkPhysicalDeviceSubgroupProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    pNext: *void;
    subgroupSize: u32;
    supportedStages: VkShaderStageFlags;
    supportedOperations: VkSubgroupFeatureFlags;
    quadOperationsInAllStages: VkBool32;
}

VkBindBufferMemoryInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    pNext: *void;
    buffer: VkBuffer;
    memory: VkDeviceMemory;
    memoryOffset: VkDeviceSize;
}

VkBindImageMemoryInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    pNext: *void;
    image: VkImage;
    memory: VkDeviceMemory;
    memoryOffset: VkDeviceSize;
}

VkPhysicalDevice16BitStorageFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    pNext: *void;
    storageBuffer16BitAccess: VkBool32;
    uniformAndStorageBuffer16BitAccess: VkBool32;
    storagePushConstant16: VkBool32;
    storageInputOutput16: VkBool32;
}

VkMemoryDedicatedRequirements :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    pNext: *void;
    prefersDedicatedAllocation: VkBool32;
    requiresDedicatedAllocation: VkBool32;
}

VkMemoryDedicatedAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    pNext: *void;
    image: VkImage;
    buffer: VkBuffer;
}

VkMemoryAllocateFlagsInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    pNext: *void;
    flags: VkMemoryAllocateFlags;
    deviceMask: u32;
}

VkDeviceGroupRenderPassBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    pNext: *void;
    deviceMask: u32;
    deviceRenderAreaCount: u32;
    pDeviceRenderAreas: *VkRect2D;
}

VkDeviceGroupCommandBufferBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    pNext: *void;
    deviceMask: u32;
}

VkDeviceGroupSubmitInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    pNext: *void;
    waitSemaphoreCount: u32;
    pWaitSemaphoreDeviceIndices: *u32;
    commandBufferCount: u32;
    pCommandBufferDeviceMasks: *u32;
    signalSemaphoreCount: u32;
    pSignalSemaphoreDeviceIndices: *u32;
}

VkDeviceGroupBindSparseInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    pNext: *void;
    resourceDeviceIndex: u32;
    memoryDeviceIndex: u32;
}

VkBindBufferMemoryDeviceGroupInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    pNext: *void;
    deviceIndexCount: u32;
    pDeviceIndices: *u32;
}

VkBindImageMemoryDeviceGroupInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    pNext: *void;
    deviceIndexCount: u32;
    pDeviceIndices: *u32;
    splitInstanceBindRegionCount: u32;
    pSplitInstanceBindRegions: *VkRect2D;
}

VkPhysicalDeviceGroupProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    pNext: *void;
    physicalDeviceCount: u32;
    physicalDevices: [32] VkPhysicalDevice;
    subsetAllocation: VkBool32;
}

VkDeviceGroupDeviceCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    pNext: *void;
    physicalDeviceCount: u32;
    pPhysicalDevices: *VkPhysicalDevice;
}

VkBufferMemoryRequirementsInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    pNext: *void;
    buffer: VkBuffer;
}

VkImageMemoryRequirementsInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: *void;
    image: VkImage;
}

VkImageSparseMemoryRequirementsInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    pNext: *void;
    image: VkImage;
}

VkMemoryRequirements2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    pNext: *void;
    memoryRequirements: VkMemoryRequirements;
}

VkSparseImageMemoryRequirements2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    pNext: *void;
    memoryRequirements: VkSparseImageMemoryRequirements;
}

VkPhysicalDeviceFeatures2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    pNext: *void;
    features: VkPhysicalDeviceFeatures;
}

VkPhysicalDeviceProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    pNext: *void;
    properties: VkPhysicalDeviceProperties;
}

VkFormatProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    pNext: *void;
    formatProperties: VkFormatProperties;
}

VkImageFormatProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    pNext: *void;
    imageFormatProperties: VkImageFormatProperties;
}

VkPhysicalDeviceImageFormatInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    pNext: *void;
    format: VkFormat;
    type: VkImageType;
    tiling: VkImageTiling;
    usage: VkImageUsageFlags;
    flags: VkImageCreateFlags;
}

VkQueueFamilyProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    pNext: *void;
    queueFamilyProperties: VkQueueFamilyProperties;
}

VkPhysicalDeviceMemoryProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    pNext: *void;
    memoryProperties: VkPhysicalDeviceMemoryProperties;
}

VkSparseImageFormatProperties2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    pNext: *void;
    properties: VkSparseImageFormatProperties;
}

VkPhysicalDeviceSparseImageFormatInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    pNext: *void;
    format: VkFormat;
    type: VkImageType;
    samples: VkSampleCountFlagBits;
    usage: VkImageUsageFlags;
    tiling: VkImageTiling;
}

VkPhysicalDevicePointClippingProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    pNext: *void;
    pointClippingBehavior: VkPointClippingBehavior;
}

VkInputAttachmentAspectReference :: struct {
    subpass: u32;
    inputAttachmentIndex: u32;
    aspectMask: VkImageAspectFlags;
}

VkRenderPassInputAttachmentAspectCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    pNext: *void;
    aspectReferenceCount: u32;
    pAspectReferences: *VkInputAttachmentAspectReference;
}

VkImageViewUsageCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    pNext: *void;
    usage: VkImageUsageFlags;
}

VkPipelineTessellationDomainOriginStateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    pNext: *void;
    domainOrigin: VkTessellationDomainOrigin;
}

VkRenderPassMultiviewCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    pNext: *void;
    subpassCount: u32;
    pViewMasks: *u32;
    dependencyCount: u32;
    pViewOffsets: *s32;
    correlationMaskCount: u32;
    pCorrelationMasks: *u32;
}

VkPhysicalDeviceMultiviewFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    pNext: *void;
    multiview: VkBool32;
    multiviewGeometryShader: VkBool32;
    multiviewTessellationShader: VkBool32;
}

VkPhysicalDeviceMultiviewProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    pNext: *void;
    maxMultiviewViewCount: u32;
    maxMultiviewInstanceIndex: u32;
}

VkPhysicalDeviceVariablePointersFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    pNext: *void;
    variablePointersStorageBuffer: VkBool32;
    variablePointers: VkBool32;
}

VkPhysicalDeviceVariablePointerFeatures :: VkPhysicalDeviceVariablePointersFeatures;

VkPhysicalDeviceProtectedMemoryFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    pNext: *void;
    protectedMemory: VkBool32;
}

VkPhysicalDeviceProtectedMemoryProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    pNext: *void;
    protectedNoFault: VkBool32;
}

VkDeviceQueueInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    pNext: *void;
    flags: VkDeviceQueueCreateFlags;
    queueFamilyIndex: u32;
    queueIndex: u32;
}

VkProtectedSubmitInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    pNext: *void;
    protectedSubmit: VkBool32;
}

VkSamplerYcbcrConversionCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    pNext: *void;
    format: VkFormat;
    ycbcrModel: VkSamplerYcbcrModelConversion;
    ycbcrRange: VkSamplerYcbcrRange;
    components: VkComponentMapping;
    xChromaOffset: VkChromaLocation;
    yChromaOffset: VkChromaLocation;
    chromaFilter: VkFilter;
    forceExplicitReconstruction: VkBool32;
}

VkSamplerYcbcrConversionInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    pNext: *void;
    conversion: VkSamplerYcbcrConversion;
}

VkBindImagePlaneMemoryInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    pNext: *void;
    planeAspect: VkImageAspectFlagBits;
}

VkImagePlaneMemoryRequirementsInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    pNext: *void;
    planeAspect: VkImageAspectFlagBits;
}

VkPhysicalDeviceSamplerYcbcrConversionFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    pNext: *void;
    samplerYcbcrConversion: VkBool32;
}

VkSamplerYcbcrConversionImageFormatProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    pNext: *void;
    combinedImageSamplerDescriptorCount: u32;
}

VkDescriptorUpdateTemplateEntry :: struct {
    dstBinding: u32;
    dstArrayElement: u32;
    descriptorCount: u32;
    descriptorType: VkDescriptorType;
    offset: u64;
    stride: u64;
}

VkDescriptorUpdateTemplateCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    pNext: *void;
    flags: VkDescriptorUpdateTemplateCreateFlags;
    descriptorUpdateEntryCount: u32;
    pDescriptorUpdateEntries: *VkDescriptorUpdateTemplateEntry;
    templateType: VkDescriptorUpdateTemplateType;
    descriptorSetLayout: VkDescriptorSetLayout;
    pipelineBindPoint: VkPipelineBindPoint;
    pipelineLayout: VkPipelineLayout;
    set: u32;
}

VkExternalMemoryProperties :: struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags;
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags;
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags;
}

VkPhysicalDeviceExternalImageFormatInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    pNext: *void;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

VkExternalImageFormatProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    pNext: *void;
    externalMemoryProperties: VkExternalMemoryProperties;
}

VkPhysicalDeviceExternalBufferInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    pNext: *void;
    flags: VkBufferCreateFlags;
    usage: VkBufferUsageFlags;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

VkExternalBufferProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    pNext: *void;
    externalMemoryProperties: VkExternalMemoryProperties;
}

VkPhysicalDeviceIDProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    pNext: *void;
    deviceUUID: [16] u8;
    driverUUID: [16] u8;
    deviceLUID: [8] u8;
    deviceNodeMask: u32;
    deviceLUIDValid: VkBool32;
}

VkExternalMemoryImageCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    pNext: *void;
    handleTypes: VkExternalMemoryHandleTypeFlags;
}

VkExternalMemoryBufferCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    pNext: *void;
    handleTypes: VkExternalMemoryHandleTypeFlags;
}

VkExportMemoryAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    pNext: *void;
    handleTypes: VkExternalMemoryHandleTypeFlags;
}

VkPhysicalDeviceExternalFenceInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    pNext: *void;
    handleType: VkExternalFenceHandleTypeFlagBits;
}

VkExternalFenceProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    pNext: *void;
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags;
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags;
    externalFenceFeatures: VkExternalFenceFeatureFlags;
}

VkExportFenceCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    pNext: *void;
    handleTypes: VkExternalFenceHandleTypeFlags;
}

VkExportSemaphoreCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    pNext: *void;
    handleTypes: VkExternalSemaphoreHandleTypeFlags;
}

VkPhysicalDeviceExternalSemaphoreInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    pNext: *void;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

VkExternalSemaphoreProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    pNext: *void;
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags;
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags;
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags;
}

VkPhysicalDeviceMaintenance3Properties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    pNext: *void;
    maxPerSetDescriptors: u32;
    maxMemoryAllocationSize: VkDeviceSize;
}

VkDescriptorSetLayoutSupport :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    pNext: *void;
    supported: VkBool32;
}

VkPhysicalDeviceShaderDrawParametersFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    pNext: *void;
    shaderDrawParameters: VkBool32;
}

VkPhysicalDeviceShaderDrawParameterFeatures :: VkPhysicalDeviceShaderDrawParametersFeatures;

PFN_vkEnumerateInstanceVersion :: #type (a0: *u32) -> VkResult #c_call;

PFN_vkBindBufferMemory2 :: #type (a0: VkDevice, a1: u32, a2: *VkBindBufferMemoryInfo) -> VkResult #c_call;

PFN_vkBindImageMemory2 :: #type (a0: VkDevice, a1: u32, a2: *VkBindImageMemoryInfo) -> VkResult #c_call;

PFN_vkGetDeviceGroupPeerMemoryFeatures :: #type (a0: VkDevice, a1: u32, a2: u32, a3: u32, a4: *VkPeerMemoryFeatureFlags) -> void #c_call;

PFN_vkCmdSetDeviceMask :: #type (a0: VkCommandBuffer, a1: u32) -> void #c_call;

PFN_vkCmdDispatchBase :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: u32, a4: u32, a5: u32, a6: u32) -> void #c_call;

PFN_vkEnumeratePhysicalDeviceGroups :: #type (a0: VkInstance, a1: *u32, a2: *VkPhysicalDeviceGroupProperties) -> VkResult #c_call;

PFN_vkGetImageMemoryRequirements2 :: #type (a0: VkDevice, a1: *VkImageMemoryRequirementsInfo2, a2: *VkMemoryRequirements2) -> void #c_call;

PFN_vkGetBufferMemoryRequirements2 :: #type (a0: VkDevice, a1: *VkBufferMemoryRequirementsInfo2, a2: *VkMemoryRequirements2) -> void #c_call;

PFN_vkGetImageSparseMemoryRequirements2 :: #type (a0: VkDevice, a1: *VkImageSparseMemoryRequirementsInfo2, a2: *u32, a3: *VkSparseImageMemoryRequirements2) -> void #c_call;

PFN_vkGetPhysicalDeviceFeatures2 :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceFeatures2) -> void #c_call;

PFN_vkGetPhysicalDeviceProperties2 :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceFormatProperties2 :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: *VkFormatProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceImageFormatProperties2 :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceImageFormatInfo2, a2: *VkImageFormatProperties2) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceQueueFamilyProperties2 :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkQueueFamilyProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceMemoryProperties2 :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceMemoryProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceSparseImageFormatInfo2, a2: *u32, a3: *VkSparseImageFormatProperties2) -> void #c_call;

PFN_vkTrimCommandPool :: #type (a0: VkDevice, a1: VkCommandPool, a2: VkCommandPoolTrimFlags) -> void #c_call;

PFN_vkGetDeviceQueue2 :: #type (a0: VkDevice, a1: *VkDeviceQueueInfo2, a2: *VkQueue) -> void #c_call;

PFN_vkCreateSamplerYcbcrConversion :: #type (a0: VkDevice, a1: *VkSamplerYcbcrConversionCreateInfo, a2: *VkAllocationCallbacks, a3: *VkSamplerYcbcrConversion) -> VkResult #c_call;

PFN_vkDestroySamplerYcbcrConversion :: #type (a0: VkDevice, a1: VkSamplerYcbcrConversion, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCreateDescriptorUpdateTemplate :: #type (a0: VkDevice, a1: *VkDescriptorUpdateTemplateCreateInfo, a2: *VkAllocationCallbacks, a3: *VkDescriptorUpdateTemplate) -> VkResult #c_call;

PFN_vkDestroyDescriptorUpdateTemplate :: #type (a0: VkDevice, a1: VkDescriptorUpdateTemplate, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkUpdateDescriptorSetWithTemplate :: #type (a0: VkDevice, a1: VkDescriptorSet, a2: VkDescriptorUpdateTemplate, a3: *void) -> void #c_call;

PFN_vkGetPhysicalDeviceExternalBufferProperties :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalBufferInfo, a2: *VkExternalBufferProperties) -> void #c_call;

PFN_vkGetPhysicalDeviceExternalFenceProperties :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalFenceInfo, a2: *VkExternalFenceProperties) -> void #c_call;

PFN_vkGetPhysicalDeviceExternalSemaphoreProperties :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalSemaphoreInfo, a2: *VkExternalSemaphoreProperties) -> void #c_call;

PFN_vkGetDescriptorSetLayoutSupport :: #type (a0: VkDevice, a1: *VkDescriptorSetLayoutCreateInfo, a2: *VkDescriptorSetLayoutSupport) -> void #c_call;

vkEnumerateInstanceVersion :: (pApiVersion: *u32) -> VkResult #foreign vulkan;

vkBindBufferMemory2 :: (device: VkDevice, bindInfoCount: u32, pBindInfos: *VkBindBufferMemoryInfo) -> VkResult #foreign vulkan;

vkBindImageMemory2 :: (device: VkDevice, bindInfoCount: u32, pBindInfos: *VkBindImageMemoryInfo) -> VkResult #foreign vulkan;

vkGetDeviceGroupPeerMemoryFeatures :: (device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *VkPeerMemoryFeatureFlags) -> void #foreign vulkan;

vkCmdSetDeviceMask :: (commandBuffer: VkCommandBuffer, deviceMask: u32) -> void #foreign vulkan;

vkCmdDispatchBase :: (commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #foreign vulkan;

vkEnumeratePhysicalDeviceGroups :: (instance: VkInstance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *VkPhysicalDeviceGroupProperties) -> VkResult #foreign vulkan;

vkGetImageMemoryRequirements2 :: (device: VkDevice, pInfo: *VkImageMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2) -> void #foreign vulkan;

vkGetBufferMemoryRequirements2 :: (device: VkDevice, pInfo: *VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2) -> void #foreign vulkan;

vkGetImageSparseMemoryRequirements2 :: (device: VkDevice, pInfo: *VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2) -> void #foreign vulkan;

vkGetPhysicalDeviceFeatures2 :: (physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures2) -> void #foreign vulkan;

vkGetPhysicalDeviceProperties2 :: (physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties2) -> void #foreign vulkan;

vkGetPhysicalDeviceFormatProperties2 :: (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties2) -> void #foreign vulkan;

vkGetPhysicalDeviceImageFormatProperties2 :: (physicalDevice: VkPhysicalDevice, pImageFormatInfo: *VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *VkImageFormatProperties2) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceQueueFamilyProperties2 :: (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *VkQueueFamilyProperties2) -> void #foreign vulkan;

vkGetPhysicalDeviceMemoryProperties2 :: (physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties2) -> void #foreign vulkan;

vkGetPhysicalDeviceSparseImageFormatProperties2 :: (physicalDevice: VkPhysicalDevice, pFormatInfo: *VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *VkSparseImageFormatProperties2) -> void #foreign vulkan;

vkTrimCommandPool :: (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) -> void #foreign vulkan;

vkGetDeviceQueue2 :: (device: VkDevice, pQueueInfo: *VkDeviceQueueInfo2, pQueue: *VkQueue) -> void #foreign vulkan;

vkCreateSamplerYcbcrConversion :: (device: VkDevice, pCreateInfo: *VkSamplerYcbcrConversionCreateInfo, pAllocator: *VkAllocationCallbacks, pYcbcrConversion: *VkSamplerYcbcrConversion) -> VkResult #foreign vulkan;

vkDestroySamplerYcbcrConversion :: (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkCreateDescriptorUpdateTemplate :: (device: VkDevice, pCreateInfo: *VkDescriptorUpdateTemplateCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorUpdateTemplate: *VkDescriptorUpdateTemplate) -> VkResult #foreign vulkan;

vkDestroyDescriptorUpdateTemplate :: (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkUpdateDescriptorSetWithTemplate :: (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *void) -> void #foreign vulkan;

vkGetPhysicalDeviceExternalBufferProperties :: (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *VkExternalBufferProperties) -> void #foreign vulkan;

vkGetPhysicalDeviceExternalFenceProperties :: (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *VkExternalFenceProperties) -> void #foreign vulkan;

vkGetPhysicalDeviceExternalSemaphoreProperties :: (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *VkExternalSemaphoreProperties) -> void #foreign vulkan;

vkGetDescriptorSetLayoutSupport :: (device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pSupport: *VkDescriptorSetLayoutSupport) -> void #foreign vulkan;

using VkDriverId :: enum u32 {
    VK_DRIVER_ID_AMD_PROPRIETARY :: 1;
    VK_DRIVER_ID_AMD_OPEN_SOURCE :: 2;
    VK_DRIVER_ID_MESA_RADV :: 3;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY :: 4;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS :: 5;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA :: 6;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY :: 7;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY :: 8;
    VK_DRIVER_ID_ARM_PROPRIETARY :: 9;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER :: 10;
    VK_DRIVER_ID_GGP_PROPRIETARY :: 11;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY :: 12;
    VK_DRIVER_ID_MESA_LLVMPIPE :: 13;
    VK_DRIVER_ID_MOLTENVK :: 14;
    VK_DRIVER_ID_COREAVI_PROPRIETARY :: 15;
    VK_DRIVER_ID_JUICE_PROPRIETARY :: 16;
    VK_DRIVER_ID_VERISILICON_PROPRIETARY :: 17;
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR :: 1;
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR :: 2;
    VK_DRIVER_ID_MESA_RADV_KHR :: 3;
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR :: 4;
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR :: 5;
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR :: 6;
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR :: 7;
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR :: 8;
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR :: 9;
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR :: 10;
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR :: 11;
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR :: 12;
    VK_DRIVER_ID_MAX_ENUM :: 2147483647;
}

using VkShaderFloatControlsIndependence :: enum u32 {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY :: 0;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL :: 1;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE :: 2;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR :: 0;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR :: 1;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR :: 2;
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM :: 2147483647;
}

using VkSamplerReductionMode :: enum u32 {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE :: 0;
    VK_SAMPLER_REDUCTION_MODE_MIN :: 1;
    VK_SAMPLER_REDUCTION_MODE_MAX :: 2;
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT :: 0;
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT :: 1;
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT :: 2;
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM :: 2147483647;
}

using VkSemaphoreType :: enum u32 {
    VK_SEMAPHORE_TYPE_BINARY :: 0;
    VK_SEMAPHORE_TYPE_TIMELINE :: 1;
    VK_SEMAPHORE_TYPE_BINARY_KHR :: 0;
    VK_SEMAPHORE_TYPE_TIMELINE_KHR :: 1;
    VK_SEMAPHORE_TYPE_MAX_ENUM :: 2147483647;
}

using VkResolveModeFlagBits :: enum_flags u32 {
    VK_RESOLVE_MODE_NONE :: 0;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT :: 1;
    VK_RESOLVE_MODE_AVERAGE_BIT :: 2;
    VK_RESOLVE_MODE_MIN_BIT :: 4;
    VK_RESOLVE_MODE_MAX_BIT :: 8;
    VK_RESOLVE_MODE_NONE_KHR :: 0;
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR :: 1;
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR :: 2;
    VK_RESOLVE_MODE_MIN_BIT_KHR :: 4;
    VK_RESOLVE_MODE_MAX_BIT_KHR :: 8;
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkResolveModeFlags :: VkResolveModeFlagBits;

using VkDescriptorBindingFlagBits :: enum_flags u32 {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT :: 1;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT :: 2;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT :: 4;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT :: 8;
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT :: 1;
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT :: 2;
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT :: 4;
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT :: 8;
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkDescriptorBindingFlags :: VkDescriptorBindingFlagBits;

using VkSemaphoreWaitFlagBits :: enum_flags u32 {
    VK_SEMAPHORE_WAIT_ANY_BIT :: 1;
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR :: 1;
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM :: 2147483647;
}

VkSemaphoreWaitFlags :: VkSemaphoreWaitFlagBits;

VkPhysicalDeviceVulkan11Features :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    pNext: *void;
    storageBuffer16BitAccess: VkBool32;
    uniformAndStorageBuffer16BitAccess: VkBool32;
    storagePushConstant16: VkBool32;
    storageInputOutput16: VkBool32;
    multiview: VkBool32;
    multiviewGeometryShader: VkBool32;
    multiviewTessellationShader: VkBool32;
    variablePointersStorageBuffer: VkBool32;
    variablePointers: VkBool32;
    protectedMemory: VkBool32;
    samplerYcbcrConversion: VkBool32;
    shaderDrawParameters: VkBool32;
}

VkPhysicalDeviceVulkan11Properties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    pNext: *void;
    deviceUUID: [16] u8;
    driverUUID: [16] u8;
    deviceLUID: [8] u8;
    deviceNodeMask: u32;
    deviceLUIDValid: VkBool32;
    subgroupSize: u32;
    subgroupSupportedStages: VkShaderStageFlags;
    subgroupSupportedOperations: VkSubgroupFeatureFlags;
    subgroupQuadOperationsInAllStages: VkBool32;
    pointClippingBehavior: VkPointClippingBehavior;
    maxMultiviewViewCount: u32;
    maxMultiviewInstanceIndex: u32;
    protectedNoFault: VkBool32;
    maxPerSetDescriptors: u32;
    maxMemoryAllocationSize: VkDeviceSize;
}

VkPhysicalDeviceVulkan12Features :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    pNext: *void;
    samplerMirrorClampToEdge: VkBool32;
    drawIndirectCount: VkBool32;
    storageBuffer8BitAccess: VkBool32;
    uniformAndStorageBuffer8BitAccess: VkBool32;
    storagePushConstant8: VkBool32;
    shaderBufferInt64Atomics: VkBool32;
    shaderSharedInt64Atomics: VkBool32;
    shaderFloat16: VkBool32;
    shaderInt8: VkBool32;
    descriptorIndexing: VkBool32;
    shaderInputAttachmentArrayDynamicIndexing: VkBool32;
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32;
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32;
    shaderUniformBufferArrayNonUniformIndexing: VkBool32;
    shaderSampledImageArrayNonUniformIndexing: VkBool32;
    shaderStorageBufferArrayNonUniformIndexing: VkBool32;
    shaderStorageImageArrayNonUniformIndexing: VkBool32;
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32;
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32;
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32;
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32;
    descriptorBindingSampledImageUpdateAfterBind: VkBool32;
    descriptorBindingStorageImageUpdateAfterBind: VkBool32;
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32;
    descriptorBindingUpdateUnusedWhilePending: VkBool32;
    descriptorBindingPartiallyBound: VkBool32;
    descriptorBindingVariableDescriptorCount: VkBool32;
    runtimeDescriptorArray: VkBool32;
    samplerFilterMinmax: VkBool32;
    scalarBlockLayout: VkBool32;
    imagelessFramebuffer: VkBool32;
    uniformBufferStandardLayout: VkBool32;
    shaderSubgroupExtendedTypes: VkBool32;
    separateDepthStencilLayouts: VkBool32;
    hostQueryReset: VkBool32;
    timelineSemaphore: VkBool32;
    bufferDeviceAddress: VkBool32;
    bufferDeviceAddressCaptureReplay: VkBool32;
    bufferDeviceAddressMultiDevice: VkBool32;
    vulkanMemoryModel: VkBool32;
    vulkanMemoryModelDeviceScope: VkBool32;
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32;
    shaderOutputViewportIndex: VkBool32;
    shaderOutputLayer: VkBool32;
    subgroupBroadcastDynamicId: VkBool32;
}

VkConformanceVersion :: struct {
    major: u8;
    minor: u8;
    subminor: u8;
    patch: u8;
}

VkPhysicalDeviceVulkan12Properties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    pNext: *void;
    driverID: VkDriverId;
    driverName: [256] u8;
    driverInfo: [256] u8;
    conformanceVersion: VkConformanceVersion;
    denormBehaviorIndependence: VkShaderFloatControlsIndependence;
    roundingModeIndependence: VkShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16: VkBool32;
    shaderSignedZeroInfNanPreserveFloat32: VkBool32;
    shaderSignedZeroInfNanPreserveFloat64: VkBool32;
    shaderDenormPreserveFloat16: VkBool32;
    shaderDenormPreserveFloat32: VkBool32;
    shaderDenormPreserveFloat64: VkBool32;
    shaderDenormFlushToZeroFloat16: VkBool32;
    shaderDenormFlushToZeroFloat32: VkBool32;
    shaderDenormFlushToZeroFloat64: VkBool32;
    shaderRoundingModeRTEFloat16: VkBool32;
    shaderRoundingModeRTEFloat32: VkBool32;
    shaderRoundingModeRTEFloat64: VkBool32;
    shaderRoundingModeRTZFloat16: VkBool32;
    shaderRoundingModeRTZFloat32: VkBool32;
    shaderRoundingModeRTZFloat64: VkBool32;
    maxUpdateAfterBindDescriptorsInAllPools: u32;
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32;
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32;
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32;
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32;
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32;
    robustBufferAccessUpdateAfterBind: VkBool32;
    quadDivergentImplicitLod: VkBool32;
    maxPerStageDescriptorUpdateAfterBindSamplers: u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources: u32;
    maxDescriptorSetUpdateAfterBindSamplers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages: u32;
    maxDescriptorSetUpdateAfterBindStorageImages: u32;
    maxDescriptorSetUpdateAfterBindInputAttachments: u32;
    supportedDepthResolveModes: VkResolveModeFlags;
    supportedStencilResolveModes: VkResolveModeFlags;
    independentResolveNone: VkBool32;
    independentResolve: VkBool32;
    filterMinmaxSingleComponentFormats: VkBool32;
    filterMinmaxImageComponentMapping: VkBool32;
    maxTimelineSemaphoreValueDifference: u64;
    framebufferIntegerColorSampleCounts: VkSampleCountFlags;
}

VkImageFormatListCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    pNext: *void;
    viewFormatCount: u32;
    pViewFormats: *VkFormat;
}

VkAttachmentDescription2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    pNext: *void;
    flags: VkAttachmentDescriptionFlags;
    format: VkFormat;
    samples: VkSampleCountFlagBits;
    loadOp: VkAttachmentLoadOp;
    storeOp: VkAttachmentStoreOp;
    stencilLoadOp: VkAttachmentLoadOp;
    stencilStoreOp: VkAttachmentStoreOp;
    initialLayout: VkImageLayout;
    finalLayout: VkImageLayout;
}

VkAttachmentReference2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    pNext: *void;
    attachment: u32;
    layout: VkImageLayout;
    aspectMask: VkImageAspectFlags;
}

VkSubpassDescription2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    pNext: *void;
    flags: VkSubpassDescriptionFlags;
    pipelineBindPoint: VkPipelineBindPoint;
    viewMask: u32;
    inputAttachmentCount: u32;
    pInputAttachments: *VkAttachmentReference2;
    colorAttachmentCount: u32;
    pColorAttachments: *VkAttachmentReference2;
    pResolveAttachments: *VkAttachmentReference2;
    pDepthStencilAttachment: *VkAttachmentReference2;
    preserveAttachmentCount: u32;
    pPreserveAttachments: *u32;
}

VkSubpassDependency2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    pNext: *void;
    srcSubpass: u32;
    dstSubpass: u32;
    srcStageMask: VkPipelineStageFlags;
    dstStageMask: VkPipelineStageFlags;
    srcAccessMask: VkAccessFlags;
    dstAccessMask: VkAccessFlags;
    dependencyFlags: VkDependencyFlags;
    viewOffset: s32;
}

VkRenderPassCreateInfo2 :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    pNext: *void;
    flags: VkRenderPassCreateFlags;
    attachmentCount: u32;
    pAttachments: *VkAttachmentDescription2;
    subpassCount: u32;
    pSubpasses: *VkSubpassDescription2;
    dependencyCount: u32;
    pDependencies: *VkSubpassDependency2;
    correlatedViewMaskCount: u32;
    pCorrelatedViewMasks: *u32;
}

VkSubpassBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    pNext: *void;
    contents: VkSubpassContents;
}

VkSubpassEndInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
    pNext: *void;
}

VkPhysicalDevice8BitStorageFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    pNext: *void;
    storageBuffer8BitAccess: VkBool32;
    uniformAndStorageBuffer8BitAccess: VkBool32;
    storagePushConstant8: VkBool32;
}

VkPhysicalDeviceDriverProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    pNext: *void;
    driverID: VkDriverId;
    driverName: [256] u8;
    driverInfo: [256] u8;
    conformanceVersion: VkConformanceVersion;
}

VkPhysicalDeviceShaderAtomicInt64Features :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    pNext: *void;
    shaderBufferInt64Atomics: VkBool32;
    shaderSharedInt64Atomics: VkBool32;
}

VkPhysicalDeviceShaderFloat16Int8Features :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    pNext: *void;
    shaderFloat16: VkBool32;
    shaderInt8: VkBool32;
}

VkPhysicalDeviceFloatControlsProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    pNext: *void;
    denormBehaviorIndependence: VkShaderFloatControlsIndependence;
    roundingModeIndependence: VkShaderFloatControlsIndependence;
    shaderSignedZeroInfNanPreserveFloat16: VkBool32;
    shaderSignedZeroInfNanPreserveFloat32: VkBool32;
    shaderSignedZeroInfNanPreserveFloat64: VkBool32;
    shaderDenormPreserveFloat16: VkBool32;
    shaderDenormPreserveFloat32: VkBool32;
    shaderDenormPreserveFloat64: VkBool32;
    shaderDenormFlushToZeroFloat16: VkBool32;
    shaderDenormFlushToZeroFloat32: VkBool32;
    shaderDenormFlushToZeroFloat64: VkBool32;
    shaderRoundingModeRTEFloat16: VkBool32;
    shaderRoundingModeRTEFloat32: VkBool32;
    shaderRoundingModeRTEFloat64: VkBool32;
    shaderRoundingModeRTZFloat16: VkBool32;
    shaderRoundingModeRTZFloat32: VkBool32;
    shaderRoundingModeRTZFloat64: VkBool32;
}


VkDescriptorSetLayoutBindingFlagsCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    pNext: *void;
    bindingCount: u32;
    pBindingFlags: *VkDescriptorBindingFlags;
}

VkPhysicalDeviceDescriptorIndexingFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    pNext: *void;
    shaderInputAttachmentArrayDynamicIndexing: VkBool32;
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32;
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32;
    shaderUniformBufferArrayNonUniformIndexing: VkBool32;
    shaderSampledImageArrayNonUniformIndexing: VkBool32;
    shaderStorageBufferArrayNonUniformIndexing: VkBool32;
    shaderStorageImageArrayNonUniformIndexing: VkBool32;
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32;
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32;
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32;
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32;
    descriptorBindingSampledImageUpdateAfterBind: VkBool32;
    descriptorBindingStorageImageUpdateAfterBind: VkBool32;
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32;
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32;
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32;
    descriptorBindingUpdateUnusedWhilePending: VkBool32;
    descriptorBindingPartiallyBound: VkBool32;
    descriptorBindingVariableDescriptorCount: VkBool32;
    runtimeDescriptorArray: VkBool32;
}

VkPhysicalDeviceDescriptorIndexingProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    pNext: *void;
    maxUpdateAfterBindDescriptorsInAllPools: u32;
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32;
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32;
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32;
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32;
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32;
    robustBufferAccessUpdateAfterBind: VkBool32;
    quadDivergentImplicitLod: VkBool32;
    maxPerStageDescriptorUpdateAfterBindSamplers: u32;
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32;
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32;
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32;
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32;
    maxPerStageUpdateAfterBindResources: u32;
    maxDescriptorSetUpdateAfterBindSamplers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32;
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32;
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32;
    maxDescriptorSetUpdateAfterBindSampledImages: u32;
    maxDescriptorSetUpdateAfterBindStorageImages: u32;
    maxDescriptorSetUpdateAfterBindInputAttachments: u32;
}

VkDescriptorSetVariableDescriptorCountAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    pNext: *void;
    descriptorSetCount: u32;
    pDescriptorCounts: *u32;
}

VkDescriptorSetVariableDescriptorCountLayoutSupport :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    pNext: *void;
    maxVariableDescriptorCount: u32;
}

VkSubpassDescriptionDepthStencilResolve :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    pNext: *void;
    depthResolveMode: VkResolveModeFlagBits;
    stencilResolveMode: VkResolveModeFlagBits;
    pDepthStencilResolveAttachment: *VkAttachmentReference2;
}

VkPhysicalDeviceDepthStencilResolveProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    pNext: *void;
    supportedDepthResolveModes: VkResolveModeFlags;
    supportedStencilResolveModes: VkResolveModeFlags;
    independentResolveNone: VkBool32;
    independentResolve: VkBool32;
}

VkPhysicalDeviceScalarBlockLayoutFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    pNext: *void;
    scalarBlockLayout: VkBool32;
}

VkImageStencilUsageCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    pNext: *void;
    stencilUsage: VkImageUsageFlags;
}

VkSamplerReductionModeCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    pNext: *void;
    reductionMode: VkSamplerReductionMode;
}

VkPhysicalDeviceSamplerFilterMinmaxProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    pNext: *void;
    filterMinmaxSingleComponentFormats: VkBool32;
    filterMinmaxImageComponentMapping: VkBool32;
}

VkPhysicalDeviceVulkanMemoryModelFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    pNext: *void;
    vulkanMemoryModel: VkBool32;
    vulkanMemoryModelDeviceScope: VkBool32;
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32;
}

VkPhysicalDeviceImagelessFramebufferFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    pNext: *void;
    imagelessFramebuffer: VkBool32;
}

VkFramebufferAttachmentImageInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    pNext: *void;
    flags: VkImageCreateFlags;
    usage: VkImageUsageFlags;
    width: u32;
    height: u32;
    layerCount: u32;
    viewFormatCount: u32;
    pViewFormats: *VkFormat;
}

VkFramebufferAttachmentsCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    pNext: *void;
    attachmentImageInfoCount: u32;
    pAttachmentImageInfos: *VkFramebufferAttachmentImageInfo;
}

VkRenderPassAttachmentBeginInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    pNext: *void;
    attachmentCount: u32;
    pAttachments: *VkImageView;
}


VkPhysicalDeviceUniformBufferStandardLayoutFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    pNext: *void;
    uniformBufferStandardLayout: VkBool32;
}

VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    pNext: *void;
    shaderSubgroupExtendedTypes: VkBool32;
}

VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    pNext: *void;
    separateDepthStencilLayouts: VkBool32;
}

VkAttachmentReferenceStencilLayout :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    pNext: *void;
    stencilLayout: VkImageLayout;
}

VkAttachmentDescriptionStencilLayout :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    pNext: *void;
    stencilInitialLayout: VkImageLayout;
    stencilFinalLayout: VkImageLayout;
}

VkPhysicalDeviceHostQueryResetFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    pNext: *void;
    hostQueryReset: VkBool32;
}

VkPhysicalDeviceTimelineSemaphoreFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    pNext: *void;
    timelineSemaphore: VkBool32;
}

VkPhysicalDeviceTimelineSemaphoreProperties :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    pNext: *void;
    maxTimelineSemaphoreValueDifference: u64;
}

VkSemaphoreTypeCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    pNext: *void;
    semaphoreType: VkSemaphoreType;
    initialValue: u64;
}

VkTimelineSemaphoreSubmitInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    pNext: *void;
    waitSemaphoreValueCount: u32;
    pWaitSemaphoreValues: *u64;
    signalSemaphoreValueCount: u32;
    pSignalSemaphoreValues: *u64;
}

VkSemaphoreWaitInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    pNext: *void;
    flags: VkSemaphoreWaitFlags;
    semaphoreCount: u32;
    pSemaphores: *VkSemaphore;
    pValues: *u64;
}

VkSemaphoreSignalInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    pNext: *void;
    semaphore: VkSemaphore;
    value: u64;
}

VkPhysicalDeviceBufferDeviceAddressFeatures :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    pNext: *void;
    bufferDeviceAddress: VkBool32;
    bufferDeviceAddressCaptureReplay: VkBool32;
    bufferDeviceAddressMultiDevice: VkBool32;
}

VkBufferDeviceAddressInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    pNext: *void;
    buffer: VkBuffer;
}

VkBufferOpaqueCaptureAddressCreateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    pNext: *void;
    opaqueCaptureAddress: u64;
}

VkMemoryOpaqueCaptureAddressAllocateInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    pNext: *void;
    opaqueCaptureAddress: u64;
}

VkDeviceMemoryOpaqueCaptureAddressInfo :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    pNext: *void;
    memory: VkDeviceMemory;
}

PFN_vkCmdDrawIndirectCount :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

PFN_vkCmdDrawIndexedIndirectCount :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

PFN_vkCreateRenderPass2 :: #type (a0: VkDevice, a1: *VkRenderPassCreateInfo2, a2: *VkAllocationCallbacks, a3: *VkRenderPass) -> VkResult #c_call;

PFN_vkCmdBeginRenderPass2 :: #type (a0: VkCommandBuffer, a1: *VkRenderPassBeginInfo, a2: *VkSubpassBeginInfo) -> void #c_call;

PFN_vkCmdNextSubpass2 :: #type (a0: VkCommandBuffer, a1: *VkSubpassBeginInfo, a2: *VkSubpassEndInfo) -> void #c_call;

PFN_vkCmdEndRenderPass2 :: #type (a0: VkCommandBuffer, a1: *VkSubpassEndInfo) -> void #c_call;

PFN_vkResetQueryPool :: #type (a0: VkDevice, a1: VkQueryPool, a2: u32, a3: u32) -> void #c_call;

PFN_vkGetSemaphoreCounterValue :: #type (a0: VkDevice, a1: VkSemaphore, a2: *u64) -> VkResult #c_call;

PFN_vkWaitSemaphores :: #type (a0: VkDevice, a1: *VkSemaphoreWaitInfo, a2: u64) -> VkResult #c_call;

PFN_vkSignalSemaphore :: #type (a0: VkDevice, a1: *VkSemaphoreSignalInfo) -> VkResult #c_call;

PFN_vkGetBufferDeviceAddress :: #type (a0: VkDevice, a1: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #c_call;

PFN_vkGetBufferOpaqueCaptureAddress :: #type (a0: VkDevice, a1: *VkBufferDeviceAddressInfo) -> u64 #c_call;

PFN_vkGetDeviceMemoryOpaqueCaptureAddress :: #type (a0: VkDevice, a1: *VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

vkCmdDrawIndirectCount :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

vkCmdDrawIndexedIndirectCount :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

vkCreateRenderPass2 :: (device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo2, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass) -> VkResult #foreign vulkan;

vkCmdBeginRenderPass2 :: (commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, pSubpassBeginInfo: *VkSubpassBeginInfo) -> void #foreign vulkan;

vkCmdNextSubpass2 :: (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *VkSubpassBeginInfo, pSubpassEndInfo: *VkSubpassEndInfo) -> void #foreign vulkan;

vkCmdEndRenderPass2 :: (commandBuffer: VkCommandBuffer, pSubpassEndInfo: *VkSubpassEndInfo) -> void #foreign vulkan;

vkResetQueryPool :: (device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> void #foreign vulkan;

vkGetSemaphoreCounterValue :: (device: VkDevice, semaphore: VkSemaphore, pValue: *u64) -> VkResult #foreign vulkan;

vkWaitSemaphores :: (device: VkDevice, pWaitInfo: *VkSemaphoreWaitInfo, timeout: u64) -> VkResult #foreign vulkan;

vkSignalSemaphore :: (device: VkDevice, pSignalInfo: *VkSemaphoreSignalInfo) -> VkResult #foreign vulkan;

vkGetBufferDeviceAddress :: (device: VkDevice, pInfo: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #foreign vulkan;

vkGetBufferOpaqueCaptureAddress :: (device: VkDevice, pInfo: *VkBufferDeviceAddressInfo) -> u64 #foreign vulkan;

vkGetDeviceMemoryOpaqueCaptureAddress :: (device: VkDevice, pInfo: *VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64 #foreign vulkan;

VkSurfaceKHR_T :: struct {
}

VkSurfaceKHR :: *VkSurfaceKHR_T;

using VkPresentModeKHR :: enum u32 {
    VK_PRESENT_MODE_IMMEDIATE_KHR :: 0;
    VK_PRESENT_MODE_MAILBOX_KHR :: 1;
    VK_PRESENT_MODE_FIFO_KHR :: 2;
    VK_PRESENT_MODE_FIFO_RELAXED_KHR :: 3;
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR :: 1000111000;
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR :: 1000111001;
    VK_PRESENT_MODE_MAX_ENUM_KHR :: 2147483647;
}

using VkColorSpaceKHR :: enum u32 {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR :: 0;
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT :: 1000104001;
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT :: 1000104002;
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT :: 1000104003;
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT :: 1000104004;
    VK_COLOR_SPACE_BT709_LINEAR_EXT :: 1000104005;
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT :: 1000104006;
    VK_COLOR_SPACE_BT2020_LINEAR_EXT :: 1000104007;
    VK_COLOR_SPACE_HDR10_ST2084_EXT :: 1000104008;
    VK_COLOR_SPACE_DOLBYVISION_EXT :: 1000104009;
    VK_COLOR_SPACE_HDR10_HLG_EXT :: 1000104010;
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT :: 1000104011;
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT :: 1000104012;
    VK_COLOR_SPACE_PASS_THROUGH_EXT :: 1000104013;
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT :: 1000104014;
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD :: 1000213000;
    VK_COLORSPACE_SRGB_NONLINEAR_KHR :: 0;
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT :: 1000104003;
    VK_COLOR_SPACE_MAX_ENUM_KHR :: 2147483647;
}

using VkSurfaceTransformFlagBitsKHR :: enum_flags u32 {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR :: 1;
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR :: 2;
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR :: 4;
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR :: 8;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR :: 16;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR :: 32;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR :: 64;
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR :: 128;
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR :: 256;
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

using VkCompositeAlphaFlagBitsKHR :: enum_flags u32 {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR :: 1;
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR :: 2;
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR :: 4;
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR :: 8;
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkCompositeAlphaFlagsKHR :: VkCompositeAlphaFlagBitsKHR;

VkSurfaceTransformFlagsKHR :: VkFlags;

VkSurfaceCapabilitiesKHR :: struct {
    minImageCount: u32;
    maxImageCount: u32;
    currentExtent: VkExtent2D;
    minImageExtent: VkExtent2D;
    maxImageExtent: VkExtent2D;
    maxImageArrayLayers: u32;
    supportedTransforms: VkSurfaceTransformFlagsKHR;
    currentTransform: VkSurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR;
    supportedUsageFlags: VkImageUsageFlags;
}

VkSurfaceFormatKHR :: struct {
    format: VkFormat;
    colorSpace: VkColorSpaceKHR;
}

PFN_vkDestroySurfaceKHR :: #type (a0: VkInstance, a1: VkSurfaceKHR, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetPhysicalDeviceSurfaceSupportKHR :: #type (a0: VkPhysicalDevice, a1: u32, a2: VkSurfaceKHR, a3: *VkBool32) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR :: #type (a0: VkPhysicalDevice, a1: VkSurfaceKHR, a2: *VkSurfaceCapabilitiesKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceSurfaceFormatsKHR :: #type (a0: VkPhysicalDevice, a1: VkSurfaceKHR, a2: *u32, a3: *VkSurfaceFormatKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceSurfacePresentModesKHR :: #type (a0: VkPhysicalDevice, a1: VkSurfaceKHR, a2: *u32, a3: *VkPresentModeKHR) -> VkResult #c_call;

vkDestroySurfaceKHR :: (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetPhysicalDeviceSurfaceSupportKHR :: (physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: *VkBool32) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceSurfaceCapabilitiesKHR :: (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *VkSurfaceCapabilitiesKHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceSurfaceFormatsKHR :: (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *VkSurfaceFormatKHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceSurfacePresentModesKHR :: (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: *u32, pPresentModes: *VkPresentModeKHR) -> VkResult #foreign vulkan;

VkSwapchainKHR_T :: struct {
}

VkSwapchainKHR :: *VkSwapchainKHR_T;

using VkSwapchainCreateFlagBitsKHR :: enum_flags u32 {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR :: 1;
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR :: 2;
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR :: 4;
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkSwapchainCreateFlagsKHR :: VkSwapchainCreateFlagBitsKHR;

using VkDeviceGroupPresentModeFlagBitsKHR :: enum_flags u32 {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR :: 1;
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR :: 2;
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR :: 4;
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR :: 8;
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkDeviceGroupPresentModeFlagsKHR :: VkDeviceGroupPresentModeFlagBitsKHR;

VkSwapchainCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: *void;
    flags: VkSwapchainCreateFlagsKHR;
    surface: VkSurfaceKHR;
    minImageCount: u32;
    imageFormat: VkFormat;
    imageColorSpace: VkColorSpaceKHR;
    imageExtent: VkExtent2D;
    imageArrayLayers: u32;
    imageUsage: VkImageUsageFlags;
    imageSharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: *u32;
    preTransform: VkSurfaceTransformFlagBitsKHR;
    compositeAlpha: VkCompositeAlphaFlagBitsKHR;
    presentMode: VkPresentModeKHR;
    clipped: VkBool32;
    oldSwapchain: VkSwapchainKHR;
}

VkPresentInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    pNext: *void;
    waitSemaphoreCount: u32;
    pWaitSemaphores: *VkSemaphore;
    swapchainCount: u32;
    pSwapchains: *VkSwapchainKHR;
    pImageIndices: *u32;
    pResults: *VkResult;
}

VkImageSwapchainCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: *void;
    swapchain: VkSwapchainKHR;
}

VkBindImageMemorySwapchainInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    pNext: *void;
    swapchain: VkSwapchainKHR;
    imageIndex: u32;
}

VkAcquireNextImageInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
    pNext: *void;
    swapchain: VkSwapchainKHR;
    timeout: u64;
    semaphore: VkSemaphore;
    fence: VkFence;
    deviceMask: u32;
}

VkDeviceGroupPresentCapabilitiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    pNext: *void;
    presentMask: [32] u32;
    modes: VkDeviceGroupPresentModeFlagsKHR;
}

VkDeviceGroupPresentInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
    pNext: *void;
    swapchainCount: u32;
    pDeviceMasks: *u32;
    mode: VkDeviceGroupPresentModeFlagBitsKHR;
}

VkDeviceGroupSwapchainCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    pNext: *void;
    modes: VkDeviceGroupPresentModeFlagsKHR;
}

PFN_vkCreateSwapchainKHR :: #type (a0: VkDevice, a1: *VkSwapchainCreateInfoKHR, a2: *VkAllocationCallbacks, a3: *VkSwapchainKHR) -> VkResult #c_call;

PFN_vkDestroySwapchainKHR :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetSwapchainImagesKHR :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: *u32, a3: *VkImage) -> VkResult #c_call;

PFN_vkAcquireNextImageKHR :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: u64, a3: VkSemaphore, a4: VkFence, a5: *u32) -> VkResult #c_call;

PFN_vkQueuePresentKHR :: #type (a0: VkQueue, a1: *VkPresentInfoKHR) -> VkResult #c_call;

PFN_vkGetDeviceGroupPresentCapabilitiesKHR :: #type (a0: VkDevice, a1: *VkDeviceGroupPresentCapabilitiesKHR) -> VkResult #c_call;

PFN_vkGetDeviceGroupSurfacePresentModesKHR :: #type (a0: VkDevice, a1: VkSurfaceKHR, a2: *VkDeviceGroupPresentModeFlagsKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDevicePresentRectanglesKHR :: #type (a0: VkPhysicalDevice, a1: VkSurfaceKHR, a2: *u32, a3: *VkRect2D) -> VkResult #c_call;

PFN_vkAcquireNextImage2KHR :: #type (a0: VkDevice, a1: *VkAcquireNextImageInfoKHR, a2: *u32) -> VkResult #c_call;

vkCreateSwapchainKHR :: (device: VkDevice, pCreateInfo: *VkSwapchainCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSwapchain: *VkSwapchainKHR) -> VkResult #foreign vulkan;

vkDestroySwapchainKHR :: (device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

vkGetSwapchainImagesKHR :: (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: *u32, pSwapchainImages: *VkImage) -> VkResult #foreign vulkan;

vkAcquireNextImageKHR :: (device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: *u32) -> VkResult #foreign vulkan;

vkQueuePresentKHR :: (queue: VkQueue, pPresentInfo: *VkPresentInfoKHR) -> VkResult #foreign vulkan;

vkGetDeviceGroupPresentCapabilitiesKHR :: (device: VkDevice, pDeviceGroupPresentCapabilities: *VkDeviceGroupPresentCapabilitiesKHR) -> VkResult #foreign vulkan;

vkGetDeviceGroupSurfacePresentModesKHR :: (device: VkDevice, surface: VkSurfaceKHR, pModes: *VkDeviceGroupPresentModeFlagsKHR) -> VkResult #foreign vulkan;

vkGetPhysicalDevicePresentRectanglesKHR :: (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: *u32, pRects: *VkRect2D) -> VkResult #foreign vulkan;

vkAcquireNextImage2KHR :: (device: VkDevice, pAcquireInfo: *VkAcquireNextImageInfoKHR, pImageIndex: *u32) -> VkResult #foreign vulkan;

VkDisplayKHR_T :: struct {
}

VkDisplayKHR :: *VkDisplayKHR_T;

VkDisplayModeKHR_T :: struct {
}

VkDisplayModeKHR :: *VkDisplayModeKHR_T;

VkDisplayModeCreateFlagsKHR :: VkFlags;

using VkDisplayPlaneAlphaFlagBitsKHR :: enum_flags u32 {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR :: 1;
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR :: 2;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR :: 4;
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR :: 8;
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkDisplayPlaneAlphaFlagsKHR :: VkDisplayPlaneAlphaFlagBitsKHR;

VkDisplaySurfaceCreateFlagsKHR :: VkFlags;

VkDisplayModeParametersKHR :: struct {
    visibleRegion: VkExtent2D;
    refreshRate: u32;
}

VkDisplayModeCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
    pNext: *void;
    flags: VkDisplayModeCreateFlagsKHR;
    parameters: VkDisplayModeParametersKHR;
}

VkDisplayModePropertiesKHR :: struct {
    displayMode: VkDisplayModeKHR;
    parameters: VkDisplayModeParametersKHR;
}

VkDisplayPlaneCapabilitiesKHR :: struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR;
    minSrcPosition: VkOffset2D;
    maxSrcPosition: VkOffset2D;
    minSrcExtent: VkExtent2D;
    maxSrcExtent: VkExtent2D;
    minDstPosition: VkOffset2D;
    maxDstPosition: VkOffset2D;
    minDstExtent: VkExtent2D;
    maxDstExtent: VkExtent2D;
}

VkDisplayPlanePropertiesKHR :: struct {
    currentDisplay: VkDisplayKHR;
    currentStackIndex: u32;
}

VkDisplayPropertiesKHR :: struct {
    display: VkDisplayKHR;
    displayName: *u8;
    physicalDimensions: VkExtent2D;
    physicalResolution: VkExtent2D;
    supportedTransforms: VkSurfaceTransformFlagsKHR;
    planeReorderPossible: VkBool32;
    persistentContent: VkBool32;
}

VkDisplaySurfaceCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
    pNext: *void;
    flags: VkDisplaySurfaceCreateFlagsKHR;
    displayMode: VkDisplayModeKHR;
    planeIndex: u32;
    planeStackIndex: u32;
    transform: VkSurfaceTransformFlagBitsKHR;
    globalAlpha: float32;
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;
    imageExtent: VkExtent2D;
}

PFN_vkGetPhysicalDeviceDisplayPropertiesKHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkDisplayPropertiesKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkDisplayPlanePropertiesKHR) -> VkResult #c_call;

PFN_vkGetDisplayPlaneSupportedDisplaysKHR :: #type (a0: VkPhysicalDevice, a1: u32, a2: *u32, a3: *VkDisplayKHR) -> VkResult #c_call;

PFN_vkGetDisplayModePropertiesKHR :: #type (a0: VkPhysicalDevice, a1: VkDisplayKHR, a2: *u32, a3: *VkDisplayModePropertiesKHR) -> VkResult #c_call;

PFN_vkCreateDisplayModeKHR :: #type (a0: VkPhysicalDevice, a1: VkDisplayKHR, a2: *VkDisplayModeCreateInfoKHR, a3: *VkAllocationCallbacks, a4: *VkDisplayModeKHR) -> VkResult #c_call;

PFN_vkGetDisplayPlaneCapabilitiesKHR :: #type (a0: VkPhysicalDevice, a1: VkDisplayModeKHR, a2: u32, a3: *VkDisplayPlaneCapabilitiesKHR) -> VkResult #c_call;

PFN_vkCreateDisplayPlaneSurfaceKHR :: #type (a0: VkInstance, a1: *VkDisplaySurfaceCreateInfoKHR, a2: *VkAllocationCallbacks, a3: *VkSurfaceKHR) -> VkResult #c_call;

vkGetPhysicalDeviceDisplayPropertiesKHR :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkDisplayPropertiesKHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceDisplayPlanePropertiesKHR :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkDisplayPlanePropertiesKHR) -> VkResult #foreign vulkan;

vkGetDisplayPlaneSupportedDisplaysKHR :: (physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: *u32, pDisplays: *VkDisplayKHR) -> VkResult #foreign vulkan;

vkGetDisplayModePropertiesKHR :: (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *u32, pProperties: *VkDisplayModePropertiesKHR) -> VkResult #foreign vulkan;

vkCreateDisplayModeKHR :: (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: *VkDisplayModeCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pMode: *VkDisplayModeKHR) -> VkResult #foreign vulkan;

vkGetDisplayPlaneCapabilitiesKHR :: (physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: *VkDisplayPlaneCapabilitiesKHR) -> VkResult #foreign vulkan;

vkCreateDisplayPlaneSurfaceKHR :: (instance: VkInstance, pCreateInfo: *VkDisplaySurfaceCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSurface: *VkSurfaceKHR) -> VkResult #foreign vulkan;

VkDisplayPresentInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
    pNext: *void;
    srcRect: VkRect2D;
    dstRect: VkRect2D;
    persistent: VkBool32;
}

PFN_vkCreateSharedSwapchainsKHR :: #type (a0: VkDevice, a1: u32, a2: *VkSwapchainCreateInfoKHR, a3: *VkAllocationCallbacks, a4: *VkSwapchainKHR) -> VkResult #c_call;

vkCreateSharedSwapchainsKHR :: (device: VkDevice, swapchainCount: u32, pCreateInfos: *VkSwapchainCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSwapchains: *VkSwapchainKHR) -> VkResult #foreign vulkan;

VkRenderPassMultiviewCreateInfoKHR :: VkRenderPassMultiviewCreateInfo;

VkPhysicalDeviceMultiviewFeaturesKHR :: VkPhysicalDeviceMultiviewFeatures;

VkPhysicalDeviceMultiviewPropertiesKHR :: VkPhysicalDeviceMultiviewProperties;

VkPhysicalDeviceFeatures2KHR :: VkPhysicalDeviceFeatures2;

VkPhysicalDeviceProperties2KHR :: VkPhysicalDeviceProperties2;

VkFormatProperties2KHR :: VkFormatProperties2;

VkImageFormatProperties2KHR :: VkImageFormatProperties2;

VkPhysicalDeviceImageFormatInfo2KHR :: VkPhysicalDeviceImageFormatInfo2;

VkQueueFamilyProperties2KHR :: VkQueueFamilyProperties2;

VkPhysicalDeviceMemoryProperties2KHR :: VkPhysicalDeviceMemoryProperties2;

VkSparseImageFormatProperties2KHR :: VkSparseImageFormatProperties2;

VkPhysicalDeviceSparseImageFormatInfo2KHR :: VkPhysicalDeviceSparseImageFormatInfo2;

PFN_vkGetPhysicalDeviceFeatures2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceFeatures2) -> void #c_call;

PFN_vkGetPhysicalDeviceProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceFormatProperties2KHR :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: *VkFormatProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceImageFormatProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceImageFormatInfo2, a2: *VkImageFormatProperties2) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkQueueFamilyProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceMemoryProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceMemoryProperties2) -> void #c_call;

PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceSparseImageFormatInfo2, a2: *u32, a3: *VkSparseImageFormatProperties2) -> void #c_call;

//### instance extension

// vkGetPhysicalDeviceFeatures2KHR :: (physicalDevice: VkPhysicalDevice, pFeatures: *VkPhysicalDeviceFeatures2) -> void #foreign vulkan;

// vkGetPhysicalDeviceProperties2KHR :: (physicalDevice: VkPhysicalDevice, pProperties: *VkPhysicalDeviceProperties2) -> void #foreign vulkan;

// vkGetPhysicalDeviceFormatProperties2KHR :: (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *VkFormatProperties2) -> void #foreign vulkan;

// vkGetPhysicalDeviceImageFormatProperties2KHR :: (physicalDevice: VkPhysicalDevice, pImageFormatInfo: *VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *VkImageFormatProperties2) -> VkResult #foreign vulkan;

// vkGetPhysicalDeviceQueueFamilyProperties2KHR :: (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *VkQueueFamilyProperties2) -> void #foreign vulkan;

// vkGetPhysicalDeviceMemoryProperties2KHR :: (physicalDevice: VkPhysicalDevice, pMemoryProperties: *VkPhysicalDeviceMemoryProperties2) -> void #foreign vulkan;

// vkGetPhysicalDeviceSparseImageFormatProperties2KHR :: (physicalDevice: VkPhysicalDevice, pFormatInfo: *VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *u32, pProperties: *VkSparseImageFormatProperties2) -> void #foreign vulkan;

VkPeerMemoryFeatureFlagsKHR :: VkPeerMemoryFeatureFlags;

VkPeerMemoryFeatureFlagBitsKHR :: VkPeerMemoryFeatureFlagBits;

VkMemoryAllocateFlagsKHR :: VkMemoryAllocateFlags;

VkMemoryAllocateFlagBitsKHR :: VkMemoryAllocateFlagBits;

VkMemoryAllocateFlagsInfoKHR :: VkMemoryAllocateFlagsInfo;

VkDeviceGroupRenderPassBeginInfoKHR :: VkDeviceGroupRenderPassBeginInfo;

VkDeviceGroupCommandBufferBeginInfoKHR :: VkDeviceGroupCommandBufferBeginInfo;

VkDeviceGroupSubmitInfoKHR :: VkDeviceGroupSubmitInfo;

VkDeviceGroupBindSparseInfoKHR :: VkDeviceGroupBindSparseInfo;

VkBindBufferMemoryDeviceGroupInfoKHR :: VkBindBufferMemoryDeviceGroupInfo;

VkBindImageMemoryDeviceGroupInfoKHR :: VkBindImageMemoryDeviceGroupInfo;

PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR :: #type (a0: VkDevice, a1: u32, a2: u32, a3: u32, a4: *VkPeerMemoryFeatureFlags) -> void #c_call;

PFN_vkCmdSetDeviceMaskKHR :: #type (a0: VkCommandBuffer, a1: u32) -> void #c_call;

PFN_vkCmdDispatchBaseKHR :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: u32, a4: u32, a5: u32, a6: u32) -> void #c_call;

// ### 
// vkGetDeviceGroupPeerMemoryFeaturesKHR :: (device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *VkPeerMemoryFeatureFlags) -> void #foreign vulkan;

// vkCmdSetDeviceMaskKHR :: (commandBuffer: VkCommandBuffer, deviceMask: u32) -> void #foreign vulkan;

// vkCmdDispatchBaseKHR :: (commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> void #foreign vulkan;

VkCommandPoolTrimFlagsKHR :: VkCommandPoolTrimFlags;

PFN_vkTrimCommandPoolKHR :: #type (a0: VkDevice, a1: VkCommandPool, a2: VkCommandPoolTrimFlags) -> void #c_call;

// vkTrimCommandPoolKHR :: (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) -> void #foreign vulkan;

VkPhysicalDeviceGroupPropertiesKHR :: VkPhysicalDeviceGroupProperties;

VkDeviceGroupDeviceCreateInfoKHR :: VkDeviceGroupDeviceCreateInfo;

PFN_vkEnumeratePhysicalDeviceGroupsKHR :: #type (a0: VkInstance, a1: *u32, a2: *VkPhysicalDeviceGroupProperties) -> VkResult #c_call;

// vkEnumeratePhysicalDeviceGroupsKHR :: (instance: VkInstance, pPhysicalDeviceGroupCount: *u32, pPhysicalDeviceGroupProperties: *VkPhysicalDeviceGroupProperties) -> VkResult #foreign vulkan;

VkExternalMemoryHandleTypeFlagsKHR :: VkExternalMemoryHandleTypeFlags;

VkExternalMemoryHandleTypeFlagBitsKHR :: VkExternalMemoryHandleTypeFlagBits;

VkExternalMemoryFeatureFlagsKHR :: VkExternalMemoryFeatureFlags;

VkExternalMemoryFeatureFlagBitsKHR :: VkExternalMemoryFeatureFlagBits;

VkExternalMemoryPropertiesKHR :: VkExternalMemoryProperties;

VkPhysicalDeviceExternalImageFormatInfoKHR :: VkPhysicalDeviceExternalImageFormatInfo;

VkExternalImageFormatPropertiesKHR :: VkExternalImageFormatProperties;

VkPhysicalDeviceExternalBufferInfoKHR :: VkPhysicalDeviceExternalBufferInfo;

VkExternalBufferPropertiesKHR :: VkExternalBufferProperties;

VkPhysicalDeviceIDPropertiesKHR :: VkPhysicalDeviceIDProperties;

PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalBufferInfo, a2: *VkExternalBufferProperties) -> void #c_call;

// vkGetPhysicalDeviceExternalBufferPropertiesKHR :: (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *VkExternalBufferProperties) -> void #foreign vulkan;

VkExternalMemoryImageCreateInfoKHR :: VkExternalMemoryImageCreateInfo;

VkExternalMemoryBufferCreateInfoKHR :: VkExternalMemoryBufferCreateInfo;

VkExportMemoryAllocateInfoKHR :: VkExportMemoryAllocateInfo;

VkImportMemoryFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
    pNext: *void;
    handleType: VkExternalMemoryHandleTypeFlagBits;
    fd: s32;
}

VkMemoryFdPropertiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
    pNext: *void;
    memoryTypeBits: u32;
}

VkMemoryGetFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
    pNext: *void;
    memory: VkDeviceMemory;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

PFN_vkGetMemoryFdKHR :: #type (a0: VkDevice, a1: *VkMemoryGetFdInfoKHR, a2: *s32) -> VkResult #c_call;

PFN_vkGetMemoryFdPropertiesKHR :: #type (a0: VkDevice, a1: VkExternalMemoryHandleTypeFlagBits, a2: s32, a3: *VkMemoryFdPropertiesKHR) -> VkResult #c_call;

// vkGetMemoryFdKHR :: (device: VkDevice, pGetFdInfo: *VkMemoryGetFdInfoKHR, pFd: *s32) -> VkResult #foreign vulkan;

// vkGetMemoryFdPropertiesKHR :: (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: s32, pMemoryFdProperties: *VkMemoryFdPropertiesKHR) -> VkResult #foreign vulkan;

VkExternalSemaphoreHandleTypeFlagsKHR :: VkExternalSemaphoreHandleTypeFlags;

VkExternalSemaphoreHandleTypeFlagBitsKHR :: VkExternalSemaphoreHandleTypeFlagBits;

VkExternalSemaphoreFeatureFlagsKHR :: VkExternalSemaphoreFeatureFlags;

VkExternalSemaphoreFeatureFlagBitsKHR :: VkExternalSemaphoreFeatureFlagBits;

VkPhysicalDeviceExternalSemaphoreInfoKHR :: VkPhysicalDeviceExternalSemaphoreInfo;

VkExternalSemaphorePropertiesKHR :: VkExternalSemaphoreProperties;

PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalSemaphoreInfo, a2: *VkExternalSemaphoreProperties) -> void #c_call;

//###
// vkGetPhysicalDeviceExternalSemaphorePropertiesKHR :: (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *VkExternalSemaphoreProperties) -> void #foreign vulkan;

VkSemaphoreImportFlagsKHR :: VkSemaphoreImportFlags;

VkSemaphoreImportFlagBitsKHR :: VkSemaphoreImportFlagBits;

VkExportSemaphoreCreateInfoKHR :: VkExportSemaphoreCreateInfo;

VkImportSemaphoreFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
    pNext: *void;
    semaphore: VkSemaphore;
    flags: VkSemaphoreImportFlags;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
    fd: s32;
}

VkSemaphoreGetFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
    pNext: *void;
    semaphore: VkSemaphore;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

PFN_vkImportSemaphoreFdKHR :: #type (a0: VkDevice, a1: *VkImportSemaphoreFdInfoKHR) -> VkResult #c_call;

PFN_vkGetSemaphoreFdKHR :: #type (a0: VkDevice, a1: *VkSemaphoreGetFdInfoKHR, a2: *s32) -> VkResult #c_call;

// vkImportSemaphoreFdKHR :: (device: VkDevice, pImportSemaphoreFdInfo: *VkImportSemaphoreFdInfoKHR) -> VkResult #foreign vulkan;

// vkGetSemaphoreFdKHR :: (device: VkDevice, pGetFdInfo: *VkSemaphoreGetFdInfoKHR, pFd: *s32) -> VkResult #foreign vulkan;

VkPhysicalDevicePushDescriptorPropertiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    pNext: *void;
    maxPushDescriptors: u32;
}

PFN_vkCmdPushDescriptorSetKHR :: #type (a0: VkCommandBuffer, a1: VkPipelineBindPoint, a2: VkPipelineLayout, a3: u32, a4: u32, a5: *VkWriteDescriptorSet) -> void #c_call;

PFN_vkCmdPushDescriptorSetWithTemplateKHR :: #type (a0: VkCommandBuffer, a1: VkDescriptorUpdateTemplate, a2: VkPipelineLayout, a3: u32, a4: *void) -> void #c_call;

//###
// vkCmdPushDescriptorSetKHR :: (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: *VkWriteDescriptorSet) -> void #foreign vulkan;

// vkCmdPushDescriptorSetWithTemplateKHR :: (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: *void) -> void #foreign vulkan;

VkPhysicalDeviceShaderFloat16Int8FeaturesKHR :: VkPhysicalDeviceShaderFloat16Int8Features;

VkPhysicalDeviceFloat16Int8FeaturesKHR :: VkPhysicalDeviceShaderFloat16Int8Features;

VkPhysicalDevice16BitStorageFeaturesKHR :: VkPhysicalDevice16BitStorageFeatures;

VkRectLayerKHR :: struct {
    offset: VkOffset2D;
    extent: VkExtent2D;
    layer: u32;
}

VkPresentRegionKHR :: struct {
    rectangleCount: u32;
    pRectangles: *VkRectLayerKHR;
}

VkPresentRegionsKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
    pNext: *void;
    swapchainCount: u32;
    pRegions: *VkPresentRegionKHR;
}

VkDescriptorUpdateTemplateKHR :: VkDescriptorUpdateTemplate;

VkDescriptorUpdateTemplateTypeKHR :: VkDescriptorUpdateTemplateType;

VkDescriptorUpdateTemplateCreateFlagsKHR :: VkDescriptorUpdateTemplateCreateFlags;

VkDescriptorUpdateTemplateEntryKHR :: VkDescriptorUpdateTemplateEntry;

VkDescriptorUpdateTemplateCreateInfoKHR :: VkDescriptorUpdateTemplateCreateInfo;

PFN_vkCreateDescriptorUpdateTemplateKHR :: #type (a0: VkDevice, a1: *VkDescriptorUpdateTemplateCreateInfo, a2: *VkAllocationCallbacks, a3: *VkDescriptorUpdateTemplate) -> VkResult #c_call;

PFN_vkDestroyDescriptorUpdateTemplateKHR :: #type (a0: VkDevice, a1: VkDescriptorUpdateTemplate, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkUpdateDescriptorSetWithTemplateKHR :: #type (a0: VkDevice, a1: VkDescriptorSet, a2: VkDescriptorUpdateTemplate, a3: *void) -> void #c_call;

//###
// vkCreateDescriptorUpdateTemplateKHR :: (device: VkDevice, pCreateInfo: *VkDescriptorUpdateTemplateCreateInfo, pAllocator: *VkAllocationCallbacks, pDescriptorUpdateTemplate: *VkDescriptorUpdateTemplate) -> VkResult #foreign vulkan;

// vkDestroyDescriptorUpdateTemplateKHR :: (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkUpdateDescriptorSetWithTemplateKHR :: (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *void) -> void #foreign vulkan;

VkPhysicalDeviceImagelessFramebufferFeaturesKHR :: VkPhysicalDeviceImagelessFramebufferFeatures;

VkFramebufferAttachmentsCreateInfoKHR :: VkFramebufferAttachmentsCreateInfo;

VkFramebufferAttachmentImageInfoKHR :: VkFramebufferAttachmentImageInfo;

VkRenderPassAttachmentBeginInfoKHR :: VkRenderPassAttachmentBeginInfo;

VkRenderPassCreateInfo2KHR :: VkRenderPassCreateInfo2;

VkAttachmentDescription2KHR :: VkAttachmentDescription2;

VkAttachmentReference2KHR :: VkAttachmentReference2;

VkSubpassDescription2KHR :: VkSubpassDescription2;

VkSubpassDependency2KHR :: VkSubpassDependency2;

VkSubpassBeginInfoKHR :: VkSubpassBeginInfo;

VkSubpassEndInfoKHR :: VkSubpassEndInfo;

PFN_vkCreateRenderPass2KHR :: #type (a0: VkDevice, a1: *VkRenderPassCreateInfo2, a2: *VkAllocationCallbacks, a3: *VkRenderPass) -> VkResult #c_call;

PFN_vkCmdBeginRenderPass2KHR :: #type (a0: VkCommandBuffer, a1: *VkRenderPassBeginInfo, a2: *VkSubpassBeginInfo) -> void #c_call;

PFN_vkCmdNextSubpass2KHR :: #type (a0: VkCommandBuffer, a1: *VkSubpassBeginInfo, a2: *VkSubpassEndInfo) -> void #c_call;

PFN_vkCmdEndRenderPass2KHR :: #type (a0: VkCommandBuffer, a1: *VkSubpassEndInfo) -> void #c_call;

// vkCreateRenderPass2KHR :: (device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo2, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass) -> VkResult #foreign vulkan;

// vkCmdBeginRenderPass2KHR :: (commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, pSubpassBeginInfo: *VkSubpassBeginInfo) -> void #foreign vulkan;

// vkCmdNextSubpass2KHR :: (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *VkSubpassBeginInfo, pSubpassEndInfo: *VkSubpassEndInfo) -> void #foreign vulkan;

// vkCmdEndRenderPass2KHR :: (commandBuffer: VkCommandBuffer, pSubpassEndInfo: *VkSubpassEndInfo) -> void #foreign vulkan;

VkSharedPresentSurfaceCapabilitiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    pNext: *void;
    sharedPresentSupportedUsageFlags: VkImageUsageFlags;
}

PFN_vkGetSwapchainStatusKHR :: #type (a0: VkDevice, a1: VkSwapchainKHR) -> VkResult #c_call;

// vkGetSwapchainStatusKHR :: (device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult #foreign vulkan;

VkExternalFenceHandleTypeFlagsKHR :: VkExternalFenceHandleTypeFlags;

VkExternalFenceHandleTypeFlagBitsKHR :: VkExternalFenceHandleTypeFlagBits;

VkExternalFenceFeatureFlagsKHR :: VkExternalFenceFeatureFlags;

VkExternalFenceFeatureFlagBitsKHR :: VkExternalFenceFeatureFlagBits;

VkPhysicalDeviceExternalFenceInfoKHR :: VkPhysicalDeviceExternalFenceInfo;

VkExternalFencePropertiesKHR :: VkExternalFenceProperties;

PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceExternalFenceInfo, a2: *VkExternalFenceProperties) -> void #c_call;

//###
// vkGetPhysicalDeviceExternalFencePropertiesKHR :: (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *VkExternalFenceProperties) -> void #foreign vulkan;

VkFenceImportFlagsKHR :: VkFenceImportFlags;

VkFenceImportFlagBitsKHR :: VkFenceImportFlagBits;

VkExportFenceCreateInfoKHR :: VkExportFenceCreateInfo;

VkImportFenceFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
    pNext: *void;
    fence: VkFence;
    flags: VkFenceImportFlags;
    handleType: VkExternalFenceHandleTypeFlagBits;
    fd: s32;
}

VkFenceGetFdInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
    pNext: *void;
    fence: VkFence;
    handleType: VkExternalFenceHandleTypeFlagBits;
}


PFN_vkImportFenceFdKHR :: #type (a0: VkDevice, a1: *VkImportFenceFdInfoKHR) -> VkResult #c_call;

PFN_vkGetFenceFdKHR :: #type (a0: VkDevice, a1: *VkFenceGetFdInfoKHR, a2: *s32) -> VkResult #c_call;

// vkImportFenceFdKHR :: (device: VkDevice, pImportFenceFdInfo: *VkImportFenceFdInfoKHR) -> VkResult #foreign vulkan;

// vkGetFenceFdKHR :: (device: VkDevice, pGetFdInfo: *VkFenceGetFdInfoKHR, pFd: *s32) -> VkResult #foreign vulkan;

using VkPerformanceCounterUnitKHR :: enum u32 {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR :: 0;
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR :: 1;
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR :: 2;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR :: 3;
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR :: 4;
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR :: 5;
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR :: 6;
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR :: 7;
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR :: 8;
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR :: 9;
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR :: 10;
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR :: 2147483647;
}

using VkPerformanceCounterScopeKHR :: enum u32 {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR :: 0;
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR :: 1;
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR :: 2;
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR :: 0;
    VK_QUERY_SCOPE_RENDER_PASS_KHR :: 1;
    VK_QUERY_SCOPE_COMMAND_KHR :: 2;
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR :: 2147483647;
}

using VkPerformanceCounterStorageKHR :: enum u32 {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR :: 0;
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR :: 1;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR :: 2;
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR :: 3;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR :: 4;
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR :: 5;
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR :: 2147483647;
}

using VkPerformanceCounterDescriptionFlagBitsKHR :: enum_flags u32 {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR :: 1;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR :: 2;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR :: 1;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR :: 2;
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkPerformanceCounterDescriptionFlagsKHR :: VkPerformanceCounterDescriptionFlagBitsKHR;

using VkAcquireProfilingLockFlagBitsKHR :: enum_flags u32 {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkAcquireProfilingLockFlagsKHR :: VkAcquireProfilingLockFlagBitsKHR;

VkPhysicalDevicePerformanceQueryFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    pNext: *void;
    performanceCounterQueryPools: VkBool32;
    performanceCounterMultipleQueryPools: VkBool32;
}

VkPhysicalDevicePerformanceQueryPropertiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    pNext: *void;
    allowCommandBufferQueryCopies: VkBool32;
}

VkPerformanceCounterKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
    pNext: *void;
    unit: VkPerformanceCounterUnitKHR;
    scope: VkPerformanceCounterScopeKHR;
    storage: VkPerformanceCounterStorageKHR;
    uuid: [16] u8;
}

VkPerformanceCounterDescriptionKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    pNext: *void;
    flags: VkPerformanceCounterDescriptionFlagsKHR;
    name: [256] u8;
    category: [256] u8;
    description: [256] u8;
}

VkQueryPoolPerformanceCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    pNext: *void;
    queueFamilyIndex: u32;
    counterIndexCount: u32;
    pCounterIndices: *u32;
}

VkPerformanceCounterResultKHR :: union {
    int32: s32;
    int64: s64;
    uint32: u32;
    uint64: u64;
    _float32: float32;
    _float64: float64;
}

VkAcquireProfilingLockInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
    pNext: *void;
    flags: VkAcquireProfilingLockFlagsKHR;
    timeout: u64;
}

VkPerformanceQuerySubmitInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    pNext: *void;
    counterPassIndex: u32;
}

PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR :: #type (a0: VkPhysicalDevice, a1: u32, a2: *u32, a3: *VkPerformanceCounterKHR, a4: *VkPerformanceCounterDescriptionKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR :: #type (a0: VkPhysicalDevice, a1: *VkQueryPoolPerformanceCreateInfoKHR, a2: *u32) -> void #c_call;

PFN_vkAcquireProfilingLockKHR :: #type (a0: VkDevice, a1: *VkAcquireProfilingLockInfoKHR) -> VkResult #c_call;

PFN_vkReleaseProfilingLockKHR :: #type (a0: VkDevice) -> void #c_call;

// ###
// vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR :: (physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: *u32, pCounters: *VkPerformanceCounterKHR, pCounterDescriptions: *VkPerformanceCounterDescriptionKHR) -> VkResult #foreign vulkan;

// vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR :: (physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: *VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: *u32) -> void #foreign vulkan;

// vkAcquireProfilingLockKHR :: (device: VkDevice, pInfo: *VkAcquireProfilingLockInfoKHR) -> VkResult #foreign vulkan;

// vkReleaseProfilingLockKHR :: (device: VkDevice) -> void #foreign vulkan;

VkPointClippingBehaviorKHR :: VkPointClippingBehavior;

VkTessellationDomainOriginKHR :: VkTessellationDomainOrigin;

VkPhysicalDevicePointClippingPropertiesKHR :: VkPhysicalDevicePointClippingProperties;

VkRenderPassInputAttachmentAspectCreateInfoKHR :: VkRenderPassInputAttachmentAspectCreateInfo;

VkInputAttachmentAspectReferenceKHR :: VkInputAttachmentAspectReference;

VkImageViewUsageCreateInfoKHR :: VkImageViewUsageCreateInfo;

VkPipelineTessellationDomainOriginStateCreateInfoKHR :: VkPipelineTessellationDomainOriginStateCreateInfo;

VkPhysicalDeviceSurfaceInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    pNext: *void;
    surface: VkSurfaceKHR;
}

VkSurfaceCapabilities2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
    pNext: *void;
    surfaceCapabilities: VkSurfaceCapabilitiesKHR;
}

VkSurfaceFormat2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
    pNext: *void;
    surfaceFormat: VkSurfaceFormatKHR;
}

PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceSurfaceInfo2KHR, a2: *VkSurfaceCapabilities2KHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceSurfaceFormats2KHR :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceSurfaceInfo2KHR, a2: *u32, a3: *VkSurfaceFormat2KHR) -> VkResult #c_call;

vkGetPhysicalDeviceSurfaceCapabilities2KHR :: (physicalDevice: VkPhysicalDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *VkSurfaceCapabilities2KHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceSurfaceFormats2KHR :: (physicalDevice: VkPhysicalDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *VkSurfaceFormat2KHR) -> VkResult #foreign vulkan;

VkPhysicalDeviceVariablePointerFeaturesKHR :: VkPhysicalDeviceVariablePointersFeatures;

VkPhysicalDeviceVariablePointersFeaturesKHR :: VkPhysicalDeviceVariablePointersFeatures;

VkDisplayProperties2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
    pNext: *void;
    displayProperties: VkDisplayPropertiesKHR;
}

VkDisplayPlaneProperties2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
    pNext: *void;
    displayPlaneProperties: VkDisplayPlanePropertiesKHR;
}

VkDisplayModeProperties2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
    pNext: *void;
    displayModeProperties: VkDisplayModePropertiesKHR;
}

VkDisplayPlaneInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
    pNext: *void;
    mode: VkDisplayModeKHR;
    planeIndex: u32;
}

VkDisplayPlaneCapabilities2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
    pNext: *void;
    capabilities: VkDisplayPlaneCapabilitiesKHR;
}

PFN_vkGetPhysicalDeviceDisplayProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkDisplayProperties2KHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkDisplayPlaneProperties2KHR) -> VkResult #c_call;

PFN_vkGetDisplayModeProperties2KHR :: #type (a0: VkPhysicalDevice, a1: VkDisplayKHR, a2: *u32, a3: *VkDisplayModeProperties2KHR) -> VkResult #c_call;

PFN_vkGetDisplayPlaneCapabilities2KHR :: #type (a0: VkPhysicalDevice, a1: *VkDisplayPlaneInfo2KHR, a2: *VkDisplayPlaneCapabilities2KHR) -> VkResult #c_call;

vkGetPhysicalDeviceDisplayProperties2KHR :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkDisplayProperties2KHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceDisplayPlaneProperties2KHR :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkDisplayPlaneProperties2KHR) -> VkResult #foreign vulkan;

vkGetDisplayModeProperties2KHR :: (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *u32, pProperties: *VkDisplayModeProperties2KHR) -> VkResult #foreign vulkan;

vkGetDisplayPlaneCapabilities2KHR :: (physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: *VkDisplayPlaneInfo2KHR, pCapabilities: *VkDisplayPlaneCapabilities2KHR) -> VkResult #foreign vulkan;

VkMemoryDedicatedRequirementsKHR :: VkMemoryDedicatedRequirements;

VkMemoryDedicatedAllocateInfoKHR :: VkMemoryDedicatedAllocateInfo;

VkBufferMemoryRequirementsInfo2KHR :: VkBufferMemoryRequirementsInfo2;

VkImageMemoryRequirementsInfo2KHR :: VkImageMemoryRequirementsInfo2;

VkImageSparseMemoryRequirementsInfo2KHR :: VkImageSparseMemoryRequirementsInfo2;

VkMemoryRequirements2KHR :: VkMemoryRequirements2;

VkSparseImageMemoryRequirements2KHR :: VkSparseImageMemoryRequirements2;

PFN_vkGetImageMemoryRequirements2KHR :: #type (a0: VkDevice, a1: *VkImageMemoryRequirementsInfo2, a2: *VkMemoryRequirements2) -> void #c_call;

PFN_vkGetBufferMemoryRequirements2KHR :: #type (a0: VkDevice, a1: *VkBufferMemoryRequirementsInfo2, a2: *VkMemoryRequirements2) -> void #c_call;

PFN_vkGetImageSparseMemoryRequirements2KHR :: #type (a0: VkDevice, a1: *VkImageSparseMemoryRequirementsInfo2, a2: *u32, a3: *VkSparseImageMemoryRequirements2) -> void #c_call;

//###
// vkGetImageMemoryRequirements2KHR :: (device: VkDevice, pInfo: *VkImageMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2) -> void #foreign vulkan;

// vkGetBufferMemoryRequirements2KHR :: (device: VkDevice, pInfo: *VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *VkMemoryRequirements2) -> void #foreign vulkan;

// vkGetImageSparseMemoryRequirements2KHR :: (device: VkDevice, pInfo: *VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *u32, pSparseMemoryRequirements: *VkSparseImageMemoryRequirements2) -> void #foreign vulkan;

VkImageFormatListCreateInfoKHR :: VkImageFormatListCreateInfo;

VkSamplerYcbcrConversionKHR :: VkSamplerYcbcrConversion;

VkSamplerYcbcrModelConversionKHR :: VkSamplerYcbcrModelConversion;

VkSamplerYcbcrRangeKHR :: VkSamplerYcbcrRange;

VkChromaLocationKHR :: VkChromaLocation;

VkSamplerYcbcrConversionCreateInfoKHR :: VkSamplerYcbcrConversionCreateInfo;

VkSamplerYcbcrConversionInfoKHR :: VkSamplerYcbcrConversionInfo;

VkBindImagePlaneMemoryInfoKHR :: VkBindImagePlaneMemoryInfo;

VkImagePlaneMemoryRequirementsInfoKHR :: VkImagePlaneMemoryRequirementsInfo;

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR :: VkPhysicalDeviceSamplerYcbcrConversionFeatures;

VkSamplerYcbcrConversionImageFormatPropertiesKHR :: VkSamplerYcbcrConversionImageFormatProperties;

PFN_vkCreateSamplerYcbcrConversionKHR :: #type (a0: VkDevice, a1: *VkSamplerYcbcrConversionCreateInfo, a2: *VkAllocationCallbacks, a3: *VkSamplerYcbcrConversion) -> VkResult #c_call;

PFN_vkDestroySamplerYcbcrConversionKHR :: #type (a0: VkDevice, a1: VkSamplerYcbcrConversion, a2: *VkAllocationCallbacks) -> void #c_call;

//###
// vkCreateSamplerYcbcrConversionKHR :: (device: VkDevice, pCreateInfo: *VkSamplerYcbcrConversionCreateInfo, pAllocator: *VkAllocationCallbacks, pYcbcrConversion: *VkSamplerYcbcrConversion) -> VkResult #foreign vulkan;

// vkDestroySamplerYcbcrConversionKHR :: (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

VkBindBufferMemoryInfoKHR :: VkBindBufferMemoryInfo;

VkBindImageMemoryInfoKHR :: VkBindImageMemoryInfo;

PFN_vkBindBufferMemory2KHR :: #type (a0: VkDevice, a1: u32, a2: *VkBindBufferMemoryInfo) -> VkResult #c_call;

PFN_vkBindImageMemory2KHR :: #type (a0: VkDevice, a1: u32, a2: *VkBindImageMemoryInfo) -> VkResult #c_call;
//###
// vkBindBufferMemory2KHR :: (device: VkDevice, bindInfoCount: u32, pBindInfos: *VkBindBufferMemoryInfo) -> VkResult #foreign vulkan;

// vkBindImageMemory2KHR :: (device: VkDevice, bindInfoCount: u32, pBindInfos: *VkBindImageMemoryInfo) -> VkResult #foreign vulkan;

VkPhysicalDeviceMaintenance3PropertiesKHR :: VkPhysicalDeviceMaintenance3Properties;

VkDescriptorSetLayoutSupportKHR :: VkDescriptorSetLayoutSupport;

PFN_vkGetDescriptorSetLayoutSupportKHR :: #type (a0: VkDevice, a1: *VkDescriptorSetLayoutCreateInfo, a2: *VkDescriptorSetLayoutSupport) -> void #c_call;
//###
// vkGetDescriptorSetLayoutSupportKHR :: (device: VkDevice, pCreateInfo: *VkDescriptorSetLayoutCreateInfo, pSupport: *VkDescriptorSetLayoutSupport) -> void #foreign vulkan;

PFN_vkCmdDrawIndirectCountKHR :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

PFN_vkCmdDrawIndexedIndirectCountKHR :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

//###
// vkCmdDrawIndirectCountKHR :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

// vkCmdDrawIndexedIndirectCountKHR :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR :: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

VkPhysicalDevice8BitStorageFeaturesKHR :: VkPhysicalDevice8BitStorageFeatures;

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR :: VkPhysicalDeviceShaderAtomicInt64Features;

VkPhysicalDeviceShaderClockFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    pNext: *void;
    shaderSubgroupClock: VkBool32;
    shaderDeviceClock: VkBool32;
}

VkDriverIdKHR :: VkDriverId;

VkConformanceVersionKHR :: VkConformanceVersion;

VkPhysicalDeviceDriverPropertiesKHR :: VkPhysicalDeviceDriverProperties;

VkShaderFloatControlsIndependenceKHR :: VkShaderFloatControlsIndependence;

VkPhysicalDeviceFloatControlsPropertiesKHR :: VkPhysicalDeviceFloatControlsProperties;

VkResolveModeFlagBitsKHR :: VkResolveModeFlagBits;

VkResolveModeFlagsKHR :: VkResolveModeFlags;

VkSubpassDescriptionDepthStencilResolveKHR :: VkSubpassDescriptionDepthStencilResolve;

VkPhysicalDeviceDepthStencilResolvePropertiesKHR :: VkPhysicalDeviceDepthStencilResolveProperties;

VkSemaphoreTypeKHR :: VkSemaphoreType;

VkSemaphoreWaitFlagBitsKHR :: VkSemaphoreWaitFlagBits;

VkSemaphoreWaitFlagsKHR :: VkSemaphoreWaitFlags;

VkPhysicalDeviceTimelineSemaphoreFeaturesKHR :: VkPhysicalDeviceTimelineSemaphoreFeatures;

VkPhysicalDeviceTimelineSemaphorePropertiesKHR :: VkPhysicalDeviceTimelineSemaphoreProperties;

VkSemaphoreTypeCreateInfoKHR :: VkSemaphoreTypeCreateInfo;

VkTimelineSemaphoreSubmitInfoKHR :: VkTimelineSemaphoreSubmitInfo;

VkSemaphoreWaitInfoKHR :: VkSemaphoreWaitInfo;

VkSemaphoreSignalInfoKHR :: VkSemaphoreSignalInfo;

PFN_vkGetSemaphoreCounterValueKHR :: #type (a0: VkDevice, a1: VkSemaphore, a2: *u64) -> VkResult #c_call;

PFN_vkWaitSemaphoresKHR :: #type (a0: VkDevice, a1: *VkSemaphoreWaitInfo, a2: u64) -> VkResult #c_call;

PFN_vkSignalSemaphoreKHR :: #type (a0: VkDevice, a1: *VkSemaphoreSignalInfo) -> VkResult #c_call;

// vkGetSemaphoreCounterValueKHR :: (device: VkDevice, semaphore: VkSemaphore, pValue: *u64) -> VkResult #foreign vulkan;

// vkWaitSemaphoresKHR :: (device: VkDevice, pWaitInfo: *VkSemaphoreWaitInfo, timeout: u64) -> VkResult #foreign vulkan;

// vkSignalSemaphoreKHR :: (device: VkDevice, pSignalInfo: *VkSemaphoreSignalInfo) -> VkResult #foreign vulkan;

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR :: VkPhysicalDeviceVulkanMemoryModelFeatures;

VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
    pNext: *void;
    shaderTerminateInvocation: VkBool32;
}

using VkFragmentShadingRateCombinerOpKHR :: enum u32 {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR :: 0;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR :: 1;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR :: 2;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR :: 3;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR :: 4;
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR :: 2147483647;
}

VkFragmentShadingRateAttachmentInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    pNext: *void;
    pFragmentShadingRateAttachment: *VkAttachmentReference2;
    shadingRateAttachmentTexelSize: VkExtent2D;
}

VkPipelineFragmentShadingRateStateCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    pNext: *void;
    fragmentSize: VkExtent2D;
    combinerOps: [2] VkFragmentShadingRateCombinerOpKHR;
}

VkPhysicalDeviceFragmentShadingRateFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    pNext: *void;
    pipelineFragmentShadingRate: VkBool32;
    primitiveFragmentShadingRate: VkBool32;
    attachmentFragmentShadingRate: VkBool32;
}

VkPhysicalDeviceFragmentShadingRatePropertiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    pNext: *void;
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D;
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D;
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32;
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32;
    layeredShadingRateAttachments: VkBool32;
    fragmentShadingRateNonTrivialCombinerOps: VkBool32;
    maxFragmentSize: VkExtent2D;
    maxFragmentSizeAspectRatio: u32;
    maxFragmentShadingRateCoverageSamples: u32;
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits;
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32;
    fragmentShadingRateWithSampleMask: VkBool32;
    fragmentShadingRateWithShaderSampleMask: VkBool32;
    fragmentShadingRateWithConservativeRasterization: VkBool32;
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32;
    fragmentShadingRateWithCustomSampleLocations: VkBool32;
    fragmentShadingRateStrictMultiplyCombiner: VkBool32;
}

VkPhysicalDeviceFragmentShadingRateKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    pNext: *void;
    sampleCounts: VkSampleCountFlags;
    fragmentSize: VkExtent2D;
}

PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkPhysicalDeviceFragmentShadingRateKHR) -> VkResult #c_call;

PFN_vkCmdSetFragmentShadingRateKHR :: #type (a0: VkCommandBuffer, a1: *VkExtent2D, a2: *[2] VkFragmentShadingRateCombinerOpKHR) -> void #c_call;

// vkGetPhysicalDeviceFragmentShadingRatesKHR :: (physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: *u32, pFragmentShadingRates: *VkPhysicalDeviceFragmentShadingRateKHR) -> VkResult #foreign vulkan;

// vkCmdSetFragmentShadingRateKHR :: (commandBuffer: VkCommandBuffer, pFragmentSize: *VkExtent2D, combinerOps: [2] VkFragmentShadingRateCombinerOpKHR) -> void #foreign vulkan;

VkSurfaceProtectedCapabilitiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
    pNext: *void;
    supportsProtected: VkBool32;
}

VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR :: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

VkAttachmentReferenceStencilLayoutKHR :: VkAttachmentReferenceStencilLayout;

VkAttachmentDescriptionStencilLayoutKHR :: VkAttachmentDescriptionStencilLayout;

VkPhysicalDevicePresentWaitFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
    pNext: *void;
    presentWait: VkBool32;
}

PFN_vkWaitForPresentKHR :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: u64, a3: u64) -> VkResult #c_call;

// vkWaitForPresentKHR :: (device: VkDevice, swapchain: VkSwapchainKHR, presentId: u64, timeout: u64) -> VkResult #foreign vulkan;

VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR :: VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

VkPhysicalDeviceBufferDeviceAddressFeaturesKHR :: VkPhysicalDeviceBufferDeviceAddressFeatures;

VkBufferDeviceAddressInfoKHR :: VkBufferDeviceAddressInfo;

VkBufferOpaqueCaptureAddressCreateInfoKHR :: VkBufferOpaqueCaptureAddressCreateInfo;

VkMemoryOpaqueCaptureAddressAllocateInfoKHR :: VkMemoryOpaqueCaptureAddressAllocateInfo;

VkDeviceMemoryOpaqueCaptureAddressInfoKHR :: VkDeviceMemoryOpaqueCaptureAddressInfo;

PFN_vkGetBufferDeviceAddressKHR :: #type (a0: VkDevice, a1: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #c_call;

PFN_vkGetBufferOpaqueCaptureAddressKHR :: #type (a0: VkDevice, a1: *VkBufferDeviceAddressInfo) -> u64 #c_call;

PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR :: #type (a0: VkDevice, a1: *VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64 #c_call;

//###
// vkGetBufferDeviceAddressKHR :: (device: VkDevice, pInfo: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #foreign vulkan;

// vkGetBufferOpaqueCaptureAddressKHR :: (device: VkDevice, pInfo: *VkBufferDeviceAddressInfo) -> u64 #foreign vulkan;

// vkGetDeviceMemoryOpaqueCaptureAddressKHR :: (device: VkDevice, pInfo: *VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64 #foreign vulkan;

VkDeferredOperationKHR_T :: struct {
}

VkDeferredOperationKHR :: *VkDeferredOperationKHR_T;

PFN_vkCreateDeferredOperationKHR :: #type (a0: VkDevice, a1: *VkAllocationCallbacks, a2: *VkDeferredOperationKHR) -> VkResult #c_call;

PFN_vkDestroyDeferredOperationKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetDeferredOperationMaxConcurrencyKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR) -> u32 #c_call;

PFN_vkGetDeferredOperationResultKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR) -> VkResult #c_call;

PFN_vkDeferredOperationJoinKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR) -> VkResult #c_call;

//###
// vkCreateDeferredOperationKHR :: (device: VkDevice, pAllocator: *VkAllocationCallbacks, pDeferredOperation: *VkDeferredOperationKHR) -> VkResult #foreign vulkan;

// vkDestroyDeferredOperationKHR :: (device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkGetDeferredOperationMaxConcurrencyKHR :: (device: VkDevice, operation: VkDeferredOperationKHR) -> u32 #foreign vulkan;

// vkGetDeferredOperationResultKHR :: (device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult #foreign vulkan;

// vkDeferredOperationJoinKHR :: (device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult #foreign vulkan;

using VkPipelineExecutableStatisticFormatKHR :: enum u32 {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR :: 0;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR :: 1;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR :: 2;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR :: 3;
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR :: 2147483647;
}


VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    pNext: *void;
    pipelineExecutableInfo: VkBool32;
}

VkPipelineInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
    pNext: *void;
    pipeline: VkPipeline;
}

VkPipelineExecutablePropertiesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    pNext: *void;
    stages: VkShaderStageFlags;
    name: [256] u8;
    description: [256] u8;
    subgroupSize: u32;
}

VkPipelineExecutableInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
    pNext: *void;
    pipeline: VkPipeline;
    executableIndex: u32;
}

VkPipelineExecutableStatisticValueKHR :: union {
    b32: VkBool32;
    i64: s64;
    _u64: u64;
    f64: float64;
}

VkPipelineExecutableStatisticKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
    pNext: *void;
    name: [256] u8;
    description: [256] u8;
    format: VkPipelineExecutableStatisticFormatKHR;
    value: VkPipelineExecutableStatisticValueKHR;
}

VkPipelineExecutableInternalRepresentationKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    pNext: *void;
    name: [256] u8;
    description: [256] u8;
    isText: VkBool32;
    dataSize: u64;
    pData: *void;
}

PFN_vkGetPipelineExecutablePropertiesKHR :: #type (a0: VkDevice, a1: *VkPipelineInfoKHR, a2: *u32, a3: *VkPipelineExecutablePropertiesKHR) -> VkResult #c_call;

PFN_vkGetPipelineExecutableStatisticsKHR :: #type (a0: VkDevice, a1: *VkPipelineExecutableInfoKHR, a2: *u32, a3: *VkPipelineExecutableStatisticKHR) -> VkResult #c_call;

PFN_vkGetPipelineExecutableInternalRepresentationsKHR :: #type (a0: VkDevice, a1: *VkPipelineExecutableInfoKHR, a2: *u32, a3: *VkPipelineExecutableInternalRepresentationKHR) -> VkResult #c_call;

// vkGetPipelineExecutablePropertiesKHR :: (device: VkDevice, pPipelineInfo: *VkPipelineInfoKHR, pExecutableCount: *u32, pProperties: *VkPipelineExecutablePropertiesKHR) -> VkResult #foreign vulkan;

// vkGetPipelineExecutableStatisticsKHR :: (device: VkDevice, pExecutableInfo: *VkPipelineExecutableInfoKHR, pStatisticCount: *u32, pStatistics: *VkPipelineExecutableStatisticKHR) -> VkResult #foreign vulkan;

// vkGetPipelineExecutableInternalRepresentationsKHR :: (device: VkDevice, pExecutableInfo: *VkPipelineExecutableInfoKHR, pInternalRepresentationCount: *u32, pInternalRepresentations: *VkPipelineExecutableInternalRepresentationKHR) -> VkResult #foreign vulkan;

VkPipelineLibraryCreateInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
    pNext: *void;
    libraryCount: u32;
    pLibraries: *VkPipeline;
}

VkPresentIdKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_ID_KHR;
    pNext: *void;
    swapchainCount: u32;
    pPresentIds: *u64;
}

VkPhysicalDevicePresentIdFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
    pNext: *void;
    presentId: VkBool32;
}

VkFlags64 :: u64;

VkPipelineStageFlags2KHR :: VkFlags64;

VkPipelineStageFlagBits2KHR :: VkFlags64;

// VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2KHR;

// VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2KHR;

VkAccessFlags2KHR :: VkFlags64;

VkAccessFlagBits2KHR :: VkFlags64;

// VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2KHR;

// VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2KHR;

// VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2KHR;

// VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2KHR;

// VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2KHR;

// VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2KHR;

// VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2KHR;

// VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2KHR;

using VkSubmitFlagBitsKHR :: enum_flags u32 {
    VK_SUBMIT_PROTECTED_BIT_KHR :: 1;
    VK_SUBMIT_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkSubmitFlagsKHR :: VkSubmitFlagBitsKHR;

VkMemoryBarrier2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
    pNext: *void;
    srcStageMask: VkPipelineStageFlags2KHR;
    srcAccessMask: VkAccessFlags2KHR;
    dstStageMask: VkPipelineStageFlags2KHR;
    dstAccessMask: VkAccessFlags2KHR;
}

VkBufferMemoryBarrier2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
    pNext: *void;
    srcStageMask: VkPipelineStageFlags2KHR;
    srcAccessMask: VkAccessFlags2KHR;
    dstStageMask: VkPipelineStageFlags2KHR;
    dstAccessMask: VkAccessFlags2KHR;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    buffer: VkBuffer;
    offset: VkDeviceSize;
    size: VkDeviceSize;
}

VkImageMemoryBarrier2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
    pNext: *void;
    srcStageMask: VkPipelineStageFlags2KHR;
    srcAccessMask: VkAccessFlags2KHR;
    dstStageMask: VkPipelineStageFlags2KHR;
    dstAccessMask: VkAccessFlags2KHR;
    oldLayout: VkImageLayout;
    newLayout: VkImageLayout;
    srcQueueFamilyIndex: u32;
    dstQueueFamilyIndex: u32;
    image: VkImage;
    subresourceRange: VkImageSubresourceRange;
}

VkDependencyInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
    pNext: *void;
    dependencyFlags: VkDependencyFlags;
    memoryBarrierCount: u32;
    pMemoryBarriers: *VkMemoryBarrier2KHR;
    bufferMemoryBarrierCount: u32;
    pBufferMemoryBarriers: *VkBufferMemoryBarrier2KHR;
    imageMemoryBarrierCount: u32;
    pImageMemoryBarriers: *VkImageMemoryBarrier2KHR;
}

VkSemaphoreSubmitInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
    pNext: *void;
    semaphore: VkSemaphore;
    value: u64;
    stageMask: VkPipelineStageFlags2KHR;
    deviceIndex: u32;
}

VkCommandBufferSubmitInfoKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
    pNext: *void;
    commandBuffer: VkCommandBuffer;
    deviceMask: u32;
}

VkSubmitInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
    pNext: *void;
    flags: VkSubmitFlagsKHR;
    waitSemaphoreInfoCount: u32;
    pWaitSemaphoreInfos: *VkSemaphoreSubmitInfoKHR;
    commandBufferInfoCount: u32;
    pCommandBufferInfos: *VkCommandBufferSubmitInfoKHR;
    signalSemaphoreInfoCount: u32;
    pSignalSemaphoreInfos: *VkSemaphoreSubmitInfoKHR;
}

VkPhysicalDeviceSynchronization2FeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
    pNext: *void;
    synchronization2: VkBool32;
}

VkQueueFamilyCheckpointProperties2NV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
    pNext: *void;
    checkpointExecutionStageMask: VkPipelineStageFlags2KHR;
}

VkCheckpointData2NV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV;
    pNext: *void;
    stage: VkPipelineStageFlags2KHR;
    pCheckpointMarker: *void;
}

PFN_vkCmdSetEvent2KHR :: #type (a0: VkCommandBuffer, a1: VkEvent, a2: *VkDependencyInfoKHR) -> void #c_call;

PFN_vkCmdResetEvent2KHR :: #type (a0: VkCommandBuffer, a1: VkEvent, a2: VkPipelineStageFlags2KHR) -> void #c_call;

PFN_vkCmdWaitEvents2KHR :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkEvent, a3: *VkDependencyInfoKHR) -> void #c_call;

PFN_vkCmdPipelineBarrier2KHR :: #type (a0: VkCommandBuffer, a1: *VkDependencyInfoKHR) -> void #c_call;

PFN_vkCmdWriteTimestamp2KHR :: #type (a0: VkCommandBuffer, a1: VkPipelineStageFlags2KHR, a2: VkQueryPool, a3: u32) -> void #c_call;

PFN_vkQueueSubmit2KHR :: #type (a0: VkQueue, a1: u32, a2: *VkSubmitInfo2KHR, a3: VkFence) -> VkResult #c_call;

PFN_vkCmdWriteBufferMarker2AMD :: #type (a0: VkCommandBuffer, a1: VkPipelineStageFlags2KHR, a2: VkBuffer, a3: VkDeviceSize, a4: u32) -> void #c_call;

PFN_vkGetQueueCheckpointData2NV :: #type (a0: VkQueue, a1: *u32, a2: *VkCheckpointData2NV) -> void #c_call;

//###
// vkCmdSetEvent2KHR :: (commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: *VkDependencyInfoKHR) -> void #foreign vulkan;

// vkCmdResetEvent2KHR :: (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2KHR) -> void #foreign vulkan;

// vkCmdWaitEvents2KHR :: (commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: *VkEvent, pDependencyInfos: *VkDependencyInfoKHR) -> void #foreign vulkan;

// vkCmdPipelineBarrier2KHR :: (commandBuffer: VkCommandBuffer, pDependencyInfo: *VkDependencyInfoKHR) -> void #foreign vulkan;

// vkCmdWriteTimestamp2KHR :: (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2KHR, queryPool: VkQueryPool, query: u32) -> void #foreign vulkan;

// vkQueueSubmit2KHR :: (queue: VkQueue, submitCount: u32, pSubmits: *VkSubmitInfo2KHR, fence: VkFence) -> VkResult #foreign vulkan;

// vkCmdWriteBufferMarker2AMD :: (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2KHR, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) -> void #foreign vulkan;

// vkGetQueueCheckpointData2NV :: (queue: VkQueue, pCheckpointDataCount: *u32, pCheckpointData: *VkCheckpointData2NV) -> void #foreign vulkan;

VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
    pNext: *void;
    shaderSubgroupUniformControlFlow: VkBool32;
}

VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
    pNext: *void;
    shaderZeroInitializeWorkgroupMemory: VkBool32;
}

VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    pNext: *void;
    workgroupMemoryExplicitLayout: VkBool32;
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32;
    workgroupMemoryExplicitLayout8BitAccess: VkBool32;
    workgroupMemoryExplicitLayout16BitAccess: VkBool32;
}

VkBufferCopy2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
    pNext: *void;
    srcOffset: VkDeviceSize;
    dstOffset: VkDeviceSize;
    size: VkDeviceSize;
}

VkCopyBufferInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
    pNext: *void;
    srcBuffer: VkBuffer;
    dstBuffer: VkBuffer;
    regionCount: u32;
    pRegions: *VkBufferCopy2KHR;
}

VkImageCopy2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
    pNext: *void;
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

VkCopyImageInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
    pNext: *void;
    srcImage: VkImage;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: *VkImageCopy2KHR;
}

VkBufferImageCopy2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
    pNext: *void;
    bufferOffset: VkDeviceSize;
    bufferRowLength: u32;
    bufferImageHeight: u32;
    imageSubresource: VkImageSubresourceLayers;
    imageOffset: VkOffset3D;
    imageExtent: VkExtent3D;
}

VkCopyBufferToImageInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
    pNext: *void;
    srcBuffer: VkBuffer;
    dstImage: VkImage;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: *VkBufferImageCopy2KHR;
}

VkCopyImageToBufferInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
    pNext: *void;
    srcImage: VkImage;
    srcImageLayout: VkImageLayout;
    dstBuffer: VkBuffer;
    regionCount: u32;
    pRegions: *VkBufferImageCopy2KHR;
}

VkImageBlit2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
    pNext: *void;
    srcSubresource: VkImageSubresourceLayers;
    srcOffsets: [2] VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffsets: [2] VkOffset3D;
}

VkBlitImageInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
    pNext: *void;
    srcImage: VkImage;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: *VkImageBlit2KHR;
    filter: VkFilter;
}

VkImageResolve2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
    pNext: *void;
    srcSubresource: VkImageSubresourceLayers;
    srcOffset: VkOffset3D;
    dstSubresource: VkImageSubresourceLayers;
    dstOffset: VkOffset3D;
    extent: VkExtent3D;
}

VkResolveImageInfo2KHR :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
    pNext: *void;
    srcImage: VkImage;
    srcImageLayout: VkImageLayout;
    dstImage: VkImage;
    dstImageLayout: VkImageLayout;
    regionCount: u32;
    pRegions: *VkImageResolve2KHR;
}

PFN_vkCmdCopyBuffer2KHR :: #type (a0: VkCommandBuffer, a1: *VkCopyBufferInfo2KHR) -> void #c_call;

PFN_vkCmdCopyImage2KHR :: #type (a0: VkCommandBuffer, a1: *VkCopyImageInfo2KHR) -> void #c_call;

PFN_vkCmdCopyBufferToImage2KHR :: #type (a0: VkCommandBuffer, a1: *VkCopyBufferToImageInfo2KHR) -> void #c_call;

PFN_vkCmdCopyImageToBuffer2KHR :: #type (a0: VkCommandBuffer, a1: *VkCopyImageToBufferInfo2KHR) -> void #c_call;

PFN_vkCmdBlitImage2KHR :: #type (a0: VkCommandBuffer, a1: *VkBlitImageInfo2KHR) -> void #c_call;

PFN_vkCmdResolveImage2KHR :: #type (a0: VkCommandBuffer, a1: *VkResolveImageInfo2KHR) -> void #c_call;

//###
// vkCmdCopyBuffer2KHR :: (commandBuffer: VkCommandBuffer, pCopyBufferInfo: *VkCopyBufferInfo2KHR) -> void #foreign vulkan;

// vkCmdCopyImage2KHR :: (commandBuffer: VkCommandBuffer, pCopyImageInfo: *VkCopyImageInfo2KHR) -> void #foreign vulkan;

// vkCmdCopyBufferToImage2KHR :: (commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: *VkCopyBufferToImageInfo2KHR) -> void #foreign vulkan;

// vkCmdCopyImageToBuffer2KHR :: (commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: *VkCopyImageToBufferInfo2KHR) -> void #foreign vulkan;

// vkCmdBlitImage2KHR :: (commandBuffer: VkCommandBuffer, pBlitImageInfo: *VkBlitImageInfo2KHR) -> void #foreign vulkan;

// vkCmdResolveImage2KHR :: (commandBuffer: VkCommandBuffer, pResolveImageInfo: *VkResolveImageInfo2KHR) -> void #foreign vulkan;

VkDebugReportCallbackEXT_T :: struct {
}

VkDebugReportCallbackEXT :: *VkDebugReportCallbackEXT_T;

using VkDebugReportObjectTypeEXT :: enum u32 {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT :: 0;
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT :: 1;
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT :: 2;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT :: 3;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT :: 4;
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT :: 5;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT :: 6;
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT :: 7;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT :: 8;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT :: 9;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT :: 10;
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT :: 11;
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT :: 12;
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT :: 13;
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT :: 14;
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT :: 15;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT :: 16;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT :: 17;
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT :: 18;
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT :: 19;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT :: 20;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT :: 21;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT :: 22;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT :: 23;
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT :: 24;
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT :: 25;
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT :: 26;
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT :: 27;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT :: 28;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT :: 29;
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT :: 30;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT :: 33;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT :: 1000156000;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT :: 1000085000;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT :: 1000029000;
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT :: 1000029001;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT :: 1000150000;
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT :: 1000165000;
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT :: 28;
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT :: 33;
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT :: 1000085000;
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT :: 1000156000;
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT :: 2147483647;
}

using VkDebugReportFlagBitsEXT :: enum_flags u32 {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT :: 1;
    VK_DEBUG_REPORT_WARNING_BIT_EXT :: 2;
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT :: 4;
    VK_DEBUG_REPORT_ERROR_BIT_EXT :: 8;
    VK_DEBUG_REPORT_DEBUG_BIT_EXT :: 16;
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkDebugReportFlagsEXT :: VkDebugReportFlagBitsEXT;

PFN_vkDebugReportCallbackEXT :: #type (a0: VkDebugReportFlagsEXT, a1: VkDebugReportObjectTypeEXT, a2: u64, a3: u64, a4: s32, a5: *u8, a6: *u8, a7: *void) -> VkBool32 #c_call;

VkDebugReportCallbackCreateInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;
    pNext: *void;
    flags: VkDebugReportFlagsEXT;
    pfnCallback: PFN_vkDebugReportCallbackEXT;
    pUserData: *void;
}

PFN_vkCreateDebugReportCallbackEXT :: #type (a0: VkInstance, a1: *VkDebugReportCallbackCreateInfoEXT, a2: *VkAllocationCallbacks, a3: *VkDebugReportCallbackEXT) -> VkResult #c_call;

PFN_vkDestroyDebugReportCallbackEXT :: #type (a0: VkInstance, a1: VkDebugReportCallbackEXT, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkDebugReportMessageEXT :: #type (a0: VkInstance, a1: VkDebugReportFlagsEXT, a2: VkDebugReportObjectTypeEXT, a3: u64, a4: u64, a5: s32, a6: *u8, a7: *u8) -> void #c_call;

//###
// vkCreateDebugReportCallbackEXT :: (instance: VkInstance, pCreateInfo: *VkDebugReportCallbackCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pCallback: *VkDebugReportCallbackEXT) -> VkResult #foreign vulkan;

// vkDestroyDebugReportCallbackEXT :: (instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkDebugReportMessageEXT :: (instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: u64, messageCode: s32, pLayerPrefix: *u8, pMessage: *u8) -> void #foreign vulkan;

using VkRasterizationOrderAMD :: enum u32 {
    VK_RASTERIZATION_ORDER_STRICT_AMD :: 0;
    VK_RASTERIZATION_ORDER_RELAXED_AMD :: 1;
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD :: 2147483647;
}

VkPipelineRasterizationStateRasterizationOrderAMD :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    pNext: *void;
    rasterizationOrder: VkRasterizationOrderAMD;
}

VkDebugMarkerObjectNameInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    pNext: *void;
    objectType: VkDebugReportObjectTypeEXT;
    object: u64;
    pObjectName: *u8;
}

VkDebugMarkerObjectTagInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    pNext: *void;
    objectType: VkDebugReportObjectTypeEXT;
    object: u64;
    tagName: u64;
    tagSize: u64;
    pTag: *void;
}

VkDebugMarkerMarkerInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
    pNext: *void;
    pMarkerName: *u8;
    color: [4] float32;
}

PFN_vkDebugMarkerSetObjectTagEXT :: #type (a0: VkDevice, a1: *VkDebugMarkerObjectTagInfoEXT) -> VkResult #c_call;

PFN_vkDebugMarkerSetObjectNameEXT :: #type (a0: VkDevice, a1: *VkDebugMarkerObjectNameInfoEXT) -> VkResult #c_call;

PFN_vkCmdDebugMarkerBeginEXT :: #type (a0: VkCommandBuffer, a1: *VkDebugMarkerMarkerInfoEXT) -> void #c_call;

PFN_vkCmdDebugMarkerEndEXT :: #type (a0: VkCommandBuffer) -> void #c_call;

PFN_vkCmdDebugMarkerInsertEXT :: #type (a0: VkCommandBuffer, a1: *VkDebugMarkerMarkerInfoEXT) -> void #c_call;

//###
// vkDebugMarkerSetObjectTagEXT :: (device: VkDevice, pTagInfo: *VkDebugMarkerObjectTagInfoEXT) -> VkResult #foreign vulkan;

// vkDebugMarkerSetObjectNameEXT :: (device: VkDevice, pNameInfo: *VkDebugMarkerObjectNameInfoEXT) -> VkResult #foreign vulkan;

// vkCmdDebugMarkerBeginEXT :: (commandBuffer: VkCommandBuffer, pMarkerInfo: *VkDebugMarkerMarkerInfoEXT) -> void #foreign vulkan;

// vkCmdDebugMarkerEndEXT :: (commandBuffer: VkCommandBuffer) -> void #foreign vulkan;

// vkCmdDebugMarkerInsertEXT :: (commandBuffer: VkCommandBuffer, pMarkerInfo: *VkDebugMarkerMarkerInfoEXT) -> void #foreign vulkan;

VkDedicatedAllocationImageCreateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    pNext: *void;
    dedicatedAllocation: VkBool32;
}

VkDedicatedAllocationBufferCreateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    pNext: *void;
    dedicatedAllocation: VkBool32;
}

VkDedicatedAllocationMemoryAllocateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    pNext: *void;
    image: VkImage;
    buffer: VkBuffer;
}

VkPipelineRasterizationStateStreamCreateFlagsEXT :: VkFlags;

VkPhysicalDeviceTransformFeedbackFeaturesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    pNext: *void;
    transformFeedback: VkBool32;
    geometryStreams: VkBool32;
}

VkPhysicalDeviceTransformFeedbackPropertiesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    pNext: *void;
    maxTransformFeedbackStreams: u32;
    maxTransformFeedbackBuffers: u32;
    maxTransformFeedbackBufferSize: VkDeviceSize;
    maxTransformFeedbackStreamDataSize: u32;
    maxTransformFeedbackBufferDataSize: u32;
    maxTransformFeedbackBufferDataStride: u32;
    transformFeedbackQueries: VkBool32;
    transformFeedbackStreamsLinesTriangles: VkBool32;
    transformFeedbackRasterizationStreamSelect: VkBool32;
    transformFeedbackDraw: VkBool32;
}

VkPipelineRasterizationStateStreamCreateInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    pNext: *void;
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT;
    rasterizationStream: u32;
}

PFN_vkCmdBindTransformFeedbackBuffersEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkBuffer, a4: *VkDeviceSize, a5: *VkDeviceSize) -> void #c_call;

PFN_vkCmdBeginTransformFeedbackEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkBuffer, a4: *VkDeviceSize) -> void #c_call;

PFN_vkCmdEndTransformFeedbackEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkBuffer, a4: *VkDeviceSize) -> void #c_call;

PFN_vkCmdBeginQueryIndexedEXT :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32, a3: VkQueryControlFlags, a4: u32) -> void #c_call;

PFN_vkCmdEndQueryIndexedEXT :: #type (a0: VkCommandBuffer, a1: VkQueryPool, a2: u32, a3: u32) -> void #c_call;

PFN_vkCmdDrawIndirectByteCountEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

//###
// vkCmdBindTransformFeedbackBuffersEXT :: (commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize, pSizes: *VkDeviceSize) -> void #foreign vulkan;

// vkCmdBeginTransformFeedbackEXT :: (commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *VkBuffer, pCounterBufferOffsets: *VkDeviceSize) -> void #foreign vulkan;

// vkCmdEndTransformFeedbackEXT :: (commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *VkBuffer, pCounterBufferOffsets: *VkDeviceSize) -> void #foreign vulkan;

// vkCmdBeginQueryIndexedEXT :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) -> void #foreign vulkan;

// vkCmdEndQueryIndexedEXT :: (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) -> void #foreign vulkan;

// vkCmdDrawIndirectByteCountEXT :: (commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) -> void #foreign vulkan;

VkCuModuleNVX_T :: struct {
}

VkCuModuleNVX :: *VkCuModuleNVX_T;

VkCuFunctionNVX_T :: struct {
}

VkCuFunctionNVX :: *VkCuFunctionNVX_T;

VkCuModuleCreateInfoNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX;
    pNext: *void;
    dataSize: u64;
    pData: *void;
}

VkCuFunctionCreateInfoNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX;
    pNext: *void;
    module: VkCuModuleNVX;
    pName: *u8;
}

VkCuLaunchInfoNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX;
    pNext: *void;
    function: VkCuFunctionNVX;
    gridDimX: u32;
    gridDimY: u32;
    gridDimZ: u32;
    blockDimX: u32;
    blockDimY: u32;
    blockDimZ: u32;
    sharedMemBytes: u32;
    paramCount: u64;
    pParams: **void;
    extraCount: u64;
    pExtras: **void;
}

PFN_vkCreateCuModuleNVX :: #type (a0: VkDevice, a1: *VkCuModuleCreateInfoNVX, a2: *VkAllocationCallbacks, a3: *VkCuModuleNVX) -> VkResult #c_call;

PFN_vkCreateCuFunctionNVX :: #type (a0: VkDevice, a1: *VkCuFunctionCreateInfoNVX, a2: *VkAllocationCallbacks, a3: *VkCuFunctionNVX) -> VkResult #c_call;

PFN_vkDestroyCuModuleNVX :: #type (a0: VkDevice, a1: VkCuModuleNVX, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkDestroyCuFunctionNVX :: #type (a0: VkDevice, a1: VkCuFunctionNVX, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCmdCuLaunchKernelNVX :: #type (a0: VkCommandBuffer, a1: *VkCuLaunchInfoNVX) -> void #c_call;

//###
// vkCreateCuModuleNVX :: (device: VkDevice, pCreateInfo: *VkCuModuleCreateInfoNVX, pAllocator: *VkAllocationCallbacks, pModule: *VkCuModuleNVX) -> VkResult #foreign vulkan;

// vkCreateCuFunctionNVX :: (device: VkDevice, pCreateInfo: *VkCuFunctionCreateInfoNVX, pAllocator: *VkAllocationCallbacks, pFunction: *VkCuFunctionNVX) -> VkResult #foreign vulkan;

// vkDestroyCuModuleNVX :: (device: VkDevice, module: VkCuModuleNVX, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkDestroyCuFunctionNVX :: (device: VkDevice, function: VkCuFunctionNVX, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkCmdCuLaunchKernelNVX :: (commandBuffer: VkCommandBuffer, pLaunchInfo: *VkCuLaunchInfoNVX) -> void #foreign vulkan;

VkImageViewHandleInfoNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
    pNext: *void;
    imageView: VkImageView;
    descriptorType: VkDescriptorType;
    sampler: VkSampler;
}

VkImageViewAddressPropertiesNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    pNext: *void;
    deviceAddress: VkDeviceAddress;
    size: VkDeviceSize;
}

PFN_vkGetImageViewHandleNVX :: #type (a0: VkDevice, a1: *VkImageViewHandleInfoNVX) -> u32 #c_call;

PFN_vkGetImageViewAddressNVX :: #type (a0: VkDevice, a1: VkImageView, a2: *VkImageViewAddressPropertiesNVX) -> VkResult #c_call;

//###
// vkGetImageViewHandleNVX :: (device: VkDevice, pInfo: *VkImageViewHandleInfoNVX) -> u32 #foreign vulkan;

// vkGetImageViewAddressNVX :: (device: VkDevice, imageView: VkImageView, pProperties: *VkImageViewAddressPropertiesNVX) -> VkResult #foreign vulkan;

PFN_vkCmdDrawIndirectCountAMD :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

PFN_vkCmdDrawIndexedIndirectCountAMD :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

//###
// vkCmdDrawIndirectCountAMD :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

// vkCmdDrawIndexedIndirectCountAMD :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

VkTextureLODGatherFormatPropertiesAMD :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    pNext: *void;
    supportsTextureGatherLODBiasAMD: VkBool32;
}

using VkShaderInfoTypeAMD :: enum u32 {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD :: 0;
    VK_SHADER_INFO_TYPE_BINARY_AMD :: 1;
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD :: 2;
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD :: 2147483647;
}

VkShaderResourceUsageAMD :: struct {
    numUsedVgprs: u32;
    numUsedSgprs: u32;
    ldsSizePerLocalWorkGroup: u32;
    ldsUsageSizeInBytes: u64;
    scratchMemUsageInBytes: u64;
}

VkShaderStatisticsInfoAMD :: struct {
    shaderStageMask: VkShaderStageFlags;
    resourceUsage: VkShaderResourceUsageAMD;
    numPhysicalVgprs: u32;
    numPhysicalSgprs: u32;
    numAvailableVgprs: u32;
    numAvailableSgprs: u32;
    computeWorkGroupSize: [3] u32;
}

PFN_vkGetShaderInfoAMD :: #type (a0: VkDevice, a1: VkPipeline, a2: VkShaderStageFlagBits, a3: VkShaderInfoTypeAMD, a4: *u64, a5: *void) -> VkResult #c_call;

// vkGetShaderInfoAMD :: (device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: *u64, pInfo: *void) -> VkResult #foreign vulkan;

VkPhysicalDeviceCornerSampledImageFeaturesNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    pNext: *void;
    cornerSampledImage: VkBool32;
}

using VkExternalMemoryHandleTypeFlagBitsNV :: enum u32 {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV :: 1;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV :: 2;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV :: 4;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV :: 8;
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV :: 2147483647;
}

VkExternalMemoryHandleTypeFlagsNV :: VkFlags;

using VkExternalMemoryFeatureFlagBitsNV :: enum u32 {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV :: 1;
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV :: 2;
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV :: 4;
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV :: 2147483647;
}

VkExternalMemoryFeatureFlagsNV :: VkFlags;

VkExternalImageFormatPropertiesNV :: struct {
    imageFormatProperties: VkImageFormatProperties;
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV;
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV;
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV;
}

PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV :: #type (a0: VkPhysicalDevice, a1: VkFormat, a2: VkImageType, a3: VkImageTiling, a4: VkImageUsageFlags, a5: VkImageCreateFlags, a6: VkExternalMemoryHandleTypeFlagsNV, a7: *VkExternalImageFormatPropertiesNV) -> VkResult #c_call;

// vkGetPhysicalDeviceExternalImageFormatPropertiesNV :: (physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *VkExternalImageFormatPropertiesNV) -> VkResult #foreign vulkan;

VkExternalMemoryImageCreateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    pNext: *void;
    handleTypes: VkExternalMemoryHandleTypeFlagsNV;
}

VkExportMemoryAllocateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
    pNext: *void;
    handleTypes: VkExternalMemoryHandleTypeFlagsNV;
}

using VkValidationCheckEXT :: enum u32 {
    VK_VALIDATION_CHECK_ALL_EXT :: 0;
    VK_VALIDATION_CHECK_SHADERS_EXT :: 1;
    VK_VALIDATION_CHECK_MAX_ENUM_EXT :: 2147483647;
}

VkValidationFlagsEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
    pNext: *void;
    disabledValidationCheckCount: u32;
    pDisabledValidationChecks: *VkValidationCheckEXT;
}

VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
    pNext: *void;
    textureCompressionASTC_HDR: VkBool32;
}

VkImageViewASTCDecodeModeEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    pNext: *void;
    decodeMode: VkFormat;
}

VkPhysicalDeviceASTCDecodeFeaturesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    pNext: *void;
    decodeModeSharedExponent: VkBool32;
}

using VkConditionalRenderingFlagBitsEXT :: enum_flags u32 {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT :: 1;
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkConditionalRenderingFlagsEXT :: VkConditionalRenderingFlagBitsEXT;

VkConditionalRenderingBeginInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    pNext: *void;
    buffer: VkBuffer;
    offset: VkDeviceSize;
    flags: VkConditionalRenderingFlagsEXT;
}

VkPhysicalDeviceConditionalRenderingFeaturesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    pNext: *void;
    conditionalRendering: VkBool32;
    inheritedConditionalRendering: VkBool32;
}

VkCommandBufferInheritanceConditionalRenderingInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    pNext: *void;
    conditionalRenderingEnable: VkBool32;
}

PFN_vkCmdBeginConditionalRenderingEXT :: #type (a0: VkCommandBuffer, a1: *VkConditionalRenderingBeginInfoEXT) -> void #c_call;

PFN_vkCmdEndConditionalRenderingEXT :: #type (a0: VkCommandBuffer) -> void #c_call;

// vkCmdBeginConditionalRenderingEXT :: (commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: *VkConditionalRenderingBeginInfoEXT) -> void #foreign vulkan;

// vkCmdEndConditionalRenderingEXT :: (commandBuffer: VkCommandBuffer) -> void #foreign vulkan;

VkViewportWScalingNV :: struct {
    xcoeff: float32;
    ycoeff: float32;
}

VkPipelineViewportWScalingStateCreateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    pNext: *void;
    viewportWScalingEnable: VkBool32;
    viewportCount: u32;
    pViewportWScalings: *VkViewportWScalingNV;
}

PFN_vkCmdSetViewportWScalingNV :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkViewportWScalingNV) -> void #c_call;

//###
// vkCmdSetViewportWScalingNV :: (commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: *VkViewportWScalingNV) -> void #foreign vulkan;

PFN_vkReleaseDisplayEXT :: #type (a0: VkPhysicalDevice, a1: VkDisplayKHR) -> VkResult #c_call;

// vkReleaseDisplayEXT :: (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult #foreign vulkan;

using VkSurfaceCounterFlagBitsEXT :: enum_flags u32 {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT :: 1;
    VK_SURFACE_COUNTER_VBLANK_EXT :: 1;
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkSurfaceCounterFlagsEXT :: VkSurfaceCounterFlagBitsEXT;

VkSurfaceCapabilities2EXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT;
    pNext: *void;
    minImageCount: u32;
    maxImageCount: u32;
    currentExtent: VkExtent2D;
    minImageExtent: VkExtent2D;
    maxImageExtent: VkExtent2D;
    maxImageArrayLayers: u32;
    supportedTransforms: VkSurfaceTransformFlagsKHR;
    currentTransform: VkSurfaceTransformFlagBitsKHR;
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR;
    supportedUsageFlags: VkImageUsageFlags;
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT;
}

PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT :: #type (a0: VkPhysicalDevice, a1: VkSurfaceKHR, a2: *VkSurfaceCapabilities2EXT) -> VkResult #c_call;

// vkGetPhysicalDeviceSurfaceCapabilities2EXT :: (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *VkSurfaceCapabilities2EXT) -> VkResult #foreign vulkan;

using VkDisplayPowerStateEXT :: enum u32 {
    VK_DISPLAY_POWER_STATE_OFF_EXT :: 0;
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT :: 1;
    VK_DISPLAY_POWER_STATE_ON_EXT :: 2;
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT :: 2147483647;
}

using VkDeviceEventTypeEXT :: enum u32 {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT :: 0;
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT :: 2147483647;
}

using VkDisplayEventTypeEXT :: enum u32 {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT :: 0;
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT :: 2147483647;
}

VkDisplayPowerInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
    pNext: *void;
    powerState: VkDisplayPowerStateEXT;
}

VkDeviceEventInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
    pNext: *void;
    deviceEvent: VkDeviceEventTypeEXT;
}

VkDisplayEventInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
    pNext: *void;
    displayEvent: VkDisplayEventTypeEXT;
}

VkSwapchainCounterCreateInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    pNext: *void;
    surfaceCounters: VkSurfaceCounterFlagsEXT;
}

PFN_vkDisplayPowerControlEXT :: #type (a0: VkDevice, a1: VkDisplayKHR, a2: *VkDisplayPowerInfoEXT) -> VkResult #c_call;

PFN_vkRegisterDeviceEventEXT :: #type (a0: VkDevice, a1: *VkDeviceEventInfoEXT, a2: *VkAllocationCallbacks, a3: *VkFence) -> VkResult #c_call;

PFN_vkRegisterDisplayEventEXT :: #type (a0: VkDevice, a1: VkDisplayKHR, a2: *VkDisplayEventInfoEXT, a3: *VkAllocationCallbacks, a4: *VkFence) -> VkResult #c_call;

PFN_vkGetSwapchainCounterEXT :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: VkSurfaceCounterFlagBitsEXT, a3: *u64) -> VkResult #c_call;

// vkDisplayPowerControlEXT :: (device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: *VkDisplayPowerInfoEXT) -> VkResult #foreign vulkan;

// vkRegisterDeviceEventEXT :: (device: VkDevice, pDeviceEventInfo: *VkDeviceEventInfoEXT, pAllocator: *VkAllocationCallbacks, pFence: *VkFence) -> VkResult #foreign vulkan;

// vkRegisterDisplayEventEXT :: (device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: *VkDisplayEventInfoEXT, pAllocator: *VkAllocationCallbacks, pFence: *VkFence) -> VkResult #foreign vulkan;

// vkGetSwapchainCounterEXT :: (device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: *u64) -> VkResult #foreign vulkan;

VkRefreshCycleDurationGOOGLE :: struct {
    refreshDuration: u64;
}

VkPastPresentationTimingGOOGLE :: struct {
    presentID: u32;
    desiredPresentTime: u64;
    actualPresentTime: u64;
    earliestPresentTime: u64;
    presentMargin: u64;
}

VkPresentTimeGOOGLE :: struct {
    presentID: u32;
    desiredPresentTime: u64;
}

VkPresentTimesInfoGOOGLE :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
    pNext: *void;
    swapchainCount: u32;
    pTimes: *VkPresentTimeGOOGLE;
}

PFN_vkGetRefreshCycleDurationGOOGLE :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: *VkRefreshCycleDurationGOOGLE) -> VkResult #c_call;

PFN_vkGetPastPresentationTimingGOOGLE :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: *u32, a3: *VkPastPresentationTimingGOOGLE) -> VkResult #c_call;

// vkGetRefreshCycleDurationGOOGLE :: (device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: *VkRefreshCycleDurationGOOGLE) -> VkResult #foreign vulkan;

// vkGetPastPresentationTimingGOOGLE :: (device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: *u32, pPresentationTimings: *VkPastPresentationTimingGOOGLE) -> VkResult #foreign vulkan;

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    pNext: *void;
    perViewPositionAllComponents: VkBool32;
}

using VkViewportCoordinateSwizzleNV :: enum u32 {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV :: 0;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV :: 1;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV :: 2;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV :: 3;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV :: 4;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV :: 5;
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV :: 6;
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV :: 7;
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV :: 2147483647;
}

VkPipelineViewportSwizzleStateCreateFlagsNV :: VkFlags;

VkViewportSwizzleNV :: struct {
    x: VkViewportCoordinateSwizzleNV;
    y: VkViewportCoordinateSwizzleNV;
    z: VkViewportCoordinateSwizzleNV;
    w: VkViewportCoordinateSwizzleNV;
}

VkPipelineViewportSwizzleStateCreateInfoNV :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    pNext: *void;
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV;
    viewportCount: u32;
    pViewportSwizzles: *VkViewportSwizzleNV;
}

using VkDiscardRectangleModeEXT :: enum u32 {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT :: 0;
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT :: 1;
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT :: 2147483647;
}

VkPipelineDiscardRectangleStateCreateFlagsEXT :: VkFlags;

VkPhysicalDeviceDiscardRectanglePropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxDiscardRectangles: u32;
}

VkPipelineDiscardRectangleStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT;
    discardRectangleMode: VkDiscardRectangleModeEXT;
    discardRectangleCount: u32;
    pDiscardRectangles: *VkRect2D;
}

PFN_vkCmdSetDiscardRectangleEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkRect2D) -> void #c_call;

//###
// vkCmdSetDiscardRectangleEXT :: (commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: *VkRect2D) -> void #foreign vulkan;

using VkConservativeRasterizationModeEXT :: enum u32 {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT :: 0;
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT :: 1;
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT :: 2;
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT :: 2147483647;
}

VkPipelineRasterizationConservativeStateCreateFlagsEXT :: VkFlags;

VkPhysicalDeviceConservativeRasterizationPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    primitiveOverestimationSize: float32;
    maxExtraPrimitiveOverestimationSize: float32;
    extraPrimitiveOverestimationSizeGranularity: float32;
    primitiveUnderestimation: VkBool32;
    conservativePointAndLineRasterization: VkBool32;
    degenerateTrianglesRasterized: VkBool32;
    degenerateLinesRasterized: VkBool32;
    fullyCoveredFragmentShaderInputVariable: VkBool32;
    conservativeRasterizationPostDepthCoverage: VkBool32;
}

VkPipelineRasterizationConservativeStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT;
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT;
    extraPrimitiveOverestimationSize: float32;
}

VkPipelineRasterizationDepthClipStateCreateFlagsEXT :: VkFlags;

VkPhysicalDeviceDepthClipEnableFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    depthClipEnable: VkBool32;
}

VkPipelineRasterizationDepthClipStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
    depthClipEnable: VkBool32;
}

VkXYColorEXT :: struct {
    x: float32;
    y: float32;
}

VkHdrMetadataEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
    pNext: *void;
    displayPrimaryRed: VkXYColorEXT;
    displayPrimaryGreen: VkXYColorEXT;
    displayPrimaryBlue: VkXYColorEXT;
    whitePoint: VkXYColorEXT;
    maxLuminance: float32;
    minLuminance: float32;
    maxContentLightLevel: float32;
    maxFrameAverageLightLevel: float32;
}

PFN_vkSetHdrMetadataEXT :: #type (a0: VkDevice, a1: u32, a2: *VkSwapchainKHR, a3: *VkHdrMetadataEXT) -> void #c_call;

//###
//vkSetHdrMetadataEXT :: (device: VkDevice, swapchainCount: u32, pSwapchains: *VkSwapchainKHR, pMetadata: *VkHdrMetadataEXT) -> void #foreign vulkan;

VkDebugUtilsMessengerEXT_T :: struct {
}

VkDebugUtilsMessengerEXT :: *VkDebugUtilsMessengerEXT_T;

VkDebugUtilsMessengerCallbackDataFlagsEXT :: VkFlags;

using VkDebugUtilsMessageSeverityFlagBitsEXT :: enum_flags u32 {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT :: 1;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT :: 16;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT :: 256;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT :: 4096;
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

using VkDebugUtilsMessageTypeFlagBitsEXT :: enum_flags u32 {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT :: 1;
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT :: 2;
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT :: 4;
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkDebugUtilsMessageTypeFlagsEXT :: VkDebugUtilsMessageTypeFlagBitsEXT;

VkDebugUtilsMessageSeverityFlagsEXT :: VkDebugUtilsMessageSeverityFlagBitsEXT;

VkDebugUtilsMessengerCreateFlagsEXT :: VkFlags;

VkDebugUtilsLabelEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
    pNext: *void;
    pLabelName: *u8;
    color: [4] float32;
}

VkDebugUtilsObjectNameInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    pNext: *void;
    objectType: VkObjectType;
    objectHandle: u64;
    pObjectName: *u8;
}


// https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsMessengerCallbackDataEXT.html

VkDebugUtilsMessengerCallbackDataEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    pNext: *void;
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT;
    pMessageIdName: *u8;
    messageIdNumber: s32;
    pMessage: *u8;
    queueLabelCount: u32;
    pQueueLabels: *VkDebugUtilsLabelEXT;
    cmdBufLabelCount: u32;
    pCmdBufLabels: *VkDebugUtilsLabelEXT;
    objectCount: u32;
    pObjects: *VkDebugUtilsObjectNameInfoEXT;
}

PFN_vkDebugUtilsMessengerCallbackEXT :: #type (a0: VkDebugUtilsMessageSeverityFlagBitsEXT, a1: VkDebugUtilsMessageTypeFlagsEXT, a2: *VkDebugUtilsMessengerCallbackDataEXT, a3: *void) -> VkBool32 #c_call;

VkDebugUtilsMessengerCreateInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    pNext: *void;
    flags: VkDebugUtilsMessengerCreateFlagsEXT;
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT;
    messageType: VkDebugUtilsMessageTypeFlagsEXT;
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT;
    pUserData: *void;
}

VkDebugUtilsObjectTagInfoEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    pNext: *void;
    objectType: VkObjectType;
    objectHandle: u64;
    tagName: u64;
    tagSize: u64;
    pTag: *void;
}

PFN_vkSetDebugUtilsObjectNameEXT :: #type (a0: VkDevice, a1: *VkDebugUtilsObjectNameInfoEXT) -> VkResult #c_call;

PFN_vkSetDebugUtilsObjectTagEXT :: #type (a0: VkDevice, a1: *VkDebugUtilsObjectTagInfoEXT) -> VkResult #c_call;

PFN_vkQueueBeginDebugUtilsLabelEXT :: #type (a0: VkQueue, a1: *VkDebugUtilsLabelEXT) -> void #c_call;

PFN_vkQueueEndDebugUtilsLabelEXT :: #type (a0: VkQueue) -> void #c_call;

PFN_vkQueueInsertDebugUtilsLabelEXT :: #type (a0: VkQueue, a1: *VkDebugUtilsLabelEXT) -> void #c_call;

PFN_vkCmdBeginDebugUtilsLabelEXT :: #type (a0: VkCommandBuffer, a1: *VkDebugUtilsLabelEXT) -> void #c_call;

PFN_vkCmdEndDebugUtilsLabelEXT :: #type (a0: VkCommandBuffer) -> void #c_call;

PFN_vkCmdInsertDebugUtilsLabelEXT :: #type (a0: VkCommandBuffer, a1: *VkDebugUtilsLabelEXT) -> void #c_call;

PFN_vkCreateDebugUtilsMessengerEXT :: #type (a0: VkInstance, a1: *VkDebugUtilsMessengerCreateInfoEXT, a2: *VkAllocationCallbacks, a3: *VkDebugUtilsMessengerEXT) -> VkResult #c_call;

PFN_vkDestroyDebugUtilsMessengerEXT :: #type (a0: VkInstance, a1: VkDebugUtilsMessengerEXT, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkSubmitDebugUtilsMessageEXT :: #type (a0: VkInstance, a1: VkDebugUtilsMessageSeverityFlagBitsEXT, a2: VkDebugUtilsMessageTypeFlagsEXT, a3: *VkDebugUtilsMessengerCallbackDataEXT) -> void #c_call;

//###
// vkSetDebugUtilsObjectNameEXT :: (device: VkDevice, pNameInfo: *VkDebugUtilsObjectNameInfoEXT) -> VkResult #foreign vulkan;

// vkSetDebugUtilsObjectTagEXT :: (device: VkDevice, pTagInfo: *VkDebugUtilsObjectTagInfoEXT) -> VkResult #foreign vulkan;

// vkQueueBeginDebugUtilsLabelEXT :: (queue: VkQueue, pLabelInfo: *VkDebugUtilsLabelEXT) -> void #foreign vulkan;

// vkQueueEndDebugUtilsLabelEXT :: (queue: VkQueue) -> void #foreign vulkan;

// vkQueueInsertDebugUtilsLabelEXT :: (queue: VkQueue, pLabelInfo: *VkDebugUtilsLabelEXT) -> void #foreign vulkan;

// vkCmdBeginDebugUtilsLabelEXT :: (commandBuffer: VkCommandBuffer, pLabelInfo: *VkDebugUtilsLabelEXT) -> void #foreign vulkan;

// vkCmdEndDebugUtilsLabelEXT :: (commandBuffer: VkCommandBuffer) -> void #foreign vulkan;

// vkCmdInsertDebugUtilsLabelEXT :: (commandBuffer: VkCommandBuffer, pLabelInfo: *VkDebugUtilsLabelEXT) -> void #foreign vulkan;

// vkCreateDebugUtilsMessengerEXT :: (instance: VkInstance, pCreateInfo: *VkDebugUtilsMessengerCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pMessenger: *VkDebugUtilsMessengerEXT) -> VkResult #foreign vulkan;

// vkDestroyDebugUtilsMessengerEXT :: (instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkSubmitDebugUtilsMessageEXT :: (instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: *VkDebugUtilsMessengerCallbackDataEXT) -> void #foreign vulkan;

VkSamplerReductionModeEXT :: VkSamplerReductionMode;

VkSamplerReductionModeCreateInfoEXT :: VkSamplerReductionModeCreateInfo;

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT :: VkPhysicalDeviceSamplerFilterMinmaxProperties;

VkPhysicalDeviceInlineUniformBlockFeaturesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    pNext: *void;
    inlineUniformBlock: VkBool32;
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32;
}

VkPhysicalDeviceInlineUniformBlockPropertiesEXT :: struct {
    sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    pNext: *void;
    maxInlineUniformBlockSize: u32;
    maxPerStageDescriptorInlineUniformBlocks: u32;
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32;
    maxDescriptorSetInlineUniformBlocks: u32;
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32;
}

VkWriteDescriptorSetInlineUniformBlockEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    dataSize: u32;
    pData: *void;
}

VkDescriptorPoolInlineUniformBlockCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxInlineUniformBlockBindings: u32;
}

VkSampleLocationEXT :: struct {
    x: float32;
    y: float32;
}

VkSampleLocationsInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    sampleLocationsPerPixel: VkSampleCountFlagBits;
    sampleLocationGridSize: VkExtent2D;
    sampleLocationsCount: u32;
    pSampleLocations: *VkSampleLocationEXT;
}

VkAttachmentSampleLocationsEXT :: struct {
    attachmentIndex: u32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

VkSubpassSampleLocationsEXT :: struct {
    subpassIndex: u32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

VkRenderPassSampleLocationsBeginInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    attachmentInitialSampleLocationsCount: u32;
    pAttachmentInitialSampleLocations: *VkAttachmentSampleLocationsEXT;
    postSubpassSampleLocationsCount: u32;
    pPostSubpassSampleLocations: *VkSubpassSampleLocationsEXT;
}

VkPipelineSampleLocationsStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    sampleLocationsEnable: VkBool32;
    sampleLocationsInfo: VkSampleLocationsInfoEXT;
}

VkPhysicalDeviceSampleLocationsPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    sampleLocationSampleCounts: VkSampleCountFlags;
    maxSampleLocationGridSize: VkExtent2D;
    sampleLocationCoordinateRange: [2] float32;
    sampleLocationSubPixelBits: u32;
    variableSampleLocations: VkBool32;
}

VkMultisamplePropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxSampleLocationGridSize: VkExtent2D;
}

PFN_vkCmdSetSampleLocationsEXT :: #type (a0: VkCommandBuffer, a1: *VkSampleLocationsInfoEXT) -> void #c_call;

PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT :: #type (a0: VkPhysicalDevice, a1: VkSampleCountFlagBits, a2: *VkMultisamplePropertiesEXT) -> void #c_call;

//###
// vkCmdSetSampleLocationsEXT :: (commandBuffer: VkCommandBuffer, pSampleLocationsInfo: *VkSampleLocationsInfoEXT) -> void #foreign vulkan;

// vkGetPhysicalDeviceMultisamplePropertiesEXT :: (physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: *VkMultisamplePropertiesEXT) -> void #foreign vulkan;

using VkBlendOverlapEXT :: enum u32 {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT :: 0;
    VK_BLEND_OVERLAP_DISJOINT_EXT :: 1;
    VK_BLEND_OVERLAP_CONJOINT_EXT :: 2;
    VK_BLEND_OVERLAP_MAX_ENUM_EXT :: 2147483647;
}

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    advancedBlendCoherentOperations: VkBool32;
}

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    advancedBlendMaxColorAttachments: u32;
    advancedBlendIndependentBlend: VkBool32;
    advancedBlendNonPremultipliedSrcColor: VkBool32;
    advancedBlendNonPremultipliedDstColor: VkBool32;
    advancedBlendCorrelatedOverlap: VkBool32;
    advancedBlendAllOperations: VkBool32;
}

VkPipelineColorBlendAdvancedStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    srcPremultiplied: VkBool32;
    dstPremultiplied: VkBool32;
    blendOverlap: VkBlendOverlapEXT;
}

VkPipelineCoverageToColorStateCreateFlagsNV :: VkFlags;

VkPipelineCoverageToColorStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineCoverageToColorStateCreateFlagsNV;
    coverageToColorEnable: VkBool32;
    coverageToColorLocation: u32;
}

using VkCoverageModulationModeNV :: enum u32 {
    VK_COVERAGE_MODULATION_MODE_NONE_NV :: 0;
    VK_COVERAGE_MODULATION_MODE_RGB_NV :: 1;
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV :: 2;
    VK_COVERAGE_MODULATION_MODE_RGBA_NV :: 3;
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV :: 2147483647;
}

VkPipelineCoverageModulationStateCreateFlagsNV :: VkFlags;

VkPipelineCoverageModulationStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineCoverageModulationStateCreateFlagsNV;
    coverageModulationMode: VkCoverageModulationModeNV;
    coverageModulationTableEnable: VkBool32;
    coverageModulationTableCount: u32;
    pCoverageModulationTable: *float32;
}

VkPhysicalDeviceShaderSMBuiltinsPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderSMCount: u32;
    shaderWarpsPerSM: u32;
}

VkPhysicalDeviceShaderSMBuiltinsFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderSMBuiltins: VkBool32;
}

VkDrmFormatModifierPropertiesEXT :: struct {
    drmFormatModifier: u64;
    drmFormatModifierPlaneCount: u32;
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags;
}

VkDrmFormatModifierPropertiesListEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    drmFormatModifierCount: u32;
    pDrmFormatModifierProperties: *VkDrmFormatModifierPropertiesEXT;
}

VkPhysicalDeviceImageDrmFormatModifierInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    drmFormatModifier: u64;
    sharingMode: VkSharingMode;
    queueFamilyIndexCount: u32;
    pQueueFamilyIndices: *u32;
}

VkImageDrmFormatModifierListCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    drmFormatModifierCount: u32;
    pDrmFormatModifiers: *u64;
}

VkImageDrmFormatModifierExplicitCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    drmFormatModifier: u64;
    drmFormatModifierPlaneCount: u32;
    pPlaneLayouts: *VkSubresourceLayout;
}

VkImageDrmFormatModifierPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    drmFormatModifier: u64;
}

PFN_vkGetImageDrmFormatModifierPropertiesEXT :: #type (a0: VkDevice, a1: VkImage, a2: *VkImageDrmFormatModifierPropertiesEXT) -> VkResult #c_call;

// vkGetImageDrmFormatModifierPropertiesEXT :: (device: VkDevice, image: VkImage, pProperties: *VkImageDrmFormatModifierPropertiesEXT) -> VkResult #foreign vulkan;

VkValidationCacheEXT_T :: struct {
}

VkValidationCacheEXT :: *VkValidationCacheEXT_T;

using VkValidationCacheHeaderVersionEXT :: enum u32 {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT :: 1;
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT :: 2147483647;
}

VkValidationCacheCreateFlagsEXT :: VkFlags;

VkValidationCacheCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkValidationCacheCreateFlagsEXT;
    initialDataSize: u64;
    pInitialData: *void;
}

VkShaderModuleValidationCacheCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    validationCache: VkValidationCacheEXT;
}

PFN_vkCreateValidationCacheEXT :: #type (a0: VkDevice, a1: *VkValidationCacheCreateInfoEXT, a2: *VkAllocationCallbacks, a3: *VkValidationCacheEXT) -> VkResult #c_call;

PFN_vkDestroyValidationCacheEXT :: #type (a0: VkDevice, a1: VkValidationCacheEXT, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkMergeValidationCachesEXT :: #type (a0: VkDevice, a1: VkValidationCacheEXT, a2: u32, a3: *VkValidationCacheEXT) -> VkResult #c_call;

PFN_vkGetValidationCacheDataEXT :: #type (a0: VkDevice, a1: VkValidationCacheEXT, a2: *u64, a3: *void) -> VkResult #c_call;

//###
// vkCreateValidationCacheEXT :: (device: VkDevice, pCreateInfo: *VkValidationCacheCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pValidationCache: *VkValidationCacheEXT) -> VkResult #foreign vulkan;

// vkDestroyValidationCacheEXT :: (device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkMergeValidationCachesEXT :: (device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: *VkValidationCacheEXT) -> VkResult #foreign vulkan;

// vkGetValidationCacheDataEXT :: (device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: *u64, pData: *void) -> VkResult #foreign vulkan;

VkDescriptorBindingFlagBitsEXT :: VkDescriptorBindingFlagBits;

VkDescriptorBindingFlagsEXT :: VkDescriptorBindingFlags;

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT :: VkDescriptorSetLayoutBindingFlagsCreateInfo;

VkPhysicalDeviceDescriptorIndexingFeaturesEXT :: VkPhysicalDeviceDescriptorIndexingFeatures;

VkPhysicalDeviceDescriptorIndexingPropertiesEXT :: VkPhysicalDeviceDescriptorIndexingProperties;

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT :: VkDescriptorSetVariableDescriptorCountAllocateInfo;

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT :: VkDescriptorSetVariableDescriptorCountLayoutSupport;

using VkShadingRatePaletteEntryNV :: enum u32 {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV :: 0;
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV :: 1;
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV :: 2;
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV :: 3;
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV :: 4;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV :: 5;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV :: 6;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV :: 7;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV :: 8;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV :: 9;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV :: 10;
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV :: 11;
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV :: 2147483647;
}

using VkCoarseSampleOrderTypeNV :: enum u32 {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV :: 0;
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV :: 1;
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV :: 2;
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV :: 3;
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV :: 2147483647;
}

VkShadingRatePaletteNV :: struct {
    shadingRatePaletteEntryCount: u32;
    pShadingRatePaletteEntries: *VkShadingRatePaletteEntryNV;
}

VkPipelineViewportShadingRateImageStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shadingRateImageEnable: VkBool32;
    viewportCount: u32;
    pShadingRatePalettes: *VkShadingRatePaletteNV;
}

VkPhysicalDeviceShadingRateImageFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shadingRateImage: VkBool32;
    shadingRateCoarseSampleOrder: VkBool32;
}

VkPhysicalDeviceShadingRateImagePropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shadingRateTexelSize: VkExtent2D;
    shadingRatePaletteSize: u32;
    shadingRateMaxCoarseSamples: u32;
}

VkCoarseSampleLocationNV :: struct {
    pixelX: u32;
    pixelY: u32;
    sample: u32;
}

VkCoarseSampleOrderCustomNV :: struct {
    shadingRate: VkShadingRatePaletteEntryNV;
    sampleCount: u32;
    sampleLocationCount: u32;
    pSampleLocations: *VkCoarseSampleLocationNV;
}

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    sampleOrderType: VkCoarseSampleOrderTypeNV;
    customSampleOrderCount: u32;
    pCustomSampleOrders: *VkCoarseSampleOrderCustomNV;
}

PFN_vkCmdBindShadingRateImageNV :: #type (a0: VkCommandBuffer, a1: VkImageView, a2: VkImageLayout) -> void #c_call;

PFN_vkCmdSetViewportShadingRatePaletteNV :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkShadingRatePaletteNV) -> void #c_call;

PFN_vkCmdSetCoarseSampleOrderNV :: #type (a0: VkCommandBuffer, a1: VkCoarseSampleOrderTypeNV, a2: u32, a3: *VkCoarseSampleOrderCustomNV) -> void #c_call;

// ###
// vkCmdBindShadingRateImageNV :: (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) -> void #foreign vulkan;

// vkCmdSetViewportShadingRatePaletteNV :: (commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: *VkShadingRatePaletteNV) -> void #foreign vulkan;

// vkCmdSetCoarseSampleOrderNV :: (commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: *VkCoarseSampleOrderCustomNV) -> void #foreign vulkan;

VkAccelerationStructureNV_T :: struct {
}

VkAccelerationStructureNV :: *VkAccelerationStructureNV_T;

using VkRayTracingShaderGroupTypeKHR :: enum u32 {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR :: 0;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR :: 1;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR :: 2;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV :: 0;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV :: 1;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV :: 2;
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR :: 2147483647;
}

VkRayTracingShaderGroupTypeNV :: VkRayTracingShaderGroupTypeKHR;

using VkGeometryTypeKHR :: enum u32 {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR :: 0;
    VK_GEOMETRY_TYPE_AABBS_KHR :: 1;
    VK_GEOMETRY_TYPE_INSTANCES_KHR :: 2;
    VK_GEOMETRY_TYPE_TRIANGLES_NV :: 0;
    VK_GEOMETRY_TYPE_AABBS_NV :: 1;
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR :: 2147483647;
}

VkGeometryTypeNV :: VkGeometryTypeKHR;

using VkAccelerationStructureTypeKHR :: enum u32 {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR :: 0;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR :: 1;
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR :: 2;
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV :: 0;
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV :: 1;
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR :: 2147483647;
}

VkAccelerationStructureTypeNV :: VkAccelerationStructureTypeKHR;

using VkCopyAccelerationStructureModeKHR :: enum u32 {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR :: 0;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR :: 1;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR :: 2;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR :: 3;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV :: 0;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV :: 1;
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR :: 2147483647;
}

VkCopyAccelerationStructureModeNV :: VkCopyAccelerationStructureModeKHR;

using VkAccelerationStructureMemoryRequirementsTypeNV :: enum u32 {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV :: 0;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV :: 1;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV :: 2;
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV :: 2147483647;
}

using VkGeometryFlagBitsKHR :: enum_flags u32 {
    VK_GEOMETRY_OPAQUE_BIT_KHR :: 1;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR :: 2;
    VK_GEOMETRY_OPAQUE_BIT_NV :: 1;
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV :: 2;
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkGeometryFlagsKHR :: VkGeometryFlagBitsKHR;

VkGeometryFlagsNV :: VkGeometryFlagsKHR;

VkGeometryFlagBitsNV :: VkGeometryFlagBitsKHR;

using VkGeometryInstanceFlagBitsKHR :: enum_flags u32 {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR :: 1;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR :: 2;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR :: 4;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR :: 8;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR :: 2;
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV :: 1;
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV :: 2;
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV :: 4;
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV :: 8;
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkGeometryInstanceFlagsKHR :: VkGeometryInstanceFlagBitsKHR;

VkGeometryInstanceFlagsNV :: VkGeometryInstanceFlagsKHR;

VkGeometryInstanceFlagBitsNV :: VkGeometryInstanceFlagBitsKHR;

using VkBuildAccelerationStructureFlagBitsKHR :: enum_flags u32 {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR :: 1;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR :: 2;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR :: 4;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR :: 8;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR :: 16;
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV :: 32;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV :: 1;
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV :: 2;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV :: 4;
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV :: 8;
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV :: 16;
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkBuildAccelerationStructureFlagsKHR :: VkBuildAccelerationStructureFlagBitsKHR;

VkBuildAccelerationStructureFlagsNV :: VkBuildAccelerationStructureFlagsKHR;

VkBuildAccelerationStructureFlagBitsNV :: VkBuildAccelerationStructureFlagBitsKHR;

VkRayTracingShaderGroupCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkRayTracingShaderGroupTypeKHR;
    generalShader: u32;
    closestHitShader: u32;
    anyHitShader: u32;
    intersectionShader: u32;
}

VkRayTracingPipelineCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineCreateFlags;
    stageCount: u32;
    pStages: *VkPipelineShaderStageCreateInfo;
    groupCount: u32;
    pGroups: *VkRayTracingShaderGroupCreateInfoNV;
    maxRecursionDepth: u32;
    layout: VkPipelineLayout;
    basePipelineHandle: VkPipeline;
    basePipelineIndex: s32;
}

VkGeometryTrianglesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexData: VkBuffer;
    vertexOffset: VkDeviceSize;
    vertexCount: u32;
    vertexStride: VkDeviceSize;
    vertexFormat: VkFormat;
    indexData: VkBuffer;
    indexOffset: VkDeviceSize;
    indexCount: u32;
    indexType: VkIndexType;
    transformData: VkBuffer;
    transformOffset: VkDeviceSize;
}

VkGeometryAABBNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    aabbData: VkBuffer;
    numAABBs: u32;
    stride: u32;
    offset: VkDeviceSize;
}

VkGeometryDataNV :: struct {
    triangles: VkGeometryTrianglesNV;
    aabbs: VkGeometryAABBNV;
}

VkGeometryNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    geometryType: VkGeometryTypeKHR;
    geometry: VkGeometryDataNV;
    flags: VkGeometryFlagsKHR;
}

VkAccelerationStructureInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkAccelerationStructureTypeNV;
    flags: VkBuildAccelerationStructureFlagsNV;
    instanceCount: u32;
    geometryCount: u32;
    pGeometries: *VkGeometryNV;
}

VkAccelerationStructureCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    compactedSize: VkDeviceSize;
    info: VkAccelerationStructureInfoNV;
}

VkBindAccelerationStructureMemoryInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructure: VkAccelerationStructureNV;
    memory: VkDeviceMemory;
    memoryOffset: VkDeviceSize;
    deviceIndexCount: u32;
    pDeviceIndices: *u32;
}

VkWriteDescriptorSetAccelerationStructureNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructureCount: u32;
    pAccelerationStructures: *VkAccelerationStructureNV;
}

VkAccelerationStructureMemoryRequirementsInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkAccelerationStructureMemoryRequirementsTypeNV;
    accelerationStructure: VkAccelerationStructureNV;
}

VkPhysicalDeviceRayTracingPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderGroupHandleSize: u32;
    maxRecursionDepth: u32;
    maxShaderGroupStride: u32;
    shaderGroupBaseAlignment: u32;
    maxGeometryCount: u64;
    maxInstanceCount: u64;
    maxTriangleCount: u64;
    maxDescriptorSetAccelerationStructures: u32;
}

VkTransformMatrixKHR :: struct {
    matrix: [3] [4] float32;
}

VkTransformMatrixNV :: VkTransformMatrixKHR;

VkAabbPositionsKHR :: struct {
    minX: float32;
    minY: float32;
    minZ: float32;
    maxX: float32;
    maxY: float32;
    maxZ: float32;
}

VkAabbPositionsNV :: VkAabbPositionsKHR;

VkAccelerationStructureInstanceKHR :: struct {
    transform: VkTransformMatrixKHR;
    instanceCustomIndex: u32;
    mask: u32;
    instanceShaderBindingTableRecordOffset: u32;
    flags: VkGeometryInstanceFlagsKHR;
    accelerationStructureReference: u64;
}

VkAccelerationStructureInstanceNV :: VkAccelerationStructureInstanceKHR;

PFN_vkCreateAccelerationStructureNV :: #type (a0: VkDevice, a1: *VkAccelerationStructureCreateInfoNV, a2: *VkAllocationCallbacks, a3: *VkAccelerationStructureNV) -> VkResult #c_call;

PFN_vkDestroyAccelerationStructureNV :: #type (a0: VkDevice, a1: VkAccelerationStructureNV, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkGetAccelerationStructureMemoryRequirementsNV :: #type (a0: VkDevice, a1: *VkAccelerationStructureMemoryRequirementsInfoNV, a2: *VkMemoryRequirements2KHR) -> void #c_call;

PFN_vkBindAccelerationStructureMemoryNV :: #type (a0: VkDevice, a1: u32, a2: *VkBindAccelerationStructureMemoryInfoNV) -> VkResult #c_call;

PFN_vkCmdBuildAccelerationStructureNV :: #type (a0: VkCommandBuffer, a1: *VkAccelerationStructureInfoNV, a2: VkBuffer, a3: VkDeviceSize, a4: VkBool32, a5: VkAccelerationStructureNV, a6: VkAccelerationStructureNV, a7: VkBuffer, a8: VkDeviceSize) -> void #c_call;

PFN_vkCmdCopyAccelerationStructureNV :: #type (a0: VkCommandBuffer, a1: VkAccelerationStructureNV, a2: VkAccelerationStructureNV, a3: VkCopyAccelerationStructureModeKHR) -> void #c_call;

PFN_vkCmdTraceRaysNV :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: VkDeviceSize, a6: VkBuffer, a7: VkDeviceSize, a8: VkDeviceSize, a9: VkBuffer, a10: VkDeviceSize, a11: VkDeviceSize, a12: u32, a13: u32, a14: u32) -> void #c_call;

PFN_vkCreateRayTracingPipelinesNV :: #type (a0: VkDevice, a1: VkPipelineCache, a2: u32, a3: *VkRayTracingPipelineCreateInfoNV, a4: *VkAllocationCallbacks, a5: *VkPipeline) -> VkResult #c_call;

PFN_vkGetRayTracingShaderGroupHandlesKHR :: #type (a0: VkDevice, a1: VkPipeline, a2: u32, a3: u32, a4: u64, a5: *void) -> VkResult #c_call;

PFN_vkGetRayTracingShaderGroupHandlesNV :: #type (a0: VkDevice, a1: VkPipeline, a2: u32, a3: u32, a4: u64, a5: *void) -> VkResult #c_call;

PFN_vkGetAccelerationStructureHandleNV :: #type (a0: VkDevice, a1: VkAccelerationStructureNV, a2: u64, a3: *void) -> VkResult #c_call;

PFN_vkCmdWriteAccelerationStructuresPropertiesNV :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkAccelerationStructureNV, a3: VkQueryType, a4: VkQueryPool, a5: u32) -> void #c_call;

PFN_vkCompileDeferredNV :: #type (a0: VkDevice, a1: VkPipeline, a2: u32) -> VkResult #c_call;

//###
// vkCreateAccelerationStructureNV :: (device: VkDevice, pCreateInfo: *VkAccelerationStructureCreateInfoNV, pAllocator: *VkAllocationCallbacks, pAccelerationStructure: *VkAccelerationStructureNV) -> VkResult #foreign vulkan;

// vkDestroyAccelerationStructureNV :: (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkGetAccelerationStructureMemoryRequirementsNV :: (device: VkDevice, pInfo: *VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *VkMemoryRequirements2KHR) -> void #foreign vulkan;

// vkBindAccelerationStructureMemoryNV :: (device: VkDevice, bindInfoCount: u32, pBindInfos: *VkBindAccelerationStructureMemoryInfoNV) -> VkResult #foreign vulkan;

// vkCmdBuildAccelerationStructureNV :: (commandBuffer: VkCommandBuffer, pInfo: *VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) -> void #foreign vulkan;

// vkCmdCopyAccelerationStructureNV :: (commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR) -> void #foreign vulkan;

// vkCmdTraceRaysNV :: (commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) -> void #foreign vulkan;

// vkCreateRayTracingPipelinesNV :: (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *VkRayTracingPipelineCreateInfoNV, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline) -> VkResult #foreign vulkan;

// vkGetRayTracingShaderGroupHandlesKHR :: (device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> VkResult #foreign vulkan;

// vkGetRayTracingShaderGroupHandlesNV :: (device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> VkResult #foreign vulkan;

// vkGetAccelerationStructureHandleNV :: (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: u64, pData: *void) -> VkResult #foreign vulkan;

// vkCmdWriteAccelerationStructuresPropertiesNV :: (commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) -> void #foreign vulkan;

// vkCompileDeferredNV :: (device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult #foreign vulkan;

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    representativeFragmentTest: VkBool32;
}

VkPipelineRepresentativeFragmentTestStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    representativeFragmentTestEnable: VkBool32;
}

VkPhysicalDeviceImageViewImageFormatInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    imageViewType: VkImageViewType;
}

VkFilterCubicImageViewImageFormatPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    filterCubic: VkBool32;
    filterCubicMinmax: VkBool32;
}

using VkQueueGlobalPriorityEXT :: enum u32 {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT :: 128;
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT :: 256;
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT :: 512;
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT :: 1024;
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT :: 2147483647;
}

VkDeviceQueueGlobalPriorityCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    globalPriority: VkQueueGlobalPriorityEXT;
}

VkImportMemoryHostPointerInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    handleType: VkExternalMemoryHandleTypeFlagBits;
    pHostPointer: *void;
}

VkMemoryHostPointerPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    memoryTypeBits: u32;
}

VkPhysicalDeviceExternalMemoryHostPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    minImportedHostPointerAlignment: VkDeviceSize;
}

PFN_vkGetMemoryHostPointerPropertiesEXT :: #type (a0: VkDevice, a1: VkExternalMemoryHandleTypeFlagBits, a2: *void, a3: *VkMemoryHostPointerPropertiesEXT) -> VkResult #c_call;

// vkGetMemoryHostPointerPropertiesEXT :: (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: *void, pMemoryHostPointerProperties: *VkMemoryHostPointerPropertiesEXT) -> VkResult #foreign vulkan;

PFN_vkCmdWriteBufferMarkerAMD :: #type (a0: VkCommandBuffer, a1: VkPipelineStageFlagBits, a2: VkBuffer, a3: VkDeviceSize, a4: u32) -> void #c_call;

// vkCmdWriteBufferMarkerAMD :: (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) -> void #foreign vulkan;

using VkPipelineCompilerControlFlagBitsAMD :: enum u32 {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD :: 2147483647;
}

VkPipelineCompilerControlFlagsAMD :: VkFlags;

VkPipelineCompilerControlCreateInfoAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD;
}

using VkTimeDomainEXT :: enum u32 {
    VK_TIME_DOMAIN_DEVICE_EXT :: 0;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT :: 1;
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT :: 2;
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT :: 3;
    VK_TIME_DOMAIN_MAX_ENUM_EXT :: 2147483647;
}

VkCalibratedTimestampInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    timeDomain: VkTimeDomainEXT;
}

PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkTimeDomainEXT) -> VkResult #c_call;

PFN_vkGetCalibratedTimestampsEXT :: #type (a0: VkDevice, a1: u32, a2: *VkCalibratedTimestampInfoEXT, a3: *u64, a4: *u64) -> VkResult #c_call;

// vkGetPhysicalDeviceCalibrateableTimeDomainsEXT :: (physicalDevice: VkPhysicalDevice, pTimeDomainCount: *u32, pTimeDomains: *VkTimeDomainEXT) -> VkResult #foreign vulkan;

// vkGetCalibratedTimestampsEXT :: (device: VkDevice, timestampCount: u32, pTimestampInfos: *VkCalibratedTimestampInfoEXT, pTimestamps: *u64, pMaxDeviation: *u64) -> VkResult #foreign vulkan;

VkPhysicalDeviceShaderCorePropertiesAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderEngineCount: u32;
    shaderArraysPerEngineCount: u32;
    computeUnitsPerShaderArray: u32;
    simdPerComputeUnit: u32;
    wavefrontsPerSimd: u32;
    wavefrontSize: u32;
    sgprsPerSimd: u32;
    minSgprAllocation: u32;
    maxSgprAllocation: u32;
    sgprAllocationGranularity: u32;
    vgprsPerSimd: u32;
    minVgprAllocation: u32;
    maxVgprAllocation: u32;
    vgprAllocationGranularity: u32;
}

using VkMemoryOverallocationBehaviorAMD :: enum u32 {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD :: 0;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD :: 1;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD :: 2;
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD :: 2147483647;
}

VkDeviceMemoryOverallocationCreateInfoAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD;
}

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxVertexAttribDivisor: u32;
}

VkVertexInputBindingDivisorDescriptionEXT :: struct {
    binding: u32;
    divisor: u32;
}

VkPipelineVertexInputDivisorStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexBindingDivisorCount: u32;
    pVertexBindingDivisors: *VkVertexInputBindingDivisorDescriptionEXT;
}

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexAttributeInstanceRateDivisor: VkBool32;
    vertexAttributeInstanceRateZeroDivisor: VkBool32;
}

using VkPipelineCreationFeedbackFlagBitsEXT :: enum_flags u32 {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT :: 1;
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT :: 2;
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT :: 4;
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkPipelineCreationFeedbackFlagsEXT :: VkPipelineCreationFeedbackFlagBitsEXT;

VkPipelineCreationFeedbackEXT :: struct {
    flags: VkPipelineCreationFeedbackFlagsEXT;
    duration: u64;
}

VkPipelineCreationFeedbackCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    pPipelineCreationFeedback: *VkPipelineCreationFeedbackEXT;
    pipelineStageCreationFeedbackCount: u32;
    pPipelineStageCreationFeedbacks: *VkPipelineCreationFeedbackEXT;
}

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    computeDerivativeGroupQuads: VkBool32;
    computeDerivativeGroupLinear: VkBool32;
}

VkPhysicalDeviceMeshShaderFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    taskShader: VkBool32;
    meshShader: VkBool32;
}

VkPhysicalDeviceMeshShaderPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxDrawMeshTasksCount: u32;
    maxTaskWorkGroupInvocations: u32;
    maxTaskWorkGroupSize: [3] u32;
    maxTaskTotalMemorySize: u32;
    maxTaskOutputCount: u32;
    maxMeshWorkGroupInvocations: u32;
    maxMeshWorkGroupSize: [3] u32;
    maxMeshTotalMemorySize: u32;
    maxMeshOutputVertices: u32;
    maxMeshOutputPrimitives: u32;
    maxMeshMultiviewViewCount: u32;
    meshOutputPerVertexGranularity: u32;
    meshOutputPerPrimitiveGranularity: u32;
}

VkDrawMeshTasksIndirectCommandNV :: struct {
    taskCount: u32;
    firstTask: u32;
}

PFN_vkCmdDrawMeshTasksNV :: #type (a0: VkCommandBuffer, a1: u32, a2: u32) -> void #c_call;

PFN_vkCmdDrawMeshTasksIndirectNV :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: u32, a4: u32) -> void #c_call;

PFN_vkCmdDrawMeshTasksIndirectCountNV :: #type (a0: VkCommandBuffer, a1: VkBuffer, a2: VkDeviceSize, a3: VkBuffer, a4: VkDeviceSize, a5: u32, a6: u32) -> void #c_call;

//###
// vkCmdDrawMeshTasksNV :: (commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) -> void #foreign vulkan;

// vkCmdDrawMeshTasksIndirectNV :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> void #foreign vulkan;

// vkCmdDrawMeshTasksIndirectCountNV :: (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> void #foreign vulkan;

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentShaderBarycentric: VkBool32;
}

VkPhysicalDeviceShaderImageFootprintFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    imageFootprint: VkBool32;
}

VkPipelineViewportExclusiveScissorStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    exclusiveScissorCount: u32;
    pExclusiveScissors: *VkRect2D;
}

VkPhysicalDeviceExclusiveScissorFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    exclusiveScissor: VkBool32;
}

PFN_vkCmdSetExclusiveScissorNV :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkRect2D) -> void #c_call;

//###
// vkCmdSetExclusiveScissorNV :: (commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: *VkRect2D) -> void #foreign vulkan;

VkQueueFamilyCheckpointPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    checkpointExecutionStageMask: VkPipelineStageFlags;
}

VkCheckpointDataNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    stage: VkPipelineStageFlagBits;
    pCheckpointMarker: *void;
}

PFN_vkCmdSetCheckpointNV :: #type (a0: VkCommandBuffer, a1: *void) -> void #c_call;

PFN_vkGetQueueCheckpointDataNV :: #type (a0: VkQueue, a1: *u32, a2: *VkCheckpointDataNV) -> void #c_call;

//###
// vkCmdSetCheckpointNV :: (commandBuffer: VkCommandBuffer, pCheckpointMarker: *void) -> void #foreign vulkan;

// vkGetQueueCheckpointDataNV :: (queue: VkQueue, pCheckpointDataCount: *u32, pCheckpointData: *VkCheckpointDataNV) -> void #foreign vulkan;

VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderIntegerFunctions2: VkBool32;
}

VkPerformanceConfigurationINTEL_T :: struct {
}

VkPerformanceConfigurationINTEL :: *VkPerformanceConfigurationINTEL_T;

using VkPerformanceConfigurationTypeINTEL :: enum u32 {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL :: 0;
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL :: 2147483647;
}

using VkQueryPoolSamplingModeINTEL :: enum u32 {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL :: 0;
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL :: 2147483647;
}

using VkPerformanceOverrideTypeINTEL :: enum u32 {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL :: 0;
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL :: 1;
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL :: 2147483647;
}

using VkPerformanceParameterTypeINTEL :: enum u32 {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL :: 0;
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL :: 1;
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL :: 2147483647;
}

using VkPerformanceValueTypeINTEL :: enum u32 {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL :: 0;
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL :: 1;
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL :: 2;
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL :: 3;
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL :: 4;
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL :: 2147483647;
}

VkPerformanceValueDataINTEL :: union {
    value32: u32;
    value64: u64;
    valueFloat: float32;
    valueBool: VkBool32;
    valueString: *u8;
}

VkPerformanceValueINTEL :: struct {
    type: VkPerformanceValueTypeINTEL;
    data: VkPerformanceValueDataINTEL;
}

VkInitializePerformanceApiInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    pUserData: *void;
}

VkQueryPoolPerformanceQueryCreateInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL;
}

VkQueryPoolCreateInfoINTEL :: VkQueryPoolPerformanceQueryCreateInfoINTEL;

VkPerformanceMarkerInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    marker: u64;
}

VkPerformanceStreamMarkerInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    marker: u32;
}

VkPerformanceOverrideInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkPerformanceOverrideTypeINTEL;
    enable: VkBool32;
    parameter: u64;
}

VkPerformanceConfigurationAcquireInfoINTEL :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkPerformanceConfigurationTypeINTEL;
}

PFN_vkInitializePerformanceApiINTEL :: #type (a0: VkDevice, a1: *VkInitializePerformanceApiInfoINTEL) -> VkResult #c_call;

PFN_vkUninitializePerformanceApiINTEL :: #type (a0: VkDevice) -> void #c_call;

PFN_vkCmdSetPerformanceMarkerINTEL :: #type (a0: VkCommandBuffer, a1: *VkPerformanceMarkerInfoINTEL) -> VkResult #c_call;

PFN_vkCmdSetPerformanceStreamMarkerINTEL :: #type (a0: VkCommandBuffer, a1: *VkPerformanceStreamMarkerInfoINTEL) -> VkResult #c_call;

PFN_vkCmdSetPerformanceOverrideINTEL :: #type (a0: VkCommandBuffer, a1: *VkPerformanceOverrideInfoINTEL) -> VkResult #c_call;

PFN_vkAcquirePerformanceConfigurationINTEL :: #type (a0: VkDevice, a1: *VkPerformanceConfigurationAcquireInfoINTEL, a2: *VkPerformanceConfigurationINTEL) -> VkResult #c_call;

PFN_vkReleasePerformanceConfigurationINTEL :: #type (a0: VkDevice, a1: VkPerformanceConfigurationINTEL) -> VkResult #c_call;

PFN_vkQueueSetPerformanceConfigurationINTEL :: #type (a0: VkQueue, a1: VkPerformanceConfigurationINTEL) -> VkResult #c_call;

PFN_vkGetPerformanceParameterINTEL :: #type (a0: VkDevice, a1: VkPerformanceParameterTypeINTEL, a2: *VkPerformanceValueINTEL) -> VkResult #c_call;

//###
// vkInitializePerformanceApiINTEL :: (device: VkDevice, pInitializeInfo: *VkInitializePerformanceApiInfoINTEL) -> VkResult #foreign vulkan;

// vkUninitializePerformanceApiINTEL :: (device: VkDevice) -> void #foreign vulkan;

// vkCmdSetPerformanceMarkerINTEL :: (commandBuffer: VkCommandBuffer, pMarkerInfo: *VkPerformanceMarkerInfoINTEL) -> VkResult #foreign vulkan;

// vkCmdSetPerformanceStreamMarkerINTEL :: (commandBuffer: VkCommandBuffer, pMarkerInfo: *VkPerformanceStreamMarkerInfoINTEL) -> VkResult #foreign vulkan;

// vkCmdSetPerformanceOverrideINTEL :: (commandBuffer: VkCommandBuffer, pOverrideInfo: *VkPerformanceOverrideInfoINTEL) -> VkResult #foreign vulkan;

// vkAcquirePerformanceConfigurationINTEL :: (device: VkDevice, pAcquireInfo: *VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: *VkPerformanceConfigurationINTEL) -> VkResult #foreign vulkan;

// vkReleasePerformanceConfigurationINTEL :: (device: VkDevice, configuration: VkPerformanceConfigurationINTEL) -> VkResult #foreign vulkan;

// vkQueueSetPerformanceConfigurationINTEL :: (queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) -> VkResult #foreign vulkan;

// vkGetPerformanceParameterINTEL :: (device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: *VkPerformanceValueINTEL) -> VkResult #foreign vulkan;

VkPhysicalDevicePCIBusInfoPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    pciDomain: u32;
    pciBus: u32;
    pciDevice: u32;
    pciFunction: u32;
}

VkDisplayNativeHdrSurfaceCapabilitiesAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    localDimmingSupport: VkBool32;
}

VkSwapchainDisplayNativeHdrCreateInfoAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    localDimmingEnable: VkBool32;
}

PFN_vkSetLocalDimmingAMD :: #type (a0: VkDevice, a1: VkSwapchainKHR, a2: VkBool32) -> void #c_call;

// ###
// vkSetLocalDimmingAMD :: (device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) -> void #foreign vulkan;

VkPhysicalDeviceFragmentDensityMapFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentDensityMap: VkBool32;
    fragmentDensityMapDynamic: VkBool32;
    fragmentDensityMapNonSubsampledImages: VkBool32;
}

VkPhysicalDeviceFragmentDensityMapPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    minFragmentDensityTexelSize: VkExtent2D;
    maxFragmentDensityTexelSize: VkExtent2D;
    fragmentDensityInvocations: VkBool32;
}

VkRenderPassFragmentDensityMapCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentDensityMapAttachment: VkAttachmentReference;
}

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT :: VkPhysicalDeviceScalarBlockLayoutFeatures;

VkPhysicalDeviceSubgroupSizeControlFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    subgroupSizeControl: VkBool32;
    computeFullSubgroups: VkBool32;
}

VkPhysicalDeviceSubgroupSizeControlPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    minSubgroupSize: u32;
    maxSubgroupSize: u32;
    maxComputeWorkgroupSubgroups: u32;
    requiredSubgroupSizeStages: VkShaderStageFlags;
}

VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    requiredSubgroupSize: u32;
}

using VkShaderCorePropertiesFlagBitsAMD :: enum u32 {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD :: 2147483647;
}

VkShaderCorePropertiesFlagsAMD :: VkFlags;

VkPhysicalDeviceShaderCoreProperties2AMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD;
    activeComputeUnitCount: u32;
}

VkPhysicalDeviceCoherentMemoryFeaturesAMD :: struct {
    sType: VkStructureType;
    pNext: *void;
    deviceCoherentMemory: VkBool32;
}

VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderImageInt64Atomics: VkBool32;
    sparseImageInt64Atomics: VkBool32;
}

VkPhysicalDeviceMemoryBudgetPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    heapBudget: [16] VkDeviceSize;
    heapUsage: [16] VkDeviceSize;
}

VkPhysicalDeviceMemoryPriorityFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    memoryPriority: VkBool32;
}

VkMemoryPriorityAllocateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    priority: float32;
}

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    dedicatedAllocationImageAliasing: VkBool32;
}

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    bufferDeviceAddress: VkBool32;
    bufferDeviceAddressCaptureReplay: VkBool32;
    bufferDeviceAddressMultiDevice: VkBool32;
}

VkPhysicalDeviceBufferAddressFeaturesEXT :: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

VkBufferDeviceAddressInfoEXT :: VkBufferDeviceAddressInfo;

VkBufferDeviceAddressCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    deviceAddress: VkDeviceAddress;
}

PFN_vkGetBufferDeviceAddressEXT :: #type (a0: VkDevice, a1: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #c_call;

//###
// vkGetBufferDeviceAddressEXT :: (device: VkDevice, pInfo: *VkBufferDeviceAddressInfo) -> VkDeviceAddress #foreign vulkan;

using VkToolPurposeFlagBitsEXT :: enum_flags u32 {
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT :: 1;
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT :: 2;
    VK_TOOL_PURPOSE_TRACING_BIT_EXT :: 4;
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT :: 8;
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT :: 16;
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT :: 32;
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT :: 64;
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkToolPurposeFlagsEXT :: VkToolPurposeFlagBitsEXT;

VkPhysicalDeviceToolPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    name: [256] u8;
    version: [256] u8;
    purposes: VkToolPurposeFlagsEXT;
    description: [256] u8;
    layer: [256] u8;
}

PFN_vkGetPhysicalDeviceToolPropertiesEXT :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkPhysicalDeviceToolPropertiesEXT) -> VkResult #c_call;

// vkGetPhysicalDeviceToolPropertiesEXT :: (physicalDevice: VkPhysicalDevice, pToolCount: *u32, pToolProperties: *VkPhysicalDeviceToolPropertiesEXT) -> VkResult #foreign vulkan;

VkImageStencilUsageCreateInfoEXT :: VkImageStencilUsageCreateInfo;

using VkValidationFeatureEnableEXT :: enum u32 {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT :: 0;
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT :: 1;
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT :: 2;
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT :: 3;
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT :: 4;
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT :: 2147483647;
}

using VkValidationFeatureDisableEXT :: enum u32 {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT :: 0;
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT :: 1;
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT :: 2;
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT :: 3;
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT :: 4;
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT :: 5;
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT :: 6;
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT :: 7;
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT :: 2147483647;
}

VkValidationFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    enabledValidationFeatureCount: u32;
    pEnabledValidationFeatures: *VkValidationFeatureEnableEXT;
    disabledValidationFeatureCount: u32;
    pDisabledValidationFeatures: *VkValidationFeatureDisableEXT;
}

using VkComponentTypeNV :: enum u32 {
    VK_COMPONENT_TYPE_FLOAT16_NV :: 0;
    VK_COMPONENT_TYPE_FLOAT32_NV :: 1;
    VK_COMPONENT_TYPE_FLOAT64_NV :: 2;
    VK_COMPONENT_TYPE_SINT8_NV :: 3;
    VK_COMPONENT_TYPE_SINT16_NV :: 4;
    VK_COMPONENT_TYPE_SINT32_NV :: 5;
    VK_COMPONENT_TYPE_SINT64_NV :: 6;
    VK_COMPONENT_TYPE_UINT8_NV :: 7;
    VK_COMPONENT_TYPE_UINT16_NV :: 8;
    VK_COMPONENT_TYPE_UINT32_NV :: 9;
    VK_COMPONENT_TYPE_UINT64_NV :: 10;
    VK_COMPONENT_TYPE_MAX_ENUM_NV :: 2147483647;
}

using VkScopeNV :: enum u32 {
    VK_SCOPE_DEVICE_NV :: 1;
    VK_SCOPE_WORKGROUP_NV :: 2;
    VK_SCOPE_SUBGROUP_NV :: 3;
    VK_SCOPE_QUEUE_FAMILY_NV :: 5;
    VK_SCOPE_MAX_ENUM_NV :: 2147483647;
}

VkCooperativeMatrixPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    MSize: u32;
    NSize: u32;
    KSize: u32;
    AType: VkComponentTypeNV;
    BType: VkComponentTypeNV;
    CType: VkComponentTypeNV;
    DType: VkComponentTypeNV;
    scope: VkScopeNV;
}

VkPhysicalDeviceCooperativeMatrixFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    cooperativeMatrix: VkBool32;
    cooperativeMatrixRobustBufferAccess: VkBool32;
}

VkPhysicalDeviceCooperativeMatrixPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    cooperativeMatrixSupportedStages: VkShaderStageFlags;
}

PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkCooperativeMatrixPropertiesNV) -> VkResult #c_call;

// vkGetPhysicalDeviceCooperativeMatrixPropertiesNV :: (physicalDevice: VkPhysicalDevice, pPropertyCount: *u32, pProperties: *VkCooperativeMatrixPropertiesNV) -> VkResult #foreign vulkan;

using VkCoverageReductionModeNV :: enum u32 {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV :: 0;
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV :: 1;
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV :: 2147483647;
}

VkPipelineCoverageReductionStateCreateFlagsNV :: VkFlags;

VkPhysicalDeviceCoverageReductionModeFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    coverageReductionMode: VkBool32;
}

VkPipelineCoverageReductionStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineCoverageReductionStateCreateFlagsNV;
    coverageReductionMode: VkCoverageReductionModeNV;
}

VkFramebufferMixedSamplesCombinationNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    coverageReductionMode: VkCoverageReductionModeNV;
    rasterizationSamples: VkSampleCountFlagBits;
    depthStencilSamples: VkSampleCountFlags;
    colorSamples: VkSampleCountFlags;
}

PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: #type (a0: VkPhysicalDevice, a1: *u32, a2: *VkFramebufferMixedSamplesCombinationNV) -> VkResult #c_call;

// vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV :: (physicalDevice: VkPhysicalDevice, pCombinationCount: *u32, pCombinations: *VkFramebufferMixedSamplesCombinationNV) -> VkResult #foreign vulkan;

VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentShaderSampleInterlock: VkBool32;
    fragmentShaderPixelInterlock: VkBool32;
    fragmentShaderShadingRateInterlock: VkBool32;
}

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    ycbcrImageArrays: VkBool32;
}

using VkProvokingVertexModeEXT :: enum u32 {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT :: 0;
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT :: 1;
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT :: 2147483647;
}

VkPhysicalDeviceProvokingVertexFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    provokingVertexLast: VkBool32;
    transformFeedbackPreservesProvokingVertex: VkBool32;
}

VkPhysicalDeviceProvokingVertexPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    provokingVertexModePerPipeline: VkBool32;
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32;
}

VkPipelineRasterizationProvokingVertexStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    provokingVertexMode: VkProvokingVertexModeEXT;
}

VkHeadlessSurfaceCreateFlagsEXT :: VkFlags;

VkHeadlessSurfaceCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkHeadlessSurfaceCreateFlagsEXT;
}

PFN_vkCreateHeadlessSurfaceEXT :: #type (a0: VkInstance, a1: *VkHeadlessSurfaceCreateInfoEXT, a2: *VkAllocationCallbacks, a3: *VkSurfaceKHR) -> VkResult #c_call;

// vkCreateHeadlessSurfaceEXT :: (instance: VkInstance, pCreateInfo: *VkHeadlessSurfaceCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pSurface: *VkSurfaceKHR) -> VkResult #foreign vulkan;

using VkLineRasterizationModeEXT :: enum u32 {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT :: 0;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT :: 1;
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT :: 2;
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT :: 3;
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT :: 2147483647;
}

VkPhysicalDeviceLineRasterizationFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    rectangularLines: VkBool32;
    bresenhamLines: VkBool32;
    smoothLines: VkBool32;
    stippledRectangularLines: VkBool32;
    stippledBresenhamLines: VkBool32;
    stippledSmoothLines: VkBool32;
}

VkPhysicalDeviceLineRasterizationPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    lineSubPixelPrecisionBits: u32;
}

VkPipelineRasterizationLineStateCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    lineRasterizationMode: VkLineRasterizationModeEXT;
    stippledLineEnable: VkBool32;
    lineStippleFactor: u32;
    lineStipplePattern: u16;
}

PFN_vkCmdSetLineStippleEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u16) -> void #c_call;

//###
// vkCmdSetLineStippleEXT :: (commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) -> void #foreign vulkan;

VkPhysicalDeviceShaderAtomicFloatFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderBufferFloat32Atomics: VkBool32;
    shaderBufferFloat32AtomicAdd: VkBool32;
    shaderBufferFloat64Atomics: VkBool32;
    shaderBufferFloat64AtomicAdd: VkBool32;
    shaderSharedFloat32Atomics: VkBool32;
    shaderSharedFloat32AtomicAdd: VkBool32;
    shaderSharedFloat64Atomics: VkBool32;
    shaderSharedFloat64AtomicAdd: VkBool32;
    shaderImageFloat32Atomics: VkBool32;
    shaderImageFloat32AtomicAdd: VkBool32;
    sparseImageFloat32Atomics: VkBool32;
    sparseImageFloat32AtomicAdd: VkBool32;
}

VkPhysicalDeviceHostQueryResetFeaturesEXT :: VkPhysicalDeviceHostQueryResetFeatures;

PFN_vkResetQueryPoolEXT :: #type (a0: VkDevice, a1: VkQueryPool, a2: u32, a3: u32) -> void #c_call;

// ###
// vkResetQueryPoolEXT :: (device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> void #foreign vulkan;

VkPhysicalDeviceIndexTypeUint8FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    indexTypeUint8: VkBool32;
}

VkPhysicalDeviceExtendedDynamicStateFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    extendedDynamicState: VkBool32;
}

PFN_vkCmdSetCullModeEXT :: #type (a0: VkCommandBuffer, a1: VkCullModeFlags) -> void #c_call;

PFN_vkCmdSetFrontFaceEXT :: #type (a0: VkCommandBuffer, a1: VkFrontFace) -> void #c_call;

PFN_vkCmdSetPrimitiveTopologyEXT :: #type (a0: VkCommandBuffer, a1: VkPrimitiveTopology) -> void #c_call;

PFN_vkCmdSetViewportWithCountEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkViewport) -> void #c_call;

PFN_vkCmdSetScissorWithCountEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkRect2D) -> void #c_call;

PFN_vkCmdBindVertexBuffers2EXT :: #type (a0: VkCommandBuffer, a1: u32, a2: u32, a3: *VkBuffer, a4: *VkDeviceSize, a5: *VkDeviceSize, a6: *VkDeviceSize) -> void #c_call;

PFN_vkCmdSetDepthTestEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetDepthWriteEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetDepthCompareOpEXT :: #type (a0: VkCommandBuffer, a1: VkCompareOp) -> void #c_call;

PFN_vkCmdSetDepthBoundsTestEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetStencilTestEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetStencilOpEXT :: #type (a0: VkCommandBuffer, a1: VkStencilFaceFlags, a2: VkStencilOp, a3: VkStencilOp, a4: VkStencilOp, a5: VkCompareOp) -> void #c_call;

//###
// vkCmdSetCullModeEXT :: (commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) -> void #foreign vulkan;

// vkCmdSetFrontFaceEXT :: (commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) -> void #foreign vulkan;

// vkCmdSetPrimitiveTopologyEXT :: (commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) -> void #foreign vulkan;

// vkCmdSetViewportWithCountEXT :: (commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: *VkViewport) -> void #foreign vulkan;

// vkCmdSetScissorWithCountEXT :: (commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: *VkRect2D) -> void #foreign vulkan;

// vkCmdBindVertexBuffers2EXT :: (commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *VkBuffer, pOffsets: *VkDeviceSize, pSizes: *VkDeviceSize, pStrides: *VkDeviceSize) -> void #foreign vulkan;

// vkCmdSetDepthTestEnableEXT :: (commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetDepthWriteEnableEXT :: (commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetDepthCompareOpEXT :: (commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) -> void #foreign vulkan;

// vkCmdSetDepthBoundsTestEnableEXT :: (commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetStencilTestEnableEXT :: (commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetStencilOpEXT :: (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) -> void #foreign vulkan;

VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderBufferFloat16Atomics: VkBool32;
    shaderBufferFloat16AtomicAdd: VkBool32;
    shaderBufferFloat16AtomicMinMax: VkBool32;
    shaderBufferFloat32AtomicMinMax: VkBool32;
    shaderBufferFloat64AtomicMinMax: VkBool32;
    shaderSharedFloat16Atomics: VkBool32;
    shaderSharedFloat16AtomicAdd: VkBool32;
    shaderSharedFloat16AtomicMinMax: VkBool32;
    shaderSharedFloat32AtomicMinMax: VkBool32;
    shaderSharedFloat64AtomicMinMax: VkBool32;
    shaderImageFloat32AtomicMinMax: VkBool32;
    sparseImageFloat32AtomicMinMax: VkBool32;
}

VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderDemoteToHelperInvocation: VkBool32;
}

VkIndirectCommandsLayoutNV_T :: struct {
}

VkIndirectCommandsLayoutNV :: *VkIndirectCommandsLayoutNV_T;

using VkIndirectCommandsTokenTypeNV :: enum u32 {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV :: 0;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV :: 1;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV :: 2;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV :: 3;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV :: 4;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV :: 5;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV :: 6;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV :: 7;
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV :: 2147483647;
}

using VkIndirectStateFlagBitsNV :: enum u32 {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV :: 1;
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV :: 2147483647;
}

VkIndirectStateFlagsNV :: VkFlags;

using VkIndirectCommandsLayoutUsageFlagBitsNV :: enum u32 {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV :: 1;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV :: 2;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV :: 4;
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV :: 2147483647;
}

VkIndirectCommandsLayoutUsageFlagsNV :: VkFlags;

VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxGraphicsShaderGroupCount: u32;
    maxIndirectSequenceCount: u32;
    maxIndirectCommandsTokenCount: u32;
    maxIndirectCommandsStreamCount: u32;
    maxIndirectCommandsTokenOffset: u32;
    maxIndirectCommandsStreamStride: u32;
    minSequencesCountBufferOffsetAlignment: u32;
    minSequencesIndexBufferOffsetAlignment: u32;
    minIndirectCommandsBufferOffsetAlignment: u32;
}

VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    deviceGeneratedCommands: VkBool32;
}

VkGraphicsShaderGroupCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    stageCount: u32;
    pStages: *VkPipelineShaderStageCreateInfo;
    pVertexInputState: *VkPipelineVertexInputStateCreateInfo;
    pTessellationState: *VkPipelineTessellationStateCreateInfo;
}

VkGraphicsPipelineShaderGroupsCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    groupCount: u32;
    pGroups: *VkGraphicsShaderGroupCreateInfoNV;
    pipelineCount: u32;
    pPipelines: *VkPipeline;
}

VkBindShaderGroupIndirectCommandNV :: struct {
    groupIndex: u32;
}

VkBindIndexBufferIndirectCommandNV :: struct {
    bufferAddress: VkDeviceAddress;
    size: u32;
    indexType: VkIndexType;
}

VkBindVertexBufferIndirectCommandNV :: struct {
    bufferAddress: VkDeviceAddress;
    size: u32;
    stride: u32;
}

VkSetStateFlagsIndirectCommandNV :: struct {
    data: u32;
}

VkIndirectCommandsStreamNV :: struct {
    buffer: VkBuffer;
    offset: VkDeviceSize;
}

VkIndirectCommandsLayoutTokenNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    tokenType: VkIndirectCommandsTokenTypeNV;
    stream: u32;
    offset: u32;
    vertexBindingUnit: u32;
    vertexDynamicStride: VkBool32;
    pushconstantPipelineLayout: VkPipelineLayout;
    pushconstantShaderStageFlags: VkShaderStageFlags;
    pushconstantOffset: u32;
    pushconstantSize: u32;
    indirectStateFlags: VkIndirectStateFlagsNV;
    indexTypeCount: u32;
    pIndexTypes: *VkIndexType;
    pIndexTypeValues: *u32;
}

VkIndirectCommandsLayoutCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkIndirectCommandsLayoutUsageFlagsNV;
    pipelineBindPoint: VkPipelineBindPoint;
    tokenCount: u32;
    pTokens: *VkIndirectCommandsLayoutTokenNV;
    streamCount: u32;
    pStreamStrides: *u32;
}

VkGeneratedCommandsInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    pipelineBindPoint: VkPipelineBindPoint;
    pipeline: VkPipeline;
    indirectCommandsLayout: VkIndirectCommandsLayoutNV;
    streamCount: u32;
    pStreams: *VkIndirectCommandsStreamNV;
    sequencesCount: u32;
    preprocessBuffer: VkBuffer;
    preprocessOffset: VkDeviceSize;
    preprocessSize: VkDeviceSize;
    sequencesCountBuffer: VkBuffer;
    sequencesCountOffset: VkDeviceSize;
    sequencesIndexBuffer: VkBuffer;
    sequencesIndexOffset: VkDeviceSize;
}

VkGeneratedCommandsMemoryRequirementsInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    pipelineBindPoint: VkPipelineBindPoint;
    pipeline: VkPipeline;
    indirectCommandsLayout: VkIndirectCommandsLayoutNV;
    maxSequencesCount: u32;
}

PFN_vkGetGeneratedCommandsMemoryRequirementsNV :: #type (a0: VkDevice, a1: *VkGeneratedCommandsMemoryRequirementsInfoNV, a2: *VkMemoryRequirements2) -> void #c_call;

PFN_vkCmdPreprocessGeneratedCommandsNV :: #type (a0: VkCommandBuffer, a1: *VkGeneratedCommandsInfoNV) -> void #c_call;

PFN_vkCmdExecuteGeneratedCommandsNV :: #type (a0: VkCommandBuffer, a1: VkBool32, a2: *VkGeneratedCommandsInfoNV) -> void #c_call;

PFN_vkCmdBindPipelineShaderGroupNV :: #type (a0: VkCommandBuffer, a1: VkPipelineBindPoint, a2: VkPipeline, a3: u32) -> void #c_call;

PFN_vkCreateIndirectCommandsLayoutNV :: #type (a0: VkDevice, a1: *VkIndirectCommandsLayoutCreateInfoNV, a2: *VkAllocationCallbacks, a3: *VkIndirectCommandsLayoutNV) -> VkResult #c_call;

PFN_vkDestroyIndirectCommandsLayoutNV :: #type (a0: VkDevice, a1: VkIndirectCommandsLayoutNV, a2: *VkAllocationCallbacks) -> void #c_call;

//###
// vkGetGeneratedCommandsMemoryRequirementsNV :: (device: VkDevice, pInfo: *VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: *VkMemoryRequirements2) -> void #foreign vulkan;

// vkCmdPreprocessGeneratedCommandsNV :: (commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoNV) -> void #foreign vulkan;

// vkCmdExecuteGeneratedCommandsNV :: (commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: *VkGeneratedCommandsInfoNV) -> void #foreign vulkan;

// vkCmdBindPipelineShaderGroupNV :: (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32) -> void #foreign vulkan;

// vkCreateIndirectCommandsLayoutNV :: (device: VkDevice, pCreateInfo: *VkIndirectCommandsLayoutCreateInfoNV, pAllocator: *VkAllocationCallbacks, pIndirectCommandsLayout: *VkIndirectCommandsLayoutNV) -> VkResult #foreign vulkan;

// vkDestroyIndirectCommandsLayoutNV :: (device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

VkPhysicalDeviceInheritedViewportScissorFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    inheritedViewportScissor2D: VkBool32;
}

VkCommandBufferInheritanceViewportScissorInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    viewportScissor2D: VkBool32;
    viewportDepthCount: u32;
    pViewportDepths: *VkViewport;
}

VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    texelBufferAlignment: VkBool32;
}

VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize;
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32;
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize;
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32;
}

VkRenderPassTransformBeginInfoQCOM :: struct {
    sType: VkStructureType;
    pNext: *void;
    transform: VkSurfaceTransformFlagBitsKHR;
}

VkCommandBufferInheritanceRenderPassTransformInfoQCOM :: struct {
    sType: VkStructureType;
    pNext: *void;
    transform: VkSurfaceTransformFlagBitsKHR;
    renderArea: VkRect2D;
}

using VkDeviceMemoryReportEventTypeEXT :: enum u32 {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT :: 0;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT :: 1;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT :: 2;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT :: 3;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT :: 4;
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT :: 2147483647;
}

VkDeviceMemoryReportFlagsEXT :: VkFlags;

VkPhysicalDeviceDeviceMemoryReportFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    deviceMemoryReport: VkBool32;
}

VkDeviceMemoryReportCallbackDataEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkDeviceMemoryReportFlagsEXT;
    type: VkDeviceMemoryReportEventTypeEXT;
    memoryObjectId: u64;
    size: VkDeviceSize;
    objectType: VkObjectType;
    objectHandle: u64;
    heapIndex: u32;
}

PFN_vkDeviceMemoryReportCallbackEXT :: #type (a0: *VkDeviceMemoryReportCallbackDataEXT, a1: *void) -> void #c_call;

VkDeviceDeviceMemoryReportCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkDeviceMemoryReportFlagsEXT;
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT;
    pUserData: *void;
}

PFN_vkAcquireDrmDisplayEXT :: #type (a0: VkPhysicalDevice, a1: s32, a2: VkDisplayKHR) -> VkResult #c_call;

PFN_vkGetDrmDisplayEXT :: #type (a0: VkPhysicalDevice, a1: s32, a2: u32, a3: *VkDisplayKHR) -> VkResult #c_call;

// vkAcquireDrmDisplayEXT :: (physicalDevice: VkPhysicalDevice, drmFd: s32, display: VkDisplayKHR) -> VkResult #foreign vulkan;

// vkGetDrmDisplayEXT :: (physicalDevice: VkPhysicalDevice, drmFd: s32, connectorId: u32, display: *VkDisplayKHR) -> VkResult #foreign vulkan;

VkPhysicalDeviceRobustness2FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    robustBufferAccess2: VkBool32;
    robustImageAccess2: VkBool32;
    nullDescriptor: VkBool32;
}

VkPhysicalDeviceRobustness2PropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    robustStorageBufferAccessSizeAlignment: VkDeviceSize;
    robustUniformBufferAccessSizeAlignment: VkDeviceSize;
}

VkSamplerCustomBorderColorCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    customBorderColor: VkClearColorValue;
    format: VkFormat;
}

VkPhysicalDeviceCustomBorderColorPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxCustomBorderColorSamplers: u32;
}

VkPhysicalDeviceCustomBorderColorFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    customBorderColors: VkBool32;
    customBorderColorWithoutFormat: VkBool32;
}

VkPrivateDataSlotEXT_T :: struct {
}

VkPrivateDataSlotEXT :: *VkPrivateDataSlotEXT_T;

using VkPrivateDataSlotCreateFlagBitsEXT :: enum_flags u32 {
    VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT :: 2147483647;
}

VkPrivateDataSlotCreateFlagsEXT :: VkPrivateDataSlotCreateFlagBitsEXT;

VkPhysicalDevicePrivateDataFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    privateData: VkBool32;
}

VkDevicePrivateDataCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    privateDataSlotRequestCount: u32;
}

VkPrivateDataSlotCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPrivateDataSlotCreateFlagsEXT;
}

PFN_vkCreatePrivateDataSlotEXT :: #type (a0: VkDevice, a1: *VkPrivateDataSlotCreateInfoEXT, a2: *VkAllocationCallbacks, a3: *VkPrivateDataSlotEXT) -> VkResult #c_call;

PFN_vkDestroyPrivateDataSlotEXT :: #type (a0: VkDevice, a1: VkPrivateDataSlotEXT, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkSetPrivateDataEXT :: #type (a0: VkDevice, a1: VkObjectType, a2: u64, a3: VkPrivateDataSlotEXT, a4: u64) -> VkResult #c_call;

PFN_vkGetPrivateDataEXT :: #type (a0: VkDevice, a1: VkObjectType, a2: u64, a3: VkPrivateDataSlotEXT, a4: *u64) -> void #c_call;

//###
// vkCreatePrivateDataSlotEXT :: (device: VkDevice, pCreateInfo: *VkPrivateDataSlotCreateInfoEXT, pAllocator: *VkAllocationCallbacks, pPrivateDataSlot: *VkPrivateDataSlotEXT) -> VkResult #foreign vulkan;

// vkDestroyPrivateDataSlotEXT :: (device: VkDevice, privateDataSlot: VkPrivateDataSlotEXT, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkSetPrivateDataEXT :: (device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlotEXT, data: u64) -> VkResult #foreign vulkan;

// vkGetPrivateDataEXT :: (device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlotEXT, pData: *u64) -> void #foreign vulkan;

VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    pipelineCreationCacheControl: VkBool32;
}

using VkDeviceDiagnosticsConfigFlagBitsNV :: enum u32 {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV :: 1;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV :: 2;
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV :: 4;
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV :: 2147483647;
}

VkDeviceDiagnosticsConfigFlagsNV :: VkFlags;

VkPhysicalDeviceDiagnosticsConfigFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    diagnosticsConfig: VkBool32;
}

VkDeviceDiagnosticsConfigCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkDeviceDiagnosticsConfigFlagsNV;
}

using VkFragmentShadingRateTypeNV :: enum u32 {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV :: 0;
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV :: 1;
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV :: 2147483647;
}

using VkFragmentShadingRateNV :: enum u32 {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV :: 0;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV :: 1;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV :: 4;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV :: 5;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV :: 6;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV :: 9;
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV :: 10;
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV :: 11;
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV :: 12;
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV :: 13;
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV :: 14;
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV :: 15;
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV :: 2147483647;
}

VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentShadingRateEnums: VkBool32;
    supersampleFragmentShadingRates: VkBool32;
    noInvocationFragmentShadingRates: VkBool32;
}

VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits;
}

VkPipelineFragmentShadingRateEnumStateCreateInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    shadingRateType: VkFragmentShadingRateTypeNV;
    shadingRate: VkFragmentShadingRateNV;
    combinerOps: [2] VkFragmentShadingRateCombinerOpKHR;
}

PFN_vkCmdSetFragmentShadingRateEnumNV :: #type (a0: VkCommandBuffer, a1: VkFragmentShadingRateNV, a2: *[2] VkFragmentShadingRateCombinerOpKHR) -> void #c_call;

// vkCmdSetFragmentShadingRateEnumNV :: (commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: [2] VkFragmentShadingRateCombinerOpKHR) -> void #foreign vulkan;

using VkAccelerationStructureMotionInstanceTypeNV :: enum u32 {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV :: 0;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV :: 1;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV :: 2;
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV :: 2147483647;
}

VkAccelerationStructureMotionInfoFlagsNV :: VkFlags;

VkAccelerationStructureMotionInstanceFlagsNV :: VkFlags;

VkDeviceOrHostAddressConstKHR :: union {
    deviceAddress: VkDeviceAddress;
    hostAddress: *void;
}

VkAccelerationStructureGeometryMotionTrianglesDataNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexData: VkDeviceOrHostAddressConstKHR;
}

VkAccelerationStructureMotionInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxInstances: u32;
    flags: VkAccelerationStructureMotionInfoFlagsNV;
}

VkAccelerationStructureMatrixMotionInstanceNV :: struct {
    transformT0: VkTransformMatrixKHR;
    transformT1: VkTransformMatrixKHR;
    instanceCustomIndex: u32;
    mask: u32;
    instanceShaderBindingTableRecordOffset: u32;
    flags: VkGeometryInstanceFlagsKHR;
    accelerationStructureReference: u64;
}

VkSRTDataNV :: struct {
    sx: float32;
    a: float32;
    b: float32;
    pvx: float32;
    sy: float32;
    c: float32;
    pvy: float32;
    sz: float32;
    pvz: float32;
    qx: float32;
    qy: float32;
    qz: float32;
    qw: float32;
    tx: float32;
    ty: float32;
    tz: float32;
}

VkAccelerationStructureSRTMotionInstanceNV :: struct {
    transformT0: VkSRTDataNV;
    transformT1: VkSRTDataNV;
    instanceCustomIndex: u32;
    mask: u32;
    instanceShaderBindingTableRecordOffset: u32;
    flags: VkGeometryInstanceFlagsKHR;
    accelerationStructureReference: u64;
}

VkAccelerationStructureMotionInstanceDataNV :: union {
    staticInstance: VkAccelerationStructureInstanceKHR;
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV;
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV;
}

VkAccelerationStructureMotionInstanceNV :: struct {
    type: VkAccelerationStructureMotionInstanceTypeNV;
    flags: VkAccelerationStructureMotionInstanceFlagsNV;
    data: VkAccelerationStructureMotionInstanceDataNV;
}

VkPhysicalDeviceRayTracingMotionBlurFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    rayTracingMotionBlur: VkBool32;
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32;
}

VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    ycbcr2plane444Formats: VkBool32;
}

VkPhysicalDeviceFragmentDensityMap2FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fragmentDensityMapDeferred: VkBool32;
}

VkPhysicalDeviceFragmentDensityMap2PropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    subsampledLoads: VkBool32;
    subsampledCoarseReconstructionEarlyAccess: VkBool32;
    maxSubsampledArrayLayers: u32;
    maxDescriptorSetSubsampledSamplers: u32;
}

VkCopyCommandTransformInfoQCOM :: struct {
    sType: VkStructureType;
    pNext: *void;
    transform: VkSurfaceTransformFlagBitsKHR;
}

VkPhysicalDeviceImageRobustnessFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    robustImageAccess: VkBool32;
}

VkPhysicalDevice4444FormatsFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    formatA4R4G4B4: VkBool32;
    formatA4B4G4R4: VkBool32;
}

PFN_vkAcquireWinrtDisplayNV :: #type (a0: VkPhysicalDevice, a1: VkDisplayKHR) -> VkResult #c_call;

PFN_vkGetWinrtDisplayNV :: #type (a0: VkPhysicalDevice, a1: u32, a2: *VkDisplayKHR) -> VkResult #c_call;

// vkAcquireWinrtDisplayNV :: (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult #foreign vulkan;

// vkGetWinrtDisplayNV :: (physicalDevice: VkPhysicalDevice, deviceRelativeId: u32, pDisplay: *VkDisplayKHR) -> VkResult #foreign vulkan;

VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE :: struct {
    sType: VkStructureType;
    pNext: *void;
    mutableDescriptorType: VkBool32;
}

VkMutableDescriptorTypeListVALVE :: struct {
    descriptorTypeCount: u32;
    pDescriptorTypes: *VkDescriptorType;
}

VkMutableDescriptorTypeCreateInfoVALVE :: struct {
    sType: VkStructureType;
    pNext: *void;
    mutableDescriptorTypeListCount: u32;
    pMutableDescriptorTypeLists: *VkMutableDescriptorTypeListVALVE;
}

VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexInputDynamicState: VkBool32;
}

VkVertexInputBindingDescription2EXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    binding: u32;
    stride: u32;
    inputRate: VkVertexInputRate;
    divisor: u32;
}

VkVertexInputAttributeDescription2EXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    location: u32;
    binding: u32;
    format: VkFormat;
    offset: u32;
}

PFN_vkCmdSetVertexInputEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkVertexInputBindingDescription2EXT, a3: u32, a4: *VkVertexInputAttributeDescription2EXT) -> void #c_call;

//###
// vkCmdSetVertexInputEXT :: (commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: *VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: *VkVertexInputAttributeDescription2EXT) -> void #foreign vulkan;

VkPhysicalDeviceDrmPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    hasPrimary: VkBool32;
    hasRender: VkBool32;
    primaryMajor: s64;
    primaryMinor: s64;
    renderMajor: s64;
    renderMinor: s64;
}

VkSubpassShadingPipelineCreateInfoHUAWEI :: struct {
    sType: VkStructureType;
    pNext: *void;
    renderPass: VkRenderPass;
    subpass: u32;
}

VkPhysicalDeviceSubpassShadingFeaturesHUAWEI :: struct {
    sType: VkStructureType;
    pNext: *void;
    subpassShading: VkBool32;
}

VkPhysicalDeviceSubpassShadingPropertiesHUAWEI :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxSubpassShadingWorkgroupSizeAspectRatio: u32;
}

PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI :: #type (a0: VkDevice, a1: VkRenderPass, a2: *VkExtent2D) -> VkResult #c_call;

PFN_vkCmdSubpassShadingHUAWEI :: #type (a0: VkCommandBuffer) -> void #c_call;

// ###
// vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI :: (device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: *VkExtent2D) -> VkResult #foreign vulkan;

// vkCmdSubpassShadingHUAWEI :: (commandBuffer: VkCommandBuffer) -> void #foreign vulkan;

VkPhysicalDeviceInvocationMaskFeaturesHUAWEI :: struct {
    sType: VkStructureType;
    pNext: *void;
    invocationMask: VkBool32;
}

PFN_vkCmdBindInvocationMaskHUAWEI :: #type (a0: VkCommandBuffer, a1: VkImageView, a2: VkImageLayout) -> void #c_call;

// vkCmdBindInvocationMaskHUAWEI :: (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) -> void #foreign vulkan;

VkRemoteAddressNV :: *void;

VkMemoryGetRemoteAddressInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    memory: VkDeviceMemory;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

VkPhysicalDeviceExternalMemoryRDMAFeaturesNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    externalMemoryRDMA: VkBool32;
}

PFN_vkGetMemoryRemoteAddressNV :: #type (a0: VkDevice, a1: *VkMemoryGetRemoteAddressInfoNV, a2: *VkRemoteAddressNV) -> VkResult #c_call;

// vkGetMemoryRemoteAddressNV :: (device: VkDevice, pMemoryGetRemoteAddressInfo: *VkMemoryGetRemoteAddressInfoNV, pAddress: *VkRemoteAddressNV) -> VkResult #foreign vulkan;

VkPhysicalDeviceExtendedDynamicState2FeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    extendedDynamicState2: VkBool32;
    extendedDynamicState2LogicOp: VkBool32;
    extendedDynamicState2PatchControlPoints: VkBool32;
}

PFN_vkCmdSetPatchControlPointsEXT :: #type (a0: VkCommandBuffer, a1: u32) -> void #c_call;

PFN_vkCmdSetRasterizerDiscardEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetDepthBiasEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

PFN_vkCmdSetLogicOpEXT :: #type (a0: VkCommandBuffer, a1: VkLogicOp) -> void #c_call;

PFN_vkCmdSetPrimitiveRestartEnableEXT :: #type (a0: VkCommandBuffer, a1: VkBool32) -> void #c_call;

// ###

// vkCmdSetPatchControlPointsEXT :: (commandBuffer: VkCommandBuffer, patchControlPoints: u32) -> void #foreign vulkan;

// vkCmdSetRasterizerDiscardEnableEXT :: (commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetDepthBiasEnableEXT :: (commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) -> void #foreign vulkan;

// vkCmdSetLogicOpEXT :: (commandBuffer: VkCommandBuffer, logicOp: VkLogicOp) -> void #foreign vulkan;

// vkCmdSetPrimitiveRestartEnableEXT :: (commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) -> void #foreign vulkan;

VkPhysicalDeviceColorWriteEnableFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    colorWriteEnable: VkBool32;
}

VkPipelineColorWriteCreateInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    attachmentCount: u32;
    pColorWriteEnables: *VkBool32;
}

PFN_vkCmdSetColorWriteEnableEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkBool32) -> void #c_call;

//###
// vkCmdSetColorWriteEnableEXT :: (commandBuffer: VkCommandBuffer, attachmentCount: u32, pColorWriteEnables: *VkBool32) -> void #foreign vulkan;

VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    globalPriorityQuery: VkBool32;
}


VkQueueFamilyGlobalPriorityPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    priorityCount: u32;
    priorities: [16] VkQueueGlobalPriorityEXT;
}

VkPhysicalDeviceMultiDrawFeaturesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    multiDraw: VkBool32;
}

VkPhysicalDeviceMultiDrawPropertiesEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxMultiDrawCount: u32;
}

VkMultiDrawInfoEXT :: struct {
    firstVertex: u32;
    vertexCount: u32;
}

VkMultiDrawIndexedInfoEXT :: struct {
    firstIndex: u32;
    indexCount: u32;
    vertexOffset: s32;
}

PFN_vkCmdDrawMultiEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkMultiDrawInfoEXT, a3: u32, a4: u32, a5: u32) -> void #c_call;

PFN_vkCmdDrawMultiIndexedEXT :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkMultiDrawIndexedInfoEXT, a3: u32, a4: u32, a5: u32, a6: *s32) -> void #c_call;

// ###

// vkCmdDrawMultiEXT :: (commandBuffer: VkCommandBuffer, drawCount: u32, pVertexInfo: *VkMultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) -> void #foreign vulkan;

// vkCmdDrawMultiIndexedEXT :: (commandBuffer: VkCommandBuffer, drawCount: u32, pIndexInfo: *VkMultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: *s32) -> void #foreign vulkan;

VkAccelerationStructureKHR_T :: struct {
}

VkAccelerationStructureKHR :: *VkAccelerationStructureKHR_T;

using VkBuildAccelerationStructureModeKHR :: enum u32 {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR :: 0;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR :: 1;
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR :: 2147483647;
}

using VkAccelerationStructureBuildTypeKHR :: enum u32 {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR :: 0;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR :: 1;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR :: 2;
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR :: 2147483647;
}

using VkAccelerationStructureCompatibilityKHR :: enum u32 {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR :: 0;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR :: 1;
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR :: 2147483647;
}

using VkAccelerationStructureCreateFlagBitsKHR :: enum_flags u32 {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR :: 1;
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV :: 4;
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR :: 2147483647;
}

VkAccelerationStructureCreateFlagsKHR :: VkAccelerationStructureCreateFlagBitsKHR;

VkDeviceOrHostAddressKHR :: union {
    deviceAddress: VkDeviceAddress;
    hostAddress: *void;
}

VkAccelerationStructureBuildRangeInfoKHR :: struct {
    primitiveCount: u32;
    primitiveOffset: u32;
    firstVertex: u32;
    transformOffset: u32;
}

VkAccelerationStructureGeometryTrianglesDataKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    vertexFormat: VkFormat;
    vertexData: VkDeviceOrHostAddressConstKHR;
    vertexStride: VkDeviceSize;
    maxVertex: u32;
    indexType: VkIndexType;
    indexData: VkDeviceOrHostAddressConstKHR;
    transformData: VkDeviceOrHostAddressConstKHR;
}

VkAccelerationStructureGeometryAabbsDataKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    data: VkDeviceOrHostAddressConstKHR;
    stride: VkDeviceSize;
}

VkAccelerationStructureGeometryInstancesDataKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    arrayOfPointers: VkBool32;
    data: VkDeviceOrHostAddressConstKHR;
}

VkAccelerationStructureGeometryDataKHR :: union {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR;
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR;
    instances: VkAccelerationStructureGeometryInstancesDataKHR;
}

VkAccelerationStructureGeometryKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    geometryType: VkGeometryTypeKHR;
    geometry: VkAccelerationStructureGeometryDataKHR;
    flags: VkGeometryFlagsKHR;
}

VkAccelerationStructureBuildGeometryInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkAccelerationStructureTypeKHR;
    flags: VkBuildAccelerationStructureFlagsKHR;
    mode: VkBuildAccelerationStructureModeKHR;
    srcAccelerationStructure: VkAccelerationStructureKHR;
    dstAccelerationStructure: VkAccelerationStructureKHR;
    geometryCount: u32;
    pGeometries: *VkAccelerationStructureGeometryKHR;
    ppGeometries: **VkAccelerationStructureGeometryKHR;
    scratchData: VkDeviceOrHostAddressKHR;
}

VkAccelerationStructureCreateInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    createFlags: VkAccelerationStructureCreateFlagsKHR;
    buffer: VkBuffer;
    offset: VkDeviceSize;
    size: VkDeviceSize;
    type: VkAccelerationStructureTypeKHR;
    deviceAddress: VkDeviceAddress;
}

VkWriteDescriptorSetAccelerationStructureKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructureCount: u32;
    pAccelerationStructures: *VkAccelerationStructureKHR;
}

VkPhysicalDeviceAccelerationStructureFeaturesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructure: VkBool32;
    accelerationStructureCaptureReplay: VkBool32;
    accelerationStructureIndirectBuild: VkBool32;
    accelerationStructureHostCommands: VkBool32;
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32;
}

VkPhysicalDeviceAccelerationStructurePropertiesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxGeometryCount: u64;
    maxInstanceCount: u64;
    maxPrimitiveCount: u64;
    maxPerStageDescriptorAccelerationStructures: u32;
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32;
    maxDescriptorSetAccelerationStructures: u32;
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32;
    minAccelerationStructureScratchOffsetAlignment: u32;
}

VkAccelerationStructureDeviceAddressInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructure: VkAccelerationStructureKHR;
}

VkAccelerationStructureVersionInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    pVersionData: *u8;
}

VkCopyAccelerationStructureToMemoryInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    src: VkAccelerationStructureKHR;
    dst: VkDeviceOrHostAddressKHR;
    mode: VkCopyAccelerationStructureModeKHR;
}

VkCopyMemoryToAccelerationStructureInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    src: VkDeviceOrHostAddressConstKHR;
    dst: VkAccelerationStructureKHR;
    mode: VkCopyAccelerationStructureModeKHR;
}

VkCopyAccelerationStructureInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    src: VkAccelerationStructureKHR;
    dst: VkAccelerationStructureKHR;
    mode: VkCopyAccelerationStructureModeKHR;
}

VkAccelerationStructureBuildSizesInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    accelerationStructureSize: VkDeviceSize;
    updateScratchSize: VkDeviceSize;
    buildScratchSize: VkDeviceSize;
}

PFN_vkCreateAccelerationStructureKHR :: #type (a0: VkDevice, a1: *VkAccelerationStructureCreateInfoKHR, a2: *VkAllocationCallbacks, a3: *VkAccelerationStructureKHR) -> VkResult #c_call;

PFN_vkDestroyAccelerationStructureKHR :: #type (a0: VkDevice, a1: VkAccelerationStructureKHR, a2: *VkAllocationCallbacks) -> void #c_call;

PFN_vkCmdBuildAccelerationStructuresKHR :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkAccelerationStructureBuildGeometryInfoKHR, a3: **VkAccelerationStructureBuildRangeInfoKHR) -> void #c_call;

PFN_vkCmdBuildAccelerationStructuresIndirectKHR :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkAccelerationStructureBuildGeometryInfoKHR, a3: *VkDeviceAddress, a4: *u32, a5: **u32) -> void #c_call;

PFN_vkBuildAccelerationStructuresKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: u32, a3: *VkAccelerationStructureBuildGeometryInfoKHR, a4: **VkAccelerationStructureBuildRangeInfoKHR) -> VkResult #c_call;

PFN_vkCopyAccelerationStructureKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: *VkCopyAccelerationStructureInfoKHR) -> VkResult #c_call;

PFN_vkCopyAccelerationStructureToMemoryKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: *VkCopyAccelerationStructureToMemoryInfoKHR) -> VkResult #c_call;

PFN_vkCopyMemoryToAccelerationStructureKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: *VkCopyMemoryToAccelerationStructureInfoKHR) -> VkResult #c_call;

PFN_vkWriteAccelerationStructuresPropertiesKHR :: #type (a0: VkDevice, a1: u32, a2: *VkAccelerationStructureKHR, a3: VkQueryType, a4: u64, a5: *void, a6: u64) -> VkResult #c_call;

PFN_vkCmdCopyAccelerationStructureKHR :: #type (a0: VkCommandBuffer, a1: *VkCopyAccelerationStructureInfoKHR) -> void #c_call;

PFN_vkCmdCopyAccelerationStructureToMemoryKHR :: #type (a0: VkCommandBuffer, a1: *VkCopyAccelerationStructureToMemoryInfoKHR) -> void #c_call;

PFN_vkCmdCopyMemoryToAccelerationStructureKHR :: #type (a0: VkCommandBuffer, a1: *VkCopyMemoryToAccelerationStructureInfoKHR) -> void #c_call;

PFN_vkGetAccelerationStructureDeviceAddressKHR :: #type (a0: VkDevice, a1: *VkAccelerationStructureDeviceAddressInfoKHR) -> VkDeviceAddress #c_call;

PFN_vkCmdWriteAccelerationStructuresPropertiesKHR :: #type (a0: VkCommandBuffer, a1: u32, a2: *VkAccelerationStructureKHR, a3: VkQueryType, a4: VkQueryPool, a5: u32) -> void #c_call;

PFN_vkGetDeviceAccelerationStructureCompatibilityKHR :: #type (a0: VkDevice, a1: *VkAccelerationStructureVersionInfoKHR, a2: *VkAccelerationStructureCompatibilityKHR) -> void #c_call;

PFN_vkGetAccelerationStructureBuildSizesKHR :: #type (a0: VkDevice, a1: VkAccelerationStructureBuildTypeKHR, a2: *VkAccelerationStructureBuildGeometryInfoKHR, a3: *u32, a4: *VkAccelerationStructureBuildSizesInfoKHR) -> void #c_call;

// ###

// vkCreateAccelerationStructureKHR :: (device: VkDevice, pCreateInfo: *VkAccelerationStructureCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pAccelerationStructure: *VkAccelerationStructureKHR) -> VkResult #foreign vulkan;

// vkDestroyAccelerationStructureKHR :: (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: *VkAllocationCallbacks) -> void #foreign vulkan;

// vkCmdBuildAccelerationStructuresKHR :: (commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **VkAccelerationStructureBuildRangeInfoKHR) -> void #foreign vulkan;

// vkCmdBuildAccelerationStructuresIndirectKHR :: (commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: *VkDeviceAddress, pIndirectStrides: *u32, ppMaxPrimitiveCounts: **u32) -> void #foreign vulkan;

// vkBuildAccelerationStructuresKHR :: (device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: *VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: **VkAccelerationStructureBuildRangeInfoKHR) -> VkResult #foreign vulkan;

// vkCopyAccelerationStructureKHR :: (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyAccelerationStructureInfoKHR) -> VkResult #foreign vulkan;

// vkCopyAccelerationStructureToMemoryKHR :: (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyAccelerationStructureToMemoryInfoKHR) -> VkResult #foreign vulkan;

// vkCopyMemoryToAccelerationStructureKHR :: (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: *VkCopyMemoryToAccelerationStructureInfoKHR) -> VkResult #foreign vulkan;

// vkWriteAccelerationStructuresPropertiesKHR :: (device: VkDevice, accelerationStructureCount: u32, pAccelerationStructures: *VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: u64, pData: *void, stride: u64) -> VkResult #foreign vulkan;

// vkCmdCopyAccelerationStructureKHR :: (commandBuffer: VkCommandBuffer, pInfo: *VkCopyAccelerationStructureInfoKHR) -> void #foreign vulkan;

// vkCmdCopyAccelerationStructureToMemoryKHR :: (commandBuffer: VkCommandBuffer, pInfo: *VkCopyAccelerationStructureToMemoryInfoKHR) -> void #foreign vulkan;

// vkCmdCopyMemoryToAccelerationStructureKHR :: (commandBuffer: VkCommandBuffer, pInfo: *VkCopyMemoryToAccelerationStructureInfoKHR) -> void #foreign vulkan;

// vkGetAccelerationStructureDeviceAddressKHR :: (device: VkDevice, pInfo: *VkAccelerationStructureDeviceAddressInfoKHR) -> VkDeviceAddress #foreign vulkan;

// vkCmdWriteAccelerationStructuresPropertiesKHR :: (commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) -> void #foreign vulkan;

// vkGetDeviceAccelerationStructureCompatibilityKHR :: (device: VkDevice, pVersionInfo: *VkAccelerationStructureVersionInfoKHR, pCompatibility: *VkAccelerationStructureCompatibilityKHR) -> void #foreign vulkan;

// vkGetAccelerationStructureBuildSizesKHR :: (device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: *VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: *u32, pSizeInfo: *VkAccelerationStructureBuildSizesInfoKHR) -> void #foreign vulkan;

using VkShaderGroupShaderKHR :: enum u32 {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR :: 0;
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR :: 1;
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR :: 2;
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR :: 3;
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR :: 2147483647;
}

VkRayTracingShaderGroupCreateInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    type: VkRayTracingShaderGroupTypeKHR;
    generalShader: u32;
    closestHitShader: u32;
    anyHitShader: u32;
    intersectionShader: u32;
    pShaderGroupCaptureReplayHandle: *void;
}

VkRayTracingPipelineInterfaceCreateInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    maxPipelineRayPayloadSize: u32;
    maxPipelineRayHitAttributeSize: u32;
}

VkRayTracingPipelineCreateInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkPipelineCreateFlags;
    stageCount: u32;
    pStages: *VkPipelineShaderStageCreateInfo;
    groupCount: u32;
    pGroups: *VkRayTracingShaderGroupCreateInfoKHR;
    maxPipelineRayRecursionDepth: u32;
    pLibraryInfo: *VkPipelineLibraryCreateInfoKHR;
    pLibraryInterface: *VkRayTracingPipelineInterfaceCreateInfoKHR;
    pDynamicState: *VkPipelineDynamicStateCreateInfo;
    layout: VkPipelineLayout;
    basePipelineHandle: VkPipeline;
    basePipelineIndex: s32;
}

VkPhysicalDeviceRayTracingPipelineFeaturesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    rayTracingPipeline: VkBool32;
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32;
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32;
    rayTracingPipelineTraceRaysIndirect: VkBool32;
    rayTraversalPrimitiveCulling: VkBool32;
}

VkPhysicalDeviceRayTracingPipelinePropertiesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    shaderGroupHandleSize: u32;
    maxRayRecursionDepth: u32;
    maxShaderGroupStride: u32;
    shaderGroupBaseAlignment: u32;
    shaderGroupHandleCaptureReplaySize: u32;
    maxRayDispatchInvocationCount: u32;
    shaderGroupHandleAlignment: u32;
    maxRayHitAttributeSize: u32;
}

VkStridedDeviceAddressRegionKHR :: struct {
    deviceAddress: VkDeviceAddress;
    stride: VkDeviceSize;
    size: VkDeviceSize;
}

VkTraceRaysIndirectCommandKHR :: struct {
    width: u32;
    height: u32;
    depth: u32;
}

PFN_vkCmdTraceRaysKHR :: #type (a0: VkCommandBuffer, a1: *VkStridedDeviceAddressRegionKHR, a2: *VkStridedDeviceAddressRegionKHR, a3: *VkStridedDeviceAddressRegionKHR, a4: *VkStridedDeviceAddressRegionKHR, a5: u32, a6: u32, a7: u32) -> void #c_call;

PFN_vkCreateRayTracingPipelinesKHR :: #type (a0: VkDevice, a1: VkDeferredOperationKHR, a2: VkPipelineCache, a3: u32, a4: *VkRayTracingPipelineCreateInfoKHR, a5: *VkAllocationCallbacks, a6: *VkPipeline) -> VkResult #c_call;

PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR :: #type (a0: VkDevice, a1: VkPipeline, a2: u32, a3: u32, a4: u64, a5: *void) -> VkResult #c_call;

PFN_vkCmdTraceRaysIndirectKHR :: #type (a0: VkCommandBuffer, a1: *VkStridedDeviceAddressRegionKHR, a2: *VkStridedDeviceAddressRegionKHR, a3: *VkStridedDeviceAddressRegionKHR, a4: *VkStridedDeviceAddressRegionKHR, a5: VkDeviceAddress) -> void #c_call;

PFN_vkGetRayTracingShaderGroupStackSizeKHR :: #type (a0: VkDevice, a1: VkPipeline, a2: u32, a3: VkShaderGroupShaderKHR) -> VkDeviceSize #c_call;

PFN_vkCmdSetRayTracingPipelineStackSizeKHR :: #type (a0: VkCommandBuffer, a1: u32) -> void #c_call;

//###

// vkCmdTraceRaysKHR :: (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *VkStridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) -> void #foreign vulkan;

// vkCreateRayTracingPipelinesKHR :: (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *VkRayTracingPipelineCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline) -> VkResult #foreign vulkan;

// vkGetRayTracingCaptureReplayShaderGroupHandlesKHR :: (device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: u64, pData: *void) -> VkResult #foreign vulkan;

// vkCmdTraceRaysIndirectKHR :: (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: *VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: *VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress) -> void #foreign vulkan;

// vkGetRayTracingShaderGroupStackSizeKHR :: (device: VkDevice, pipeline: VkPipeline, group: u32, groupShader: VkShaderGroupShaderKHR) -> VkDeviceSize #foreign vulkan;

// vkCmdSetRayTracingPipelineStackSizeKHR :: (commandBuffer: VkCommandBuffer, pipelineStackSize: u32) -> void #foreign vulkan;

VkPhysicalDeviceRayQueryFeaturesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    rayQuery: VkBool32;
}

//### vulkan_win32.h
#if OS == .WINDOWS {

// by jaicc

VkWin32SurfaceCreateFlagsKHR :: VkFlags;

VkWin32SurfaceCreateInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    flags: VkWin32SurfaceCreateFlagsKHR;
    hinstance: HINSTANCE;
    hwnd: HWND;
}

PFN_vkCreateWin32SurfaceKHR :: #type (a0: VkInstance, a1: *VkWin32SurfaceCreateInfoKHR, a2: *VkAllocationCallbacks, a3: *VkSurfaceKHR) -> VkResult #c_call;

PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR :: #type (a0: VkPhysicalDevice, a1: u32) -> VkBool32 #c_call;

vkCreateWin32SurfaceKHR :: (instance: VkInstance, pCreateInfo: *VkWin32SurfaceCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSurface: *VkSurfaceKHR) -> VkResult #foreign vulkan;

vkGetPhysicalDeviceWin32PresentationSupportKHR :: (physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32) -> VkBool32 #foreign vulkan;


VkImportMemoryWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    handleType: VkExternalMemoryHandleTypeFlagBits;
    handle: HANDLE;
    name: LPCWSTR;
}

VkExportMemoryWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    pAttributes: *SECURITY_ATTRIBUTES;
    dwAccess: DWORD;
    name: LPCWSTR;
}

VkMemoryWin32HandlePropertiesKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    memoryTypeBits: u32;
}

VkMemoryGetWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    memory: VkDeviceMemory;
    handleType: VkExternalMemoryHandleTypeFlagBits;
}

PFN_vkGetMemoryWin32HandleKHR :: #type (a0: VkDevice, a1: *VkMemoryGetWin32HandleInfoKHR, a2: *HANDLE) -> VkResult #c_call;

PFN_vkGetMemoryWin32HandlePropertiesKHR :: #type (a0: VkDevice, a1: VkExternalMemoryHandleTypeFlagBits, a2: HANDLE, a3: *VkMemoryWin32HandlePropertiesKHR) -> VkResult #c_call;

// vkGetMemoryWin32HandleKHR :: (device: VkDevice, pGetWin32HandleInfo: *VkMemoryGetWin32HandleInfoKHR, pHandle: *HANDLE) -> VkResult #foreign vulkan;

// vkGetMemoryWin32HandlePropertiesKHR :: (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: *VkMemoryWin32HandlePropertiesKHR) -> VkResult #foreign vulkan;

VkWin32KeyedMutexAcquireReleaseInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    acquireCount: u32;
    pAcquireSyncs: *VkDeviceMemory;
    pAcquireKeys: *u64;
    pAcquireTimeouts: *u32;
    releaseCount: u32;
    pReleaseSyncs: *VkDeviceMemory;
    pReleaseKeys: *u64;
}

VkImportSemaphoreWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    semaphore: VkSemaphore;
    flags: VkSemaphoreImportFlags;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
    handle: HANDLE;
    name: LPCWSTR;
}

VkExportSemaphoreWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    pAttributes: *SECURITY_ATTRIBUTES;
    dwAccess: DWORD;
    name: LPCWSTR;
}

VkD3D12FenceSubmitInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    waitSemaphoreValuesCount: u32;
    pWaitSemaphoreValues: *u64;
    signalSemaphoreValuesCount: u32;
    pSignalSemaphoreValues: *u64;
}

VkSemaphoreGetWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    semaphore: VkSemaphore;
    handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

PFN_vkImportSemaphoreWin32HandleKHR :: #type (a0: VkDevice, a1: *VkImportSemaphoreWin32HandleInfoKHR) -> VkResult #c_call;

PFN_vkGetSemaphoreWin32HandleKHR :: #type (a0: VkDevice, a1: *VkSemaphoreGetWin32HandleInfoKHR, a2: *HANDLE) -> VkResult #c_call;

// vkImportSemaphoreWin32HandleKHR :: (device: VkDevice, pImportSemaphoreWin32HandleInfo: *VkImportSemaphoreWin32HandleInfoKHR) -> VkResult #foreign vulkan;

// vkGetSemaphoreWin32HandleKHR :: (device: VkDevice, pGetWin32HandleInfo: *VkSemaphoreGetWin32HandleInfoKHR, pHandle: *HANDLE) -> VkResult #foreign vulkan;

VkImportFenceWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    fence: VkFence;
    flags: VkFenceImportFlags;
    handleType: VkExternalFenceHandleTypeFlagBits;
    handle: HANDLE;
    name: LPCWSTR;
}

VkExportFenceWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    pAttributes: *SECURITY_ATTRIBUTES;
    dwAccess: DWORD;
    name: LPCWSTR;
}

VkFenceGetWin32HandleInfoKHR :: struct {
    sType: VkStructureType;
    pNext: *void;
    fence: VkFence;
    handleType: VkExternalFenceHandleTypeFlagBits;
}

PFN_vkImportFenceWin32HandleKHR :: #type (a0: VkDevice, a1: *VkImportFenceWin32HandleInfoKHR) -> VkResult #c_call;

PFN_vkGetFenceWin32HandleKHR :: #type (a0: VkDevice, a1: *VkFenceGetWin32HandleInfoKHR, a2: *HANDLE) -> VkResult #c_call;

// vkImportFenceWin32HandleKHR :: (device: VkDevice, pImportFenceWin32HandleInfo: *VkImportFenceWin32HandleInfoKHR) -> VkResult #foreign vulkan;

// vkGetFenceWin32HandleKHR :: (device: VkDevice, pGetWin32HandleInfo: *VkFenceGetWin32HandleInfoKHR, pHandle: *HANDLE) -> VkResult #foreign vulkan;

VkImportMemoryWin32HandleInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    handleType: VkExternalMemoryHandleTypeFlagsNV;
    handle: HANDLE;
}

VkExportMemoryWin32HandleInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    pAttributes: *SECURITY_ATTRIBUTES;
    dwAccess: DWORD;
}

PFN_vkGetMemoryWin32HandleNV :: #type (a0: VkDevice, a1: VkDeviceMemory, a2: VkExternalMemoryHandleTypeFlagsNV, a3: *HANDLE) -> VkResult #c_call;

// vkGetMemoryWin32HandleNV :: (device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: *HANDLE) -> VkResult #foreign vulkan;

VkWin32KeyedMutexAcquireReleaseInfoNV :: struct {
    sType: VkStructureType;
    pNext: *void;
    acquireCount: u32;
    pAcquireSyncs: *VkDeviceMemory;
    pAcquireKeys: *u64;
    pAcquireTimeoutMilliseconds: *u32;
    releaseCount: u32;
    pReleaseSyncs: *VkDeviceMemory;
    pReleaseKeys: *u64;
}

using VkFullScreenExclusiveEXT :: enum u32 {
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT :: 0;
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT :: 1;
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT :: 2;
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT :: 3;
    VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT :: 2147483647;
}

VkSurfaceFullScreenExclusiveInfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fullScreenExclusive: VkFullScreenExclusiveEXT;
}

VkSurfaceCapabilitiesFullScreenExclusiveEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    fullScreenExclusiveSupported: VkBool32;
}

VkSurfaceFullScreenExclusiveWin32InfoEXT :: struct {
    sType: VkStructureType;
    pNext: *void;
    hmonitor: HMONITOR;
}

PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT :: #type (a0: VkPhysicalDevice, a1: *VkPhysicalDeviceSurfaceInfo2KHR, a2: *u32, a3: *VkPresentModeKHR) -> VkResult #c_call;

PFN_vkAcquireFullScreenExclusiveModeEXT :: #type (a0: VkDevice, a1: VkSwapchainKHR) -> VkResult #c_call;

PFN_vkReleaseFullScreenExclusiveModeEXT :: #type (a0: VkDevice, a1: VkSwapchainKHR) -> VkResult #c_call;

PFN_vkGetDeviceGroupSurfacePresentModes2EXT :: #type (a0: VkDevice, a1: *VkPhysicalDeviceSurfaceInfo2KHR, a2: *VkDeviceGroupPresentModeFlagsKHR) -> VkResult #c_call;

// vkGetPhysicalDeviceSurfacePresentModes2EXT :: (physicalDevice: VkPhysicalDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: *u32, pPresentModes: *VkPresentModeKHR) -> VkResult #foreign vulkan;

// vkAcquireFullScreenExclusiveModeEXT :: (device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult #foreign vulkan;

// vkReleaseFullScreenExclusiveModeEXT :: (device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult #foreign vulkan;

// vkGetDeviceGroupSurfacePresentModes2EXT :: (device: VkDevice, pSurfaceInfo: *VkPhysicalDeviceSurfaceInfo2KHR, pModes: *VkDeviceGroupPresentModeFlagsKHR) -> VkResult #foreign vulkan;

} // #if OS == .WINDOWS

#scope_file
#if OS == .WINDOWS vulkan :: #foreign_library "win/vulkan-1";

#if OS == .WINDOWS {
    #import "Windows";
}